//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:2.0.50727.3623
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Inpe.Subord.Comav.Egse.Smc {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("COMAV_EGSEDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class COMAV_EGSEDataSet : global::System.Data.DataSet {
        
        private apidsDataTable tableapids;
        
        private data_field_listsDataTable tabledata_field_lists;
        
        private data_field_lists_headerDataTable tabledata_field_lists_header;
        
        private data_fieldsDataTable tabledata_fields;
        
        private event_report_structureDataTable tableevent_report_structure;
        
        private memory_idsDataTable tablememory_ids;
        
        private mission_constantsDataTable tablemission_constants;
        
        private output_line_idsDataTable tableoutput_line_ids;
        
        private packet_store_idsDataTable tablepacket_store_ids;
        
        private packets_logDataTable tablepackets_log;
        
        private packets_log_data_fieldDataTable tablepackets_log_data_field;
        
        private parametersDataTable tableparameters;
        
        private report_definition_structureDataTable tablereport_definition_structure;
        
        private report_definitionsDataTable tablereport_definitions;
        
        private ridsDataTable tablerids;
        
        private saved_requestsDataTable tablesaved_requests;
        
        private saved_requests_data_fieldDataTable tablesaved_requests_data_field;
        
        private servicesDataTable tableservices;
        
        private sessionsDataTable tablesessions;
        
        private subtype_structureDataTable tablesubtype_structure;
        
        private subtypesDataTable tablesubtypes;
        
        private tc_failure_code_structureDataTable tabletc_failure_code_structure;
        
        private tc_failure_codesDataTable tabletc_failure_codes;
        
        private test_procedure_stepsDataTable tabletest_procedure_steps;
        
        private test_procedure_steps_executionDataTable tabletest_procedure_steps_execution;
        
        private test_proceduresDataTable tabletest_procedures;
        
        private test_procedures_executionDataTable tabletest_procedures_execution;
        
        private sp_test_sessions_logDataTable tablesp_test_sessions_log;
        
        private sp_test_sessions_log_app_dataDataTable tablesp_test_sessions_log_app_data;
        
        private global::System.Data.DataRelation relationFK_data_field_lists_data_field_lists_header;
        
        private global::System.Data.DataRelation relationFK_event_report_structure_data_fields;
        
        private global::System.Data.DataRelation relationFK_event_report_structure_rids;
        
        private global::System.Data.DataRelation relationFK_packets_log_sessions;
        
        private global::System.Data.DataRelation relationFK_packets_log_data_field_data_fields;
        
        private global::System.Data.DataRelation relationFK_packets_log_data_field_packets_log;
        
        private global::System.Data.DataRelation relationFK_report_definition_structure_parameters;
        
        private global::System.Data.DataRelation relationFK_report_definition_structure_report_definitions;
        
        private global::System.Data.DataRelation relationFK_subtype_structure_data_fields;
        
        private global::System.Data.DataRelation relationFK_subtype_structure_subtypes;
        
        private global::System.Data.DataRelation relationFK_subtypes_services;
        
        private global::System.Data.DataRelation relationFK_tc_failure_code_structure_tc_failure_codes;
        
        private global::System.Data.DataRelation relationFK_test_procedure_steps_data_fields;
        
        private global::System.Data.DataRelation relationFK_test_procedure_steps_saved_requests;
        
        private global::System.Data.DataRelation relationFK_test_procedure_steps_test_procedures;
        
        private global::System.Data.DataRelation relationFK_test_procedure_steps_execution_saved_requests;
        
        private global::System.Data.DataRelation relationFK_test_procedure_steps_execution_test_procedures;
        
        private global::System.Data.DataRelation relationFK_test_procedures_execution_test_procedures;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMAV_EGSEDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected COMAV_EGSEDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["apids"] != null)) {
                    base.Tables.Add(new apidsDataTable(ds.Tables["apids"]));
                }
                if ((ds.Tables["data_field_lists"] != null)) {
                    base.Tables.Add(new data_field_listsDataTable(ds.Tables["data_field_lists"]));
                }
                if ((ds.Tables["data_field_lists_header"] != null)) {
                    base.Tables.Add(new data_field_lists_headerDataTable(ds.Tables["data_field_lists_header"]));
                }
                if ((ds.Tables["data_fields"] != null)) {
                    base.Tables.Add(new data_fieldsDataTable(ds.Tables["data_fields"]));
                }
                if ((ds.Tables["event_report_structure"] != null)) {
                    base.Tables.Add(new event_report_structureDataTable(ds.Tables["event_report_structure"]));
                }
                if ((ds.Tables["memory_ids"] != null)) {
                    base.Tables.Add(new memory_idsDataTable(ds.Tables["memory_ids"]));
                }
                if ((ds.Tables["mission_constants"] != null)) {
                    base.Tables.Add(new mission_constantsDataTable(ds.Tables["mission_constants"]));
                }
                if ((ds.Tables["output_line_ids"] != null)) {
                    base.Tables.Add(new output_line_idsDataTable(ds.Tables["output_line_ids"]));
                }
                if ((ds.Tables["packet_store_ids"] != null)) {
                    base.Tables.Add(new packet_store_idsDataTable(ds.Tables["packet_store_ids"]));
                }
                if ((ds.Tables["packets_log"] != null)) {
                    base.Tables.Add(new packets_logDataTable(ds.Tables["packets_log"]));
                }
                if ((ds.Tables["packets_log_data_field"] != null)) {
                    base.Tables.Add(new packets_log_data_fieldDataTable(ds.Tables["packets_log_data_field"]));
                }
                if ((ds.Tables["parameters"] != null)) {
                    base.Tables.Add(new parametersDataTable(ds.Tables["parameters"]));
                }
                if ((ds.Tables["report_definition_structure"] != null)) {
                    base.Tables.Add(new report_definition_structureDataTable(ds.Tables["report_definition_structure"]));
                }
                if ((ds.Tables["report_definitions"] != null)) {
                    base.Tables.Add(new report_definitionsDataTable(ds.Tables["report_definitions"]));
                }
                if ((ds.Tables["rids"] != null)) {
                    base.Tables.Add(new ridsDataTable(ds.Tables["rids"]));
                }
                if ((ds.Tables["saved_requests"] != null)) {
                    base.Tables.Add(new saved_requestsDataTable(ds.Tables["saved_requests"]));
                }
                if ((ds.Tables["saved_requests_data_field"] != null)) {
                    base.Tables.Add(new saved_requests_data_fieldDataTable(ds.Tables["saved_requests_data_field"]));
                }
                if ((ds.Tables["services"] != null)) {
                    base.Tables.Add(new servicesDataTable(ds.Tables["services"]));
                }
                if ((ds.Tables["sessions"] != null)) {
                    base.Tables.Add(new sessionsDataTable(ds.Tables["sessions"]));
                }
                if ((ds.Tables["subtype_structure"] != null)) {
                    base.Tables.Add(new subtype_structureDataTable(ds.Tables["subtype_structure"]));
                }
                if ((ds.Tables["subtypes"] != null)) {
                    base.Tables.Add(new subtypesDataTable(ds.Tables["subtypes"]));
                }
                if ((ds.Tables["tc_failure_code_structure"] != null)) {
                    base.Tables.Add(new tc_failure_code_structureDataTable(ds.Tables["tc_failure_code_structure"]));
                }
                if ((ds.Tables["tc_failure_codes"] != null)) {
                    base.Tables.Add(new tc_failure_codesDataTable(ds.Tables["tc_failure_codes"]));
                }
                if ((ds.Tables["test_procedure_steps"] != null)) {
                    base.Tables.Add(new test_procedure_stepsDataTable(ds.Tables["test_procedure_steps"]));
                }
                if ((ds.Tables["test_procedure_steps_execution"] != null)) {
                    base.Tables.Add(new test_procedure_steps_executionDataTable(ds.Tables["test_procedure_steps_execution"]));
                }
                if ((ds.Tables["test_procedures"] != null)) {
                    base.Tables.Add(new test_proceduresDataTable(ds.Tables["test_procedures"]));
                }
                if ((ds.Tables["test_procedures_execution"] != null)) {
                    base.Tables.Add(new test_procedures_executionDataTable(ds.Tables["test_procedures_execution"]));
                }
                if ((ds.Tables["sp_test_sessions_log"] != null)) {
                    base.Tables.Add(new sp_test_sessions_logDataTable(ds.Tables["sp_test_sessions_log"]));
                }
                if ((ds.Tables["sp_test_sessions_log_app_data"] != null)) {
                    base.Tables.Add(new sp_test_sessions_log_app_dataDataTable(ds.Tables["sp_test_sessions_log_app_data"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public apidsDataTable apids {
            get {
                return this.tableapids;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public data_field_listsDataTable data_field_lists {
            get {
                return this.tabledata_field_lists;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public data_field_lists_headerDataTable data_field_lists_header {
            get {
                return this.tabledata_field_lists_header;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public data_fieldsDataTable data_fields {
            get {
                return this.tabledata_fields;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public event_report_structureDataTable event_report_structure {
            get {
                return this.tableevent_report_structure;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public memory_idsDataTable memory_ids {
            get {
                return this.tablememory_ids;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mission_constantsDataTable mission_constants {
            get {
                return this.tablemission_constants;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public output_line_idsDataTable output_line_ids {
            get {
                return this.tableoutput_line_ids;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public packet_store_idsDataTable packet_store_ids {
            get {
                return this.tablepacket_store_ids;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public packets_logDataTable packets_log {
            get {
                return this.tablepackets_log;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public packets_log_data_fieldDataTable packets_log_data_field {
            get {
                return this.tablepackets_log_data_field;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public parametersDataTable parameters {
            get {
                return this.tableparameters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public report_definition_structureDataTable report_definition_structure {
            get {
                return this.tablereport_definition_structure;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public report_definitionsDataTable report_definitions {
            get {
                return this.tablereport_definitions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ridsDataTable rids {
            get {
                return this.tablerids;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public saved_requestsDataTable saved_requests {
            get {
                return this.tablesaved_requests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public saved_requests_data_fieldDataTable saved_requests_data_field {
            get {
                return this.tablesaved_requests_data_field;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public servicesDataTable services {
            get {
                return this.tableservices;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sessionsDataTable sessions {
            get {
                return this.tablesessions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public subtype_structureDataTable subtype_structure {
            get {
                return this.tablesubtype_structure;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public subtypesDataTable subtypes {
            get {
                return this.tablesubtypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tc_failure_code_structureDataTable tc_failure_code_structure {
            get {
                return this.tabletc_failure_code_structure;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tc_failure_codesDataTable tc_failure_codes {
            get {
                return this.tabletc_failure_codes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public test_procedure_stepsDataTable test_procedure_steps {
            get {
                return this.tabletest_procedure_steps;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public test_procedure_steps_executionDataTable test_procedure_steps_execution {
            get {
                return this.tabletest_procedure_steps_execution;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public test_proceduresDataTable test_procedures {
            get {
                return this.tabletest_procedures;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public test_procedures_executionDataTable test_procedures_execution {
            get {
                return this.tabletest_procedures_execution;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sp_test_sessions_logDataTable sp_test_sessions_log {
            get {
                return this.tablesp_test_sessions_log;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sp_test_sessions_log_app_dataDataTable sp_test_sessions_log_app_data {
            get {
                return this.tablesp_test_sessions_log_app_data;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            COMAV_EGSEDataSet cln = ((COMAV_EGSEDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["apids"] != null)) {
                    base.Tables.Add(new apidsDataTable(ds.Tables["apids"]));
                }
                if ((ds.Tables["data_field_lists"] != null)) {
                    base.Tables.Add(new data_field_listsDataTable(ds.Tables["data_field_lists"]));
                }
                if ((ds.Tables["data_field_lists_header"] != null)) {
                    base.Tables.Add(new data_field_lists_headerDataTable(ds.Tables["data_field_lists_header"]));
                }
                if ((ds.Tables["data_fields"] != null)) {
                    base.Tables.Add(new data_fieldsDataTable(ds.Tables["data_fields"]));
                }
                if ((ds.Tables["event_report_structure"] != null)) {
                    base.Tables.Add(new event_report_structureDataTable(ds.Tables["event_report_structure"]));
                }
                if ((ds.Tables["memory_ids"] != null)) {
                    base.Tables.Add(new memory_idsDataTable(ds.Tables["memory_ids"]));
                }
                if ((ds.Tables["mission_constants"] != null)) {
                    base.Tables.Add(new mission_constantsDataTable(ds.Tables["mission_constants"]));
                }
                if ((ds.Tables["output_line_ids"] != null)) {
                    base.Tables.Add(new output_line_idsDataTable(ds.Tables["output_line_ids"]));
                }
                if ((ds.Tables["packet_store_ids"] != null)) {
                    base.Tables.Add(new packet_store_idsDataTable(ds.Tables["packet_store_ids"]));
                }
                if ((ds.Tables["packets_log"] != null)) {
                    base.Tables.Add(new packets_logDataTable(ds.Tables["packets_log"]));
                }
                if ((ds.Tables["packets_log_data_field"] != null)) {
                    base.Tables.Add(new packets_log_data_fieldDataTable(ds.Tables["packets_log_data_field"]));
                }
                if ((ds.Tables["parameters"] != null)) {
                    base.Tables.Add(new parametersDataTable(ds.Tables["parameters"]));
                }
                if ((ds.Tables["report_definition_structure"] != null)) {
                    base.Tables.Add(new report_definition_structureDataTable(ds.Tables["report_definition_structure"]));
                }
                if ((ds.Tables["report_definitions"] != null)) {
                    base.Tables.Add(new report_definitionsDataTable(ds.Tables["report_definitions"]));
                }
                if ((ds.Tables["rids"] != null)) {
                    base.Tables.Add(new ridsDataTable(ds.Tables["rids"]));
                }
                if ((ds.Tables["saved_requests"] != null)) {
                    base.Tables.Add(new saved_requestsDataTable(ds.Tables["saved_requests"]));
                }
                if ((ds.Tables["saved_requests_data_field"] != null)) {
                    base.Tables.Add(new saved_requests_data_fieldDataTable(ds.Tables["saved_requests_data_field"]));
                }
                if ((ds.Tables["services"] != null)) {
                    base.Tables.Add(new servicesDataTable(ds.Tables["services"]));
                }
                if ((ds.Tables["sessions"] != null)) {
                    base.Tables.Add(new sessionsDataTable(ds.Tables["sessions"]));
                }
                if ((ds.Tables["subtype_structure"] != null)) {
                    base.Tables.Add(new subtype_structureDataTable(ds.Tables["subtype_structure"]));
                }
                if ((ds.Tables["subtypes"] != null)) {
                    base.Tables.Add(new subtypesDataTable(ds.Tables["subtypes"]));
                }
                if ((ds.Tables["tc_failure_code_structure"] != null)) {
                    base.Tables.Add(new tc_failure_code_structureDataTable(ds.Tables["tc_failure_code_structure"]));
                }
                if ((ds.Tables["tc_failure_codes"] != null)) {
                    base.Tables.Add(new tc_failure_codesDataTable(ds.Tables["tc_failure_codes"]));
                }
                if ((ds.Tables["test_procedure_steps"] != null)) {
                    base.Tables.Add(new test_procedure_stepsDataTable(ds.Tables["test_procedure_steps"]));
                }
                if ((ds.Tables["test_procedure_steps_execution"] != null)) {
                    base.Tables.Add(new test_procedure_steps_executionDataTable(ds.Tables["test_procedure_steps_execution"]));
                }
                if ((ds.Tables["test_procedures"] != null)) {
                    base.Tables.Add(new test_proceduresDataTable(ds.Tables["test_procedures"]));
                }
                if ((ds.Tables["test_procedures_execution"] != null)) {
                    base.Tables.Add(new test_procedures_executionDataTable(ds.Tables["test_procedures_execution"]));
                }
                if ((ds.Tables["sp_test_sessions_log"] != null)) {
                    base.Tables.Add(new sp_test_sessions_logDataTable(ds.Tables["sp_test_sessions_log"]));
                }
                if ((ds.Tables["sp_test_sessions_log_app_data"] != null)) {
                    base.Tables.Add(new sp_test_sessions_log_app_dataDataTable(ds.Tables["sp_test_sessions_log_app_data"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableapids = ((apidsDataTable)(base.Tables["apids"]));
            if ((initTable == true)) {
                if ((this.tableapids != null)) {
                    this.tableapids.InitVars();
                }
            }
            this.tabledata_field_lists = ((data_field_listsDataTable)(base.Tables["data_field_lists"]));
            if ((initTable == true)) {
                if ((this.tabledata_field_lists != null)) {
                    this.tabledata_field_lists.InitVars();
                }
            }
            this.tabledata_field_lists_header = ((data_field_lists_headerDataTable)(base.Tables["data_field_lists_header"]));
            if ((initTable == true)) {
                if ((this.tabledata_field_lists_header != null)) {
                    this.tabledata_field_lists_header.InitVars();
                }
            }
            this.tabledata_fields = ((data_fieldsDataTable)(base.Tables["data_fields"]));
            if ((initTable == true)) {
                if ((this.tabledata_fields != null)) {
                    this.tabledata_fields.InitVars();
                }
            }
            this.tableevent_report_structure = ((event_report_structureDataTable)(base.Tables["event_report_structure"]));
            if ((initTable == true)) {
                if ((this.tableevent_report_structure != null)) {
                    this.tableevent_report_structure.InitVars();
                }
            }
            this.tablememory_ids = ((memory_idsDataTable)(base.Tables["memory_ids"]));
            if ((initTable == true)) {
                if ((this.tablememory_ids != null)) {
                    this.tablememory_ids.InitVars();
                }
            }
            this.tablemission_constants = ((mission_constantsDataTable)(base.Tables["mission_constants"]));
            if ((initTable == true)) {
                if ((this.tablemission_constants != null)) {
                    this.tablemission_constants.InitVars();
                }
            }
            this.tableoutput_line_ids = ((output_line_idsDataTable)(base.Tables["output_line_ids"]));
            if ((initTable == true)) {
                if ((this.tableoutput_line_ids != null)) {
                    this.tableoutput_line_ids.InitVars();
                }
            }
            this.tablepacket_store_ids = ((packet_store_idsDataTable)(base.Tables["packet_store_ids"]));
            if ((initTable == true)) {
                if ((this.tablepacket_store_ids != null)) {
                    this.tablepacket_store_ids.InitVars();
                }
            }
            this.tablepackets_log = ((packets_logDataTable)(base.Tables["packets_log"]));
            if ((initTable == true)) {
                if ((this.tablepackets_log != null)) {
                    this.tablepackets_log.InitVars();
                }
            }
            this.tablepackets_log_data_field = ((packets_log_data_fieldDataTable)(base.Tables["packets_log_data_field"]));
            if ((initTable == true)) {
                if ((this.tablepackets_log_data_field != null)) {
                    this.tablepackets_log_data_field.InitVars();
                }
            }
            this.tableparameters = ((parametersDataTable)(base.Tables["parameters"]));
            if ((initTable == true)) {
                if ((this.tableparameters != null)) {
                    this.tableparameters.InitVars();
                }
            }
            this.tablereport_definition_structure = ((report_definition_structureDataTable)(base.Tables["report_definition_structure"]));
            if ((initTable == true)) {
                if ((this.tablereport_definition_structure != null)) {
                    this.tablereport_definition_structure.InitVars();
                }
            }
            this.tablereport_definitions = ((report_definitionsDataTable)(base.Tables["report_definitions"]));
            if ((initTable == true)) {
                if ((this.tablereport_definitions != null)) {
                    this.tablereport_definitions.InitVars();
                }
            }
            this.tablerids = ((ridsDataTable)(base.Tables["rids"]));
            if ((initTable == true)) {
                if ((this.tablerids != null)) {
                    this.tablerids.InitVars();
                }
            }
            this.tablesaved_requests = ((saved_requestsDataTable)(base.Tables["saved_requests"]));
            if ((initTable == true)) {
                if ((this.tablesaved_requests != null)) {
                    this.tablesaved_requests.InitVars();
                }
            }
            this.tablesaved_requests_data_field = ((saved_requests_data_fieldDataTable)(base.Tables["saved_requests_data_field"]));
            if ((initTable == true)) {
                if ((this.tablesaved_requests_data_field != null)) {
                    this.tablesaved_requests_data_field.InitVars();
                }
            }
            this.tableservices = ((servicesDataTable)(base.Tables["services"]));
            if ((initTable == true)) {
                if ((this.tableservices != null)) {
                    this.tableservices.InitVars();
                }
            }
            this.tablesessions = ((sessionsDataTable)(base.Tables["sessions"]));
            if ((initTable == true)) {
                if ((this.tablesessions != null)) {
                    this.tablesessions.InitVars();
                }
            }
            this.tablesubtype_structure = ((subtype_structureDataTable)(base.Tables["subtype_structure"]));
            if ((initTable == true)) {
                if ((this.tablesubtype_structure != null)) {
                    this.tablesubtype_structure.InitVars();
                }
            }
            this.tablesubtypes = ((subtypesDataTable)(base.Tables["subtypes"]));
            if ((initTable == true)) {
                if ((this.tablesubtypes != null)) {
                    this.tablesubtypes.InitVars();
                }
            }
            this.tabletc_failure_code_structure = ((tc_failure_code_structureDataTable)(base.Tables["tc_failure_code_structure"]));
            if ((initTable == true)) {
                if ((this.tabletc_failure_code_structure != null)) {
                    this.tabletc_failure_code_structure.InitVars();
                }
            }
            this.tabletc_failure_codes = ((tc_failure_codesDataTable)(base.Tables["tc_failure_codes"]));
            if ((initTable == true)) {
                if ((this.tabletc_failure_codes != null)) {
                    this.tabletc_failure_codes.InitVars();
                }
            }
            this.tabletest_procedure_steps = ((test_procedure_stepsDataTable)(base.Tables["test_procedure_steps"]));
            if ((initTable == true)) {
                if ((this.tabletest_procedure_steps != null)) {
                    this.tabletest_procedure_steps.InitVars();
                }
            }
            this.tabletest_procedure_steps_execution = ((test_procedure_steps_executionDataTable)(base.Tables["test_procedure_steps_execution"]));
            if ((initTable == true)) {
                if ((this.tabletest_procedure_steps_execution != null)) {
                    this.tabletest_procedure_steps_execution.InitVars();
                }
            }
            this.tabletest_procedures = ((test_proceduresDataTable)(base.Tables["test_procedures"]));
            if ((initTable == true)) {
                if ((this.tabletest_procedures != null)) {
                    this.tabletest_procedures.InitVars();
                }
            }
            this.tabletest_procedures_execution = ((test_procedures_executionDataTable)(base.Tables["test_procedures_execution"]));
            if ((initTable == true)) {
                if ((this.tabletest_procedures_execution != null)) {
                    this.tabletest_procedures_execution.InitVars();
                }
            }
            this.tablesp_test_sessions_log = ((sp_test_sessions_logDataTable)(base.Tables["sp_test_sessions_log"]));
            if ((initTable == true)) {
                if ((this.tablesp_test_sessions_log != null)) {
                    this.tablesp_test_sessions_log.InitVars();
                }
            }
            this.tablesp_test_sessions_log_app_data = ((sp_test_sessions_log_app_dataDataTable)(base.Tables["sp_test_sessions_log_app_data"]));
            if ((initTable == true)) {
                if ((this.tablesp_test_sessions_log_app_data != null)) {
                    this.tablesp_test_sessions_log_app_data.InitVars();
                }
            }
            this.relationFK_data_field_lists_data_field_lists_header = this.Relations["FK_data_field_lists_data_field_lists_header"];
            this.relationFK_event_report_structure_data_fields = this.Relations["FK_event_report_structure_data_fields"];
            this.relationFK_event_report_structure_rids = this.Relations["FK_event_report_structure_rids"];
            this.relationFK_packets_log_sessions = this.Relations["FK_packets_log_sessions"];
            this.relationFK_packets_log_data_field_data_fields = this.Relations["FK_packets_log_data_field_data_fields"];
            this.relationFK_packets_log_data_field_packets_log = this.Relations["FK_packets_log_data_field_packets_log"];
            this.relationFK_report_definition_structure_parameters = this.Relations["FK_report_definition_structure_parameters"];
            this.relationFK_report_definition_structure_report_definitions = this.Relations["FK_report_definition_structure_report_definitions"];
            this.relationFK_subtype_structure_data_fields = this.Relations["FK_subtype_structure_data_fields"];
            this.relationFK_subtype_structure_subtypes = this.Relations["FK_subtype_structure_subtypes"];
            this.relationFK_subtypes_services = this.Relations["FK_subtypes_services"];
            this.relationFK_tc_failure_code_structure_tc_failure_codes = this.Relations["FK_tc_failure_code_structure_tc_failure_codes"];
            this.relationFK_test_procedure_steps_data_fields = this.Relations["FK_test_procedure_steps_data_fields"];
            this.relationFK_test_procedure_steps_saved_requests = this.Relations["FK_test_procedure_steps_saved_requests"];
            this.relationFK_test_procedure_steps_test_procedures = this.Relations["FK_test_procedure_steps_test_procedures"];
            this.relationFK_test_procedure_steps_execution_saved_requests = this.Relations["FK_test_procedure_steps_execution_saved_requests"];
            this.relationFK_test_procedure_steps_execution_test_procedures = this.Relations["FK_test_procedure_steps_execution_test_procedures"];
            this.relationFK_test_procedures_execution_test_procedures = this.Relations["FK_test_procedures_execution_test_procedures"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "COMAV_EGSEDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/COMAV_EGSEDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableapids = new apidsDataTable();
            base.Tables.Add(this.tableapids);
            this.tabledata_field_lists = new data_field_listsDataTable();
            base.Tables.Add(this.tabledata_field_lists);
            this.tabledata_field_lists_header = new data_field_lists_headerDataTable();
            base.Tables.Add(this.tabledata_field_lists_header);
            this.tabledata_fields = new data_fieldsDataTable();
            base.Tables.Add(this.tabledata_fields);
            this.tableevent_report_structure = new event_report_structureDataTable();
            base.Tables.Add(this.tableevent_report_structure);
            this.tablememory_ids = new memory_idsDataTable();
            base.Tables.Add(this.tablememory_ids);
            this.tablemission_constants = new mission_constantsDataTable();
            base.Tables.Add(this.tablemission_constants);
            this.tableoutput_line_ids = new output_line_idsDataTable();
            base.Tables.Add(this.tableoutput_line_ids);
            this.tablepacket_store_ids = new packet_store_idsDataTable();
            base.Tables.Add(this.tablepacket_store_ids);
            this.tablepackets_log = new packets_logDataTable();
            base.Tables.Add(this.tablepackets_log);
            this.tablepackets_log_data_field = new packets_log_data_fieldDataTable();
            base.Tables.Add(this.tablepackets_log_data_field);
            this.tableparameters = new parametersDataTable();
            base.Tables.Add(this.tableparameters);
            this.tablereport_definition_structure = new report_definition_structureDataTable();
            base.Tables.Add(this.tablereport_definition_structure);
            this.tablereport_definitions = new report_definitionsDataTable();
            base.Tables.Add(this.tablereport_definitions);
            this.tablerids = new ridsDataTable();
            base.Tables.Add(this.tablerids);
            this.tablesaved_requests = new saved_requestsDataTable();
            base.Tables.Add(this.tablesaved_requests);
            this.tablesaved_requests_data_field = new saved_requests_data_fieldDataTable();
            base.Tables.Add(this.tablesaved_requests_data_field);
            this.tableservices = new servicesDataTable();
            base.Tables.Add(this.tableservices);
            this.tablesessions = new sessionsDataTable();
            base.Tables.Add(this.tablesessions);
            this.tablesubtype_structure = new subtype_structureDataTable();
            base.Tables.Add(this.tablesubtype_structure);
            this.tablesubtypes = new subtypesDataTable();
            base.Tables.Add(this.tablesubtypes);
            this.tabletc_failure_code_structure = new tc_failure_code_structureDataTable();
            base.Tables.Add(this.tabletc_failure_code_structure);
            this.tabletc_failure_codes = new tc_failure_codesDataTable();
            base.Tables.Add(this.tabletc_failure_codes);
            this.tabletest_procedure_steps = new test_procedure_stepsDataTable();
            base.Tables.Add(this.tabletest_procedure_steps);
            this.tabletest_procedure_steps_execution = new test_procedure_steps_executionDataTable();
            base.Tables.Add(this.tabletest_procedure_steps_execution);
            this.tabletest_procedures = new test_proceduresDataTable();
            base.Tables.Add(this.tabletest_procedures);
            this.tabletest_procedures_execution = new test_procedures_executionDataTable();
            base.Tables.Add(this.tabletest_procedures_execution);
            this.tablesp_test_sessions_log = new sp_test_sessions_logDataTable();
            base.Tables.Add(this.tablesp_test_sessions_log);
            this.tablesp_test_sessions_log_app_data = new sp_test_sessions_log_app_dataDataTable();
            base.Tables.Add(this.tablesp_test_sessions_log_app_data);
            this.relationFK_data_field_lists_data_field_lists_header = new global::System.Data.DataRelation("FK_data_field_lists_data_field_lists_header", new global::System.Data.DataColumn[] {
                        this.tabledata_field_lists_header.list_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabledata_field_lists.list_idColumn}, false);
            this.Relations.Add(this.relationFK_data_field_lists_data_field_lists_header);
            this.relationFK_event_report_structure_data_fields = new global::System.Data.DataRelation("FK_event_report_structure_data_fields", new global::System.Data.DataColumn[] {
                        this.tabledata_fields.data_field_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableevent_report_structure.data_field_idColumn}, false);
            this.Relations.Add(this.relationFK_event_report_structure_data_fields);
            this.relationFK_event_report_structure_rids = new global::System.Data.DataRelation("FK_event_report_structure_rids", new global::System.Data.DataColumn[] {
                        this.tablerids.ridColumn}, new global::System.Data.DataColumn[] {
                        this.tableevent_report_structure.ridColumn}, false);
            this.Relations.Add(this.relationFK_event_report_structure_rids);
            this.relationFK_packets_log_sessions = new global::System.Data.DataRelation("FK_packets_log_sessions", new global::System.Data.DataColumn[] {
                        this.tablesessions.session_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablepackets_log.session_idColumn}, false);
            this.Relations.Add(this.relationFK_packets_log_sessions);
            this.relationFK_packets_log_data_field_data_fields = new global::System.Data.DataRelation("FK_packets_log_data_field_data_fields", new global::System.Data.DataColumn[] {
                        this.tabledata_fields.data_field_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablepackets_log_data_field.data_field_idColumn}, false);
            this.Relations.Add(this.relationFK_packets_log_data_field_data_fields);
            this.relationFK_packets_log_data_field_packets_log = new global::System.Data.DataRelation("FK_packets_log_data_field_packets_log", new global::System.Data.DataColumn[] {
                        this.tablepackets_log.session_idColumn,
                        this.tablepackets_log.unique_log_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablepackets_log_data_field.session_idColumn,
                        this.tablepackets_log_data_field.unique_log_idColumn}, false);
            this.Relations.Add(this.relationFK_packets_log_data_field_packets_log);
            this.relationFK_report_definition_structure_parameters = new global::System.Data.DataRelation("FK_report_definition_structure_parameters", new global::System.Data.DataColumn[] {
                        this.tableparameters.parameter_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablereport_definition_structure.parameter_idColumn}, false);
            this.Relations.Add(this.relationFK_report_definition_structure_parameters);
            this.relationFK_report_definition_structure_report_definitions = new global::System.Data.DataRelation("FK_report_definition_structure_report_definitions", new global::System.Data.DataColumn[] {
                        this.tablereport_definitions.structure_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablereport_definition_structure.structure_idColumn}, false);
            this.Relations.Add(this.relationFK_report_definition_structure_report_definitions);
            this.relationFK_subtype_structure_data_fields = new global::System.Data.DataRelation("FK_subtype_structure_data_fields", new global::System.Data.DataColumn[] {
                        this.tabledata_fields.data_field_idColumn}, new global::System.Data.DataColumn[] {
                        this.tablesubtype_structure.data_field_idColumn}, false);
            this.Relations.Add(this.relationFK_subtype_structure_data_fields);
            this.relationFK_subtype_structure_subtypes = new global::System.Data.DataRelation("FK_subtype_structure_subtypes", new global::System.Data.DataColumn[] {
                        this.tablesubtypes.service_typeColumn,
                        this.tablesubtypes.service_subtypeColumn}, new global::System.Data.DataColumn[] {
                        this.tablesubtype_structure.service_typeColumn,
                        this.tablesubtype_structure.service_subtypeColumn}, false);
            this.Relations.Add(this.relationFK_subtype_structure_subtypes);
            this.relationFK_subtypes_services = new global::System.Data.DataRelation("FK_subtypes_services", new global::System.Data.DataColumn[] {
                        this.tableservices.service_typeColumn}, new global::System.Data.DataColumn[] {
                        this.tablesubtypes.service_typeColumn}, false);
            this.Relations.Add(this.relationFK_subtypes_services);
            this.relationFK_tc_failure_code_structure_tc_failure_codes = new global::System.Data.DataRelation("FK_tc_failure_code_structure_tc_failure_codes", new global::System.Data.DataColumn[] {
                        this.tabletc_failure_codes.tc_failure_codeColumn}, new global::System.Data.DataColumn[] {
                        this.tabletc_failure_code_structure.tc_failure_codeColumn}, false);
            this.Relations.Add(this.relationFK_tc_failure_code_structure_tc_failure_codes);
            this.relationFK_test_procedure_steps_data_fields = new global::System.Data.DataRelation("FK_test_procedure_steps_data_fields", new global::System.Data.DataColumn[] {
                        this.tabledata_fields.data_field_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletest_procedure_steps.data_field_idColumn}, false);
            this.Relations.Add(this.relationFK_test_procedure_steps_data_fields);
            this.relationFK_test_procedure_steps_saved_requests = new global::System.Data.DataRelation("FK_test_procedure_steps_saved_requests", new global::System.Data.DataColumn[] {
                        this.tablesaved_requests.saved_request_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletest_procedure_steps.saved_request_idColumn}, false);
            this.Relations.Add(this.relationFK_test_procedure_steps_saved_requests);
            this.relationFK_test_procedure_steps_test_procedures = new global::System.Data.DataRelation("FK_test_procedure_steps_test_procedures", new global::System.Data.DataColumn[] {
                        this.tabletest_procedures.procedure_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletest_procedure_steps.procedure_idColumn}, false);
            this.Relations.Add(this.relationFK_test_procedure_steps_test_procedures);
            this.relationFK_test_procedure_steps_execution_saved_requests = new global::System.Data.DataRelation("FK_test_procedure_steps_execution_saved_requests", new global::System.Data.DataColumn[] {
                        this.tablesaved_requests.saved_request_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletest_procedure_steps_execution.saved_request_idColumn}, false);
            this.Relations.Add(this.relationFK_test_procedure_steps_execution_saved_requests);
            this.relationFK_test_procedure_steps_execution_test_procedures = new global::System.Data.DataRelation("FK_test_procedure_steps_execution_test_procedures", new global::System.Data.DataColumn[] {
                        this.tabletest_procedures.procedure_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletest_procedure_steps_execution.procedure_idColumn}, false);
            this.Relations.Add(this.relationFK_test_procedure_steps_execution_test_procedures);
            this.relationFK_test_procedures_execution_test_procedures = new global::System.Data.DataRelation("FK_test_procedures_execution_test_procedures", new global::System.Data.DataColumn[] {
                        this.tabletest_procedures.procedure_idColumn}, new global::System.Data.DataColumn[] {
                        this.tabletest_procedures_execution.procedure_idColumn}, false);
            this.Relations.Add(this.relationFK_test_procedures_execution_test_procedures);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeapids() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedata_field_lists() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedata_field_lists_header() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedata_fields() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeevent_report_structure() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializememory_ids() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemission_constants() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeoutput_line_ids() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepacket_store_ids() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepackets_log() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepackets_log_data_field() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeparameters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereport_definition_structure() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereport_definitions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializerids() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesaved_requests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesaved_requests_data_field() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeservices() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesessions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesubtype_structure() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesubtypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetc_failure_code_structure() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetc_failure_codes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetest_procedure_steps() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetest_procedure_steps_execution() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetest_procedures() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetest_procedures_execution() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesp_test_sessions_log() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesp_test_sessions_log_app_data() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void apidsRowChangeEventHandler(object sender, apidsRowChangeEvent e);
        
        public delegate void data_field_listsRowChangeEventHandler(object sender, data_field_listsRowChangeEvent e);
        
        public delegate void data_field_lists_headerRowChangeEventHandler(object sender, data_field_lists_headerRowChangeEvent e);
        
        public delegate void data_fieldsRowChangeEventHandler(object sender, data_fieldsRowChangeEvent e);
        
        public delegate void event_report_structureRowChangeEventHandler(object sender, event_report_structureRowChangeEvent e);
        
        public delegate void memory_idsRowChangeEventHandler(object sender, memory_idsRowChangeEvent e);
        
        public delegate void mission_constantsRowChangeEventHandler(object sender, mission_constantsRowChangeEvent e);
        
        public delegate void output_line_idsRowChangeEventHandler(object sender, output_line_idsRowChangeEvent e);
        
        public delegate void packet_store_idsRowChangeEventHandler(object sender, packet_store_idsRowChangeEvent e);
        
        public delegate void packets_logRowChangeEventHandler(object sender, packets_logRowChangeEvent e);
        
        public delegate void packets_log_data_fieldRowChangeEventHandler(object sender, packets_log_data_fieldRowChangeEvent e);
        
        public delegate void parametersRowChangeEventHandler(object sender, parametersRowChangeEvent e);
        
        public delegate void report_definition_structureRowChangeEventHandler(object sender, report_definition_structureRowChangeEvent e);
        
        public delegate void report_definitionsRowChangeEventHandler(object sender, report_definitionsRowChangeEvent e);
        
        public delegate void ridsRowChangeEventHandler(object sender, ridsRowChangeEvent e);
        
        public delegate void saved_requestsRowChangeEventHandler(object sender, saved_requestsRowChangeEvent e);
        
        public delegate void saved_requests_data_fieldRowChangeEventHandler(object sender, saved_requests_data_fieldRowChangeEvent e);
        
        public delegate void servicesRowChangeEventHandler(object sender, servicesRowChangeEvent e);
        
        public delegate void sessionsRowChangeEventHandler(object sender, sessionsRowChangeEvent e);
        
        public delegate void subtype_structureRowChangeEventHandler(object sender, subtype_structureRowChangeEvent e);
        
        public delegate void subtypesRowChangeEventHandler(object sender, subtypesRowChangeEvent e);
        
        public delegate void tc_failure_code_structureRowChangeEventHandler(object sender, tc_failure_code_structureRowChangeEvent e);
        
        public delegate void tc_failure_codesRowChangeEventHandler(object sender, tc_failure_codesRowChangeEvent e);
        
        public delegate void test_procedure_stepsRowChangeEventHandler(object sender, test_procedure_stepsRowChangeEvent e);
        
        public delegate void test_procedure_steps_executionRowChangeEventHandler(object sender, test_procedure_steps_executionRowChangeEvent e);
        
        public delegate void test_proceduresRowChangeEventHandler(object sender, test_proceduresRowChangeEvent e);
        
        public delegate void test_procedures_executionRowChangeEventHandler(object sender, test_procedures_executionRowChangeEvent e);
        
        public delegate void sp_test_sessions_logRowChangeEventHandler(object sender, sp_test_sessions_logRowChangeEvent e);
        
        public delegate void sp_test_sessions_log_app_dataRowChangeEventHandler(object sender, sp_test_sessions_log_app_dataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class apidsDataTable : global::System.Data.TypedTableBase<apidsRow> {
            
            private global::System.Data.DataColumn columnapid;
            
            private global::System.Data.DataColumn columnapplication_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public apidsDataTable() {
                this.TableName = "apids";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal apidsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected apidsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apidColumn {
                get {
                    return this.columnapid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn application_nameColumn {
                get {
                    return this.columnapplication_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public apidsRow this[int index] {
                get {
                    return ((apidsRow)(this.Rows[index]));
                }
            }
            
            public event apidsRowChangeEventHandler apidsRowChanging;
            
            public event apidsRowChangeEventHandler apidsRowChanged;
            
            public event apidsRowChangeEventHandler apidsRowDeleting;
            
            public event apidsRowChangeEventHandler apidsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddapidsRow(apidsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public apidsRow AddapidsRow(int apid, string application_name) {
                apidsRow rowapidsRow = ((apidsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        apid,
                        application_name};
                rowapidsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowapidsRow);
                return rowapidsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public apidsRow FindByapid(int apid) {
                return ((apidsRow)(this.Rows.Find(new object[] {
                            apid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                apidsDataTable cln = ((apidsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new apidsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnapid = base.Columns["apid"];
                this.columnapplication_name = base.Columns["application_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnapid = new global::System.Data.DataColumn("apid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapid);
                this.columnapplication_name = new global::System.Data.DataColumn("application_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapplication_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnapid}, true));
                this.columnapid.AllowDBNull = false;
                this.columnapid.Unique = true;
                this.columnapplication_name.AllowDBNull = false;
                this.columnapplication_name.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public apidsRow NewapidsRow() {
                return ((apidsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new apidsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(apidsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.apidsRowChanged != null)) {
                    this.apidsRowChanged(this, new apidsRowChangeEvent(((apidsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.apidsRowChanging != null)) {
                    this.apidsRowChanging(this, new apidsRowChangeEvent(((apidsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.apidsRowDeleted != null)) {
                    this.apidsRowDeleted(this, new apidsRowChangeEvent(((apidsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.apidsRowDeleting != null)) {
                    this.apidsRowDeleting(this, new apidsRowChangeEvent(((apidsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveapidsRow(apidsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "apidsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class data_field_listsDataTable : global::System.Data.TypedTableBase<data_field_listsRow> {
            
            private global::System.Data.DataColumn columnlist_id;
            
            private global::System.Data.DataColumn columnlist_value;
            
            private global::System.Data.DataColumn columnlist_text;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsDataTable() {
                this.TableName = "data_field_lists";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal data_field_listsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected data_field_listsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn list_idColumn {
                get {
                    return this.columnlist_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn list_valueColumn {
                get {
                    return this.columnlist_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn list_textColumn {
                get {
                    return this.columnlist_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsRow this[int index] {
                get {
                    return ((data_field_listsRow)(this.Rows[index]));
                }
            }
            
            public event data_field_listsRowChangeEventHandler data_field_listsRowChanging;
            
            public event data_field_listsRowChangeEventHandler data_field_listsRowChanged;
            
            public event data_field_listsRowChangeEventHandler data_field_listsRowDeleting;
            
            public event data_field_listsRowChangeEventHandler data_field_listsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adddata_field_listsRow(data_field_listsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsRow Adddata_field_listsRow(data_field_lists_headerRow parentdata_field_lists_headerRowByFK_data_field_lists_data_field_lists_header, int list_value, string list_text) {
                data_field_listsRow rowdata_field_listsRow = ((data_field_listsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        list_value,
                        list_text};
                if ((parentdata_field_lists_headerRowByFK_data_field_lists_data_field_lists_header != null)) {
                    columnValuesArray[0] = parentdata_field_lists_headerRowByFK_data_field_lists_data_field_lists_header[0];
                }
                rowdata_field_listsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdata_field_listsRow);
                return rowdata_field_listsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsRow FindBylist_idlist_value(int list_id, int list_value) {
                return ((data_field_listsRow)(this.Rows.Find(new object[] {
                            list_id,
                            list_value})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                data_field_listsDataTable cln = ((data_field_listsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new data_field_listsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlist_id = base.Columns["list_id"];
                this.columnlist_value = base.Columns["list_value"];
                this.columnlist_text = base.Columns["list_text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlist_id = new global::System.Data.DataColumn("list_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlist_id);
                this.columnlist_value = new global::System.Data.DataColumn("list_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlist_value);
                this.columnlist_text = new global::System.Data.DataColumn("list_text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlist_text);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnlist_id,
                                this.columnlist_value}, true));
                this.columnlist_id.AllowDBNull = false;
                this.columnlist_value.AllowDBNull = false;
                this.columnlist_text.AllowDBNull = false;
                this.columnlist_text.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsRow Newdata_field_listsRow() {
                return ((data_field_listsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new data_field_listsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(data_field_listsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.data_field_listsRowChanged != null)) {
                    this.data_field_listsRowChanged(this, new data_field_listsRowChangeEvent(((data_field_listsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.data_field_listsRowChanging != null)) {
                    this.data_field_listsRowChanging(this, new data_field_listsRowChangeEvent(((data_field_listsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.data_field_listsRowDeleted != null)) {
                    this.data_field_listsRowDeleted(this, new data_field_listsRowChangeEvent(((data_field_listsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.data_field_listsRowDeleting != null)) {
                    this.data_field_listsRowDeleting(this, new data_field_listsRowChangeEvent(((data_field_listsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removedata_field_listsRow(data_field_listsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "data_field_listsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class data_field_lists_headerDataTable : global::System.Data.TypedTableBase<data_field_lists_headerRow> {
            
            private global::System.Data.DataColumn columnlist_id;
            
            private global::System.Data.DataColumn columnlist_description;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerDataTable() {
                this.TableName = "data_field_lists_header";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal data_field_lists_headerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected data_field_lists_headerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn list_idColumn {
                get {
                    return this.columnlist_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn list_descriptionColumn {
                get {
                    return this.columnlist_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerRow this[int index] {
                get {
                    return ((data_field_lists_headerRow)(this.Rows[index]));
                }
            }
            
            public event data_field_lists_headerRowChangeEventHandler data_field_lists_headerRowChanging;
            
            public event data_field_lists_headerRowChangeEventHandler data_field_lists_headerRowChanged;
            
            public event data_field_lists_headerRowChangeEventHandler data_field_lists_headerRowDeleting;
            
            public event data_field_lists_headerRowChangeEventHandler data_field_lists_headerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adddata_field_lists_headerRow(data_field_lists_headerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerRow Adddata_field_lists_headerRow(int list_id, string list_description) {
                data_field_lists_headerRow rowdata_field_lists_headerRow = ((data_field_lists_headerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        list_id,
                        list_description};
                rowdata_field_lists_headerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdata_field_lists_headerRow);
                return rowdata_field_lists_headerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerRow FindBylist_id(int list_id) {
                return ((data_field_lists_headerRow)(this.Rows.Find(new object[] {
                            list_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                data_field_lists_headerDataTable cln = ((data_field_lists_headerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new data_field_lists_headerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlist_id = base.Columns["list_id"];
                this.columnlist_description = base.Columns["list_description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlist_id = new global::System.Data.DataColumn("list_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlist_id);
                this.columnlist_description = new global::System.Data.DataColumn("list_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlist_description);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnlist_id}, true));
                this.columnlist_id.AllowDBNull = false;
                this.columnlist_id.Unique = true;
                this.columnlist_description.AllowDBNull = false;
                this.columnlist_description.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerRow Newdata_field_lists_headerRow() {
                return ((data_field_lists_headerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new data_field_lists_headerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(data_field_lists_headerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.data_field_lists_headerRowChanged != null)) {
                    this.data_field_lists_headerRowChanged(this, new data_field_lists_headerRowChangeEvent(((data_field_lists_headerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.data_field_lists_headerRowChanging != null)) {
                    this.data_field_lists_headerRowChanging(this, new data_field_lists_headerRowChangeEvent(((data_field_lists_headerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.data_field_lists_headerRowDeleted != null)) {
                    this.data_field_lists_headerRowDeleted(this, new data_field_lists_headerRowChangeEvent(((data_field_lists_headerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.data_field_lists_headerRowDeleting != null)) {
                    this.data_field_lists_headerRowDeleting(this, new data_field_lists_headerRowChangeEvent(((data_field_lists_headerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removedata_field_lists_headerRow(data_field_lists_headerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "data_field_lists_headerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class data_fieldsDataTable : global::System.Data.TypedTableBase<data_fieldsRow> {
            
            private global::System.Data.DataColumn columndata_field_id;
            
            private global::System.Data.DataColumn columndata_field_name;
            
            private global::System.Data.DataColumn columntype_is_bool;
            
            private global::System.Data.DataColumn columntype_is_numeric;
            
            private global::System.Data.DataColumn columntype_is_raw_hex;
            
            private global::System.Data.DataColumn columntype_is_list;
            
            private global::System.Data.DataColumn columntype_is_table;
            
            private global::System.Data.DataColumn columnlist_id;
            
            private global::System.Data.DataColumn columntable_name;
            
            private global::System.Data.DataColumn columnnumber_of_bits;
            
            private global::System.Data.DataColumn columnvariable_length;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsDataTable() {
                this.TableName = "data_fields";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal data_fieldsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected data_fieldsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_idColumn {
                get {
                    return this.columndata_field_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_nameColumn {
                get {
                    return this.columndata_field_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_is_boolColumn {
                get {
                    return this.columntype_is_bool;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_is_numericColumn {
                get {
                    return this.columntype_is_numeric;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_is_raw_hexColumn {
                get {
                    return this.columntype_is_raw_hex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_is_listColumn {
                get {
                    return this.columntype_is_list;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_is_tableColumn {
                get {
                    return this.columntype_is_table;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn list_idColumn {
                get {
                    return this.columnlist_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_nameColumn {
                get {
                    return this.columntable_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn number_of_bitsColumn {
                get {
                    return this.columnnumber_of_bits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn variable_lengthColumn {
                get {
                    return this.columnvariable_length;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow this[int index] {
                get {
                    return ((data_fieldsRow)(this.Rows[index]));
                }
            }
            
            public event data_fieldsRowChangeEventHandler data_fieldsRowChanging;
            
            public event data_fieldsRowChangeEventHandler data_fieldsRowChanged;
            
            public event data_fieldsRowChangeEventHandler data_fieldsRowDeleting;
            
            public event data_fieldsRowChangeEventHandler data_fieldsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adddata_fieldsRow(data_fieldsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow Adddata_fieldsRow(int data_field_id, string data_field_name, bool type_is_bool, bool type_is_numeric, bool type_is_raw_hex, bool type_is_list, bool type_is_table, int list_id, string table_name, int number_of_bits, bool variable_length) {
                data_fieldsRow rowdata_fieldsRow = ((data_fieldsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        data_field_id,
                        data_field_name,
                        type_is_bool,
                        type_is_numeric,
                        type_is_raw_hex,
                        type_is_list,
                        type_is_table,
                        list_id,
                        table_name,
                        number_of_bits,
                        variable_length};
                rowdata_fieldsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdata_fieldsRow);
                return rowdata_fieldsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow FindBydata_field_id(int data_field_id) {
                return ((data_fieldsRow)(this.Rows.Find(new object[] {
                            data_field_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                data_fieldsDataTable cln = ((data_fieldsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new data_fieldsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndata_field_id = base.Columns["data_field_id"];
                this.columndata_field_name = base.Columns["data_field_name"];
                this.columntype_is_bool = base.Columns["type_is_bool"];
                this.columntype_is_numeric = base.Columns["type_is_numeric"];
                this.columntype_is_raw_hex = base.Columns["type_is_raw_hex"];
                this.columntype_is_list = base.Columns["type_is_list"];
                this.columntype_is_table = base.Columns["type_is_table"];
                this.columnlist_id = base.Columns["list_id"];
                this.columntable_name = base.Columns["table_name"];
                this.columnnumber_of_bits = base.Columns["number_of_bits"];
                this.columnvariable_length = base.Columns["variable_length"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndata_field_id = new global::System.Data.DataColumn("data_field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_id);
                this.columndata_field_name = new global::System.Data.DataColumn("data_field_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_name);
                this.columntype_is_bool = new global::System.Data.DataColumn("type_is_bool", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_is_bool);
                this.columntype_is_numeric = new global::System.Data.DataColumn("type_is_numeric", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_is_numeric);
                this.columntype_is_raw_hex = new global::System.Data.DataColumn("type_is_raw_hex", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_is_raw_hex);
                this.columntype_is_list = new global::System.Data.DataColumn("type_is_list", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_is_list);
                this.columntype_is_table = new global::System.Data.DataColumn("type_is_table", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_is_table);
                this.columnlist_id = new global::System.Data.DataColumn("list_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlist_id);
                this.columntable_name = new global::System.Data.DataColumn("table_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_name);
                this.columnnumber_of_bits = new global::System.Data.DataColumn("number_of_bits", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumber_of_bits);
                this.columnvariable_length = new global::System.Data.DataColumn("variable_length", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvariable_length);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndata_field_id}, true));
                this.columndata_field_id.AllowDBNull = false;
                this.columndata_field_id.Unique = true;
                this.columndata_field_name.AllowDBNull = false;
                this.columndata_field_name.MaxLength = 50;
                this.columntype_is_bool.AllowDBNull = false;
                this.columntype_is_numeric.AllowDBNull = false;
                this.columntype_is_raw_hex.AllowDBNull = false;
                this.columntype_is_list.AllowDBNull = false;
                this.columntype_is_table.AllowDBNull = false;
                this.columntable_name.MaxLength = 50;
                this.columnnumber_of_bits.AllowDBNull = false;
                this.columnvariable_length.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow Newdata_fieldsRow() {
                return ((data_fieldsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new data_fieldsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(data_fieldsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.data_fieldsRowChanged != null)) {
                    this.data_fieldsRowChanged(this, new data_fieldsRowChangeEvent(((data_fieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.data_fieldsRowChanging != null)) {
                    this.data_fieldsRowChanging(this, new data_fieldsRowChangeEvent(((data_fieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.data_fieldsRowDeleted != null)) {
                    this.data_fieldsRowDeleted(this, new data_fieldsRowChangeEvent(((data_fieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.data_fieldsRowDeleting != null)) {
                    this.data_fieldsRowDeleting(this, new data_fieldsRowChangeEvent(((data_fieldsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removedata_fieldsRow(data_fieldsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "data_fieldsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class event_report_structureDataTable : global::System.Data.TypedTableBase<event_report_structureRow> {
            
            private global::System.Data.DataColumn columnrid;
            
            private global::System.Data.DataColumn columndata_field_id;
            
            private global::System.Data.DataColumn columnposition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureDataTable() {
                this.TableName = "event_report_structure";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal event_report_structureDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected event_report_structureDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ridColumn {
                get {
                    return this.columnrid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_idColumn {
                get {
                    return this.columndata_field_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionColumn {
                get {
                    return this.columnposition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRow this[int index] {
                get {
                    return ((event_report_structureRow)(this.Rows[index]));
                }
            }
            
            public event event_report_structureRowChangeEventHandler event_report_structureRowChanging;
            
            public event event_report_structureRowChangeEventHandler event_report_structureRowChanged;
            
            public event event_report_structureRowChangeEventHandler event_report_structureRowDeleting;
            
            public event event_report_structureRowChangeEventHandler event_report_structureRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addevent_report_structureRow(event_report_structureRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRow Addevent_report_structureRow(ridsRow parentridsRowByFK_event_report_structure_rids, data_fieldsRow parentdata_fieldsRowByFK_event_report_structure_data_fields, int position) {
                event_report_structureRow rowevent_report_structureRow = ((event_report_structureRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        position};
                if ((parentridsRowByFK_event_report_structure_rids != null)) {
                    columnValuesArray[0] = parentridsRowByFK_event_report_structure_rids[0];
                }
                if ((parentdata_fieldsRowByFK_event_report_structure_data_fields != null)) {
                    columnValuesArray[1] = parentdata_fieldsRowByFK_event_report_structure_data_fields[0];
                }
                rowevent_report_structureRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowevent_report_structureRow);
                return rowevent_report_structureRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRow FindByriddata_field_idposition(int rid, int data_field_id, int position) {
                return ((event_report_structureRow)(this.Rows.Find(new object[] {
                            rid,
                            data_field_id,
                            position})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                event_report_structureDataTable cln = ((event_report_structureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new event_report_structureDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrid = base.Columns["rid"];
                this.columndata_field_id = base.Columns["data_field_id"];
                this.columnposition = base.Columns["position"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrid = new global::System.Data.DataColumn("rid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrid);
                this.columndata_field_id = new global::System.Data.DataColumn("data_field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_id);
                this.columnposition = new global::System.Data.DataColumn("position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposition);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrid,
                                this.columndata_field_id,
                                this.columnposition}, true));
                this.columnrid.AllowDBNull = false;
                this.columndata_field_id.AllowDBNull = false;
                this.columnposition.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRow Newevent_report_structureRow() {
                return ((event_report_structureRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new event_report_structureRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(event_report_structureRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.event_report_structureRowChanged != null)) {
                    this.event_report_structureRowChanged(this, new event_report_structureRowChangeEvent(((event_report_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.event_report_structureRowChanging != null)) {
                    this.event_report_structureRowChanging(this, new event_report_structureRowChangeEvent(((event_report_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.event_report_structureRowDeleted != null)) {
                    this.event_report_structureRowDeleted(this, new event_report_structureRowChangeEvent(((event_report_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.event_report_structureRowDeleting != null)) {
                    this.event_report_structureRowDeleting(this, new event_report_structureRowChangeEvent(((event_report_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeevent_report_structureRow(event_report_structureRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "event_report_structureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class memory_idsDataTable : global::System.Data.TypedTableBase<memory_idsRow> {
            
            private global::System.Data.DataColumn columnmemory_id;
            
            private global::System.Data.DataColumn columnmemory_unit_description;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memory_idsDataTable() {
                this.TableName = "memory_ids";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal memory_idsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected memory_idsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memory_idColumn {
                get {
                    return this.columnmemory_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memory_unit_descriptionColumn {
                get {
                    return this.columnmemory_unit_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memory_idsRow this[int index] {
                get {
                    return ((memory_idsRow)(this.Rows[index]));
                }
            }
            
            public event memory_idsRowChangeEventHandler memory_idsRowChanging;
            
            public event memory_idsRowChangeEventHandler memory_idsRowChanged;
            
            public event memory_idsRowChangeEventHandler memory_idsRowDeleting;
            
            public event memory_idsRowChangeEventHandler memory_idsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmemory_idsRow(memory_idsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memory_idsRow Addmemory_idsRow(int memory_id, string memory_unit_description) {
                memory_idsRow rowmemory_idsRow = ((memory_idsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        memory_id,
                        memory_unit_description};
                rowmemory_idsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmemory_idsRow);
                return rowmemory_idsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memory_idsRow FindBymemory_id(int memory_id) {
                return ((memory_idsRow)(this.Rows.Find(new object[] {
                            memory_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                memory_idsDataTable cln = ((memory_idsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new memory_idsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmemory_id = base.Columns["memory_id"];
                this.columnmemory_unit_description = base.Columns["memory_unit_description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmemory_id = new global::System.Data.DataColumn("memory_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmemory_id);
                this.columnmemory_unit_description = new global::System.Data.DataColumn("memory_unit_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmemory_unit_description);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmemory_id}, true));
                this.columnmemory_id.AllowDBNull = false;
                this.columnmemory_id.Unique = true;
                this.columnmemory_unit_description.AllowDBNull = false;
                this.columnmemory_unit_description.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memory_idsRow Newmemory_idsRow() {
                return ((memory_idsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new memory_idsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(memory_idsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.memory_idsRowChanged != null)) {
                    this.memory_idsRowChanged(this, new memory_idsRowChangeEvent(((memory_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.memory_idsRowChanging != null)) {
                    this.memory_idsRowChanging(this, new memory_idsRowChangeEvent(((memory_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.memory_idsRowDeleted != null)) {
                    this.memory_idsRowDeleted(this, new memory_idsRowChangeEvent(((memory_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.memory_idsRowDeleting != null)) {
                    this.memory_idsRowDeleting(this, new memory_idsRowChangeEvent(((memory_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removememory_idsRow(memory_idsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "memory_idsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class mission_constantsDataTable : global::System.Data.TypedTableBase<mission_constantsRow> {
            
            private global::System.Data.DataColumn columnmission_constant;
            
            private global::System.Data.DataColumn columnconstant_description;
            
            private global::System.Data.DataColumn columndefined_in;
            
            private global::System.Data.DataColumn columnconstant_value;
            
            private global::System.Data.DataColumn columnis_flight_sw_constant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mission_constantsDataTable() {
                this.TableName = "mission_constants";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mission_constantsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected mission_constantsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mission_constantColumn {
                get {
                    return this.columnmission_constant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constant_descriptionColumn {
                get {
                    return this.columnconstant_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn defined_inColumn {
                get {
                    return this.columndefined_in;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn constant_valueColumn {
                get {
                    return this.columnconstant_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn is_flight_sw_constantColumn {
                get {
                    return this.columnis_flight_sw_constant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mission_constantsRow this[int index] {
                get {
                    return ((mission_constantsRow)(this.Rows[index]));
                }
            }
            
            public event mission_constantsRowChangeEventHandler mission_constantsRowChanging;
            
            public event mission_constantsRowChangeEventHandler mission_constantsRowChanged;
            
            public event mission_constantsRowChangeEventHandler mission_constantsRowDeleting;
            
            public event mission_constantsRowChangeEventHandler mission_constantsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmission_constantsRow(mission_constantsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mission_constantsRow Addmission_constantsRow(string mission_constant, string constant_description, string defined_in, string constant_value, bool is_flight_sw_constant) {
                mission_constantsRow rowmission_constantsRow = ((mission_constantsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        mission_constant,
                        constant_description,
                        defined_in,
                        constant_value,
                        is_flight_sw_constant};
                rowmission_constantsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmission_constantsRow);
                return rowmission_constantsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mission_constantsRow FindBymission_constant(string mission_constant) {
                return ((mission_constantsRow)(this.Rows.Find(new object[] {
                            mission_constant})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                mission_constantsDataTable cln = ((mission_constantsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new mission_constantsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmission_constant = base.Columns["mission_constant"];
                this.columnconstant_description = base.Columns["constant_description"];
                this.columndefined_in = base.Columns["defined_in"];
                this.columnconstant_value = base.Columns["constant_value"];
                this.columnis_flight_sw_constant = base.Columns["is_flight_sw_constant"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmission_constant = new global::System.Data.DataColumn("mission_constant", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmission_constant);
                this.columnconstant_description = new global::System.Data.DataColumn("constant_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstant_description);
                this.columndefined_in = new global::System.Data.DataColumn("defined_in", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefined_in);
                this.columnconstant_value = new global::System.Data.DataColumn("constant_value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstant_value);
                this.columnis_flight_sw_constant = new global::System.Data.DataColumn("is_flight_sw_constant", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_flight_sw_constant);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmission_constant}, true));
                this.columnmission_constant.AllowDBNull = false;
                this.columnmission_constant.Unique = true;
                this.columnmission_constant.MaxLength = 100;
                this.columnconstant_description.AllowDBNull = false;
                this.columnconstant_description.MaxLength = 1000;
                this.columndefined_in.AllowDBNull = false;
                this.columndefined_in.MaxLength = 100;
                this.columnconstant_value.AllowDBNull = false;
                this.columnconstant_value.MaxLength = 50;
                this.columnis_flight_sw_constant.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mission_constantsRow Newmission_constantsRow() {
                return ((mission_constantsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new mission_constantsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(mission_constantsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mission_constantsRowChanged != null)) {
                    this.mission_constantsRowChanged(this, new mission_constantsRowChangeEvent(((mission_constantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mission_constantsRowChanging != null)) {
                    this.mission_constantsRowChanging(this, new mission_constantsRowChangeEvent(((mission_constantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mission_constantsRowDeleted != null)) {
                    this.mission_constantsRowDeleted(this, new mission_constantsRowChangeEvent(((mission_constantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mission_constantsRowDeleting != null)) {
                    this.mission_constantsRowDeleting(this, new mission_constantsRowChangeEvent(((mission_constantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemission_constantsRow(mission_constantsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "mission_constantsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class output_line_idsDataTable : global::System.Data.TypedTableBase<output_line_idsRow> {
            
            private global::System.Data.DataColumn columnoutput_line_id;
            
            private global::System.Data.DataColumn columnoutput_line_description;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public output_line_idsDataTable() {
                this.TableName = "output_line_ids";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal output_line_idsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected output_line_idsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn output_line_idColumn {
                get {
                    return this.columnoutput_line_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn output_line_descriptionColumn {
                get {
                    return this.columnoutput_line_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public output_line_idsRow this[int index] {
                get {
                    return ((output_line_idsRow)(this.Rows[index]));
                }
            }
            
            public event output_line_idsRowChangeEventHandler output_line_idsRowChanging;
            
            public event output_line_idsRowChangeEventHandler output_line_idsRowChanged;
            
            public event output_line_idsRowChangeEventHandler output_line_idsRowDeleting;
            
            public event output_line_idsRowChangeEventHandler output_line_idsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addoutput_line_idsRow(output_line_idsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public output_line_idsRow Addoutput_line_idsRow(int output_line_id, string output_line_description) {
                output_line_idsRow rowoutput_line_idsRow = ((output_line_idsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        output_line_id,
                        output_line_description};
                rowoutput_line_idsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowoutput_line_idsRow);
                return rowoutput_line_idsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public output_line_idsRow FindByoutput_line_id(int output_line_id) {
                return ((output_line_idsRow)(this.Rows.Find(new object[] {
                            output_line_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                output_line_idsDataTable cln = ((output_line_idsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new output_line_idsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnoutput_line_id = base.Columns["output_line_id"];
                this.columnoutput_line_description = base.Columns["output_line_description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnoutput_line_id = new global::System.Data.DataColumn("output_line_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoutput_line_id);
                this.columnoutput_line_description = new global::System.Data.DataColumn("output_line_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnoutput_line_description);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnoutput_line_id}, true));
                this.columnoutput_line_id.AllowDBNull = false;
                this.columnoutput_line_id.Unique = true;
                this.columnoutput_line_description.AllowDBNull = false;
                this.columnoutput_line_description.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public output_line_idsRow Newoutput_line_idsRow() {
                return ((output_line_idsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new output_line_idsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(output_line_idsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.output_line_idsRowChanged != null)) {
                    this.output_line_idsRowChanged(this, new output_line_idsRowChangeEvent(((output_line_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.output_line_idsRowChanging != null)) {
                    this.output_line_idsRowChanging(this, new output_line_idsRowChangeEvent(((output_line_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.output_line_idsRowDeleted != null)) {
                    this.output_line_idsRowDeleted(this, new output_line_idsRowChangeEvent(((output_line_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.output_line_idsRowDeleting != null)) {
                    this.output_line_idsRowDeleting(this, new output_line_idsRowChangeEvent(((output_line_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeoutput_line_idsRow(output_line_idsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "output_line_idsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class packet_store_idsDataTable : global::System.Data.TypedTableBase<packet_store_idsRow> {
            
            private global::System.Data.DataColumn columnstore_id;
            
            private global::System.Data.DataColumn columnpacket_store_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packet_store_idsDataTable() {
                this.TableName = "packet_store_ids";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packet_store_idsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected packet_store_idsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn store_idColumn {
                get {
                    return this.columnstore_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn packet_store_nameColumn {
                get {
                    return this.columnpacket_store_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packet_store_idsRow this[int index] {
                get {
                    return ((packet_store_idsRow)(this.Rows[index]));
                }
            }
            
            public event packet_store_idsRowChangeEventHandler packet_store_idsRowChanging;
            
            public event packet_store_idsRowChangeEventHandler packet_store_idsRowChanged;
            
            public event packet_store_idsRowChangeEventHandler packet_store_idsRowDeleting;
            
            public event packet_store_idsRowChangeEventHandler packet_store_idsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpacket_store_idsRow(packet_store_idsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packet_store_idsRow Addpacket_store_idsRow(int store_id, string packet_store_name) {
                packet_store_idsRow rowpacket_store_idsRow = ((packet_store_idsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        store_id,
                        packet_store_name};
                rowpacket_store_idsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpacket_store_idsRow);
                return rowpacket_store_idsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packet_store_idsRow FindBystore_id(int store_id) {
                return ((packet_store_idsRow)(this.Rows.Find(new object[] {
                            store_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                packet_store_idsDataTable cln = ((packet_store_idsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new packet_store_idsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstore_id = base.Columns["store_id"];
                this.columnpacket_store_name = base.Columns["packet_store_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstore_id = new global::System.Data.DataColumn("store_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstore_id);
                this.columnpacket_store_name = new global::System.Data.DataColumn("packet_store_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpacket_store_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstore_id}, true));
                this.columnstore_id.AllowDBNull = false;
                this.columnstore_id.Unique = true;
                this.columnpacket_store_name.AllowDBNull = false;
                this.columnpacket_store_name.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packet_store_idsRow Newpacket_store_idsRow() {
                return ((packet_store_idsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new packet_store_idsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(packet_store_idsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.packet_store_idsRowChanged != null)) {
                    this.packet_store_idsRowChanged(this, new packet_store_idsRowChangeEvent(((packet_store_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.packet_store_idsRowChanging != null)) {
                    this.packet_store_idsRowChanging(this, new packet_store_idsRowChangeEvent(((packet_store_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.packet_store_idsRowDeleted != null)) {
                    this.packet_store_idsRowDeleted(this, new packet_store_idsRowChangeEvent(((packet_store_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.packet_store_idsRowDeleting != null)) {
                    this.packet_store_idsRowDeleting(this, new packet_store_idsRowChangeEvent(((packet_store_idsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepacket_store_idsRow(packet_store_idsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "packet_store_idsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class packets_logDataTable : global::System.Data.TypedTableBase<packets_logRow> {
            
            private global::System.Data.DataColumn columnsession_id;
            
            private global::System.Data.DataColumn columnunique_log_id;
            
            private global::System.Data.DataColumn columnlog_time;
            
            private global::System.Data.DataColumn columnapid;
            
            private global::System.Data.DataColumn columnssc;
            
            private global::System.Data.DataColumn columnservice_type;
            
            private global::System.Data.DataColumn columnservice_subtype;
            
            private global::System.Data.DataColumn columntime_tag;
            
            private global::System.Data.DataColumn columnis_request;
            
            private global::System.Data.DataColumn columnn_value;
            
            private global::System.Data.DataColumn columncrc_error;
            
            private global::System.Data.DataColumn columnraw_packet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logDataTable() {
                this.TableName = "packets_log";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packets_logDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected packets_logDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn session_idColumn {
                get {
                    return this.columnsession_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unique_log_idColumn {
                get {
                    return this.columnunique_log_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn log_timeColumn {
                get {
                    return this.columnlog_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apidColumn {
                get {
                    return this.columnapid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sscColumn {
                get {
                    return this.columnssc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_typeColumn {
                get {
                    return this.columnservice_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_subtypeColumn {
                get {
                    return this.columnservice_subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_tagColumn {
                get {
                    return this.columntime_tag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn is_requestColumn {
                get {
                    return this.columnis_request;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn n_valueColumn {
                get {
                    return this.columnn_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn crc_errorColumn {
                get {
                    return this.columncrc_error;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_packetColumn {
                get {
                    return this.columnraw_packet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRow this[int index] {
                get {
                    return ((packets_logRow)(this.Rows[index]));
                }
            }
            
            public event packets_logRowChangeEventHandler packets_logRowChanging;
            
            public event packets_logRowChangeEventHandler packets_logRowChanged;
            
            public event packets_logRowChangeEventHandler packets_logRowDeleting;
            
            public event packets_logRowChangeEventHandler packets_logRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpackets_logRow(packets_logRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRow Addpackets_logRow(sessionsRow parentsessionsRowByFK_packets_log_sessions, int unique_log_id, System.DateTime log_time, int apid, int ssc, int service_type, int service_subtype, byte[] time_tag, bool is_request, int n_value, bool crc_error, byte[] raw_packet) {
                packets_logRow rowpackets_logRow = ((packets_logRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        unique_log_id,
                        log_time,
                        apid,
                        ssc,
                        service_type,
                        service_subtype,
                        time_tag,
                        is_request,
                        n_value,
                        crc_error,
                        raw_packet};
                if ((parentsessionsRowByFK_packets_log_sessions != null)) {
                    columnValuesArray[0] = parentsessionsRowByFK_packets_log_sessions[0];
                }
                rowpackets_logRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpackets_logRow);
                return rowpackets_logRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRow FindBysession_idunique_log_id(int session_id, int unique_log_id) {
                return ((packets_logRow)(this.Rows.Find(new object[] {
                            session_id,
                            unique_log_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                packets_logDataTable cln = ((packets_logDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new packets_logDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsession_id = base.Columns["session_id"];
                this.columnunique_log_id = base.Columns["unique_log_id"];
                this.columnlog_time = base.Columns["log_time"];
                this.columnapid = base.Columns["apid"];
                this.columnssc = base.Columns["ssc"];
                this.columnservice_type = base.Columns["service_type"];
                this.columnservice_subtype = base.Columns["service_subtype"];
                this.columntime_tag = base.Columns["time_tag"];
                this.columnis_request = base.Columns["is_request"];
                this.columnn_value = base.Columns["n_value"];
                this.columncrc_error = base.Columns["crc_error"];
                this.columnraw_packet = base.Columns["raw_packet"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsession_id = new global::System.Data.DataColumn("session_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsession_id);
                this.columnunique_log_id = new global::System.Data.DataColumn("unique_log_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunique_log_id);
                this.columnlog_time = new global::System.Data.DataColumn("log_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlog_time);
                this.columnapid = new global::System.Data.DataColumn("apid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapid);
                this.columnssc = new global::System.Data.DataColumn("ssc", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnssc);
                this.columnservice_type = new global::System.Data.DataColumn("service_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_type);
                this.columnservice_subtype = new global::System.Data.DataColumn("service_subtype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_subtype);
                this.columntime_tag = new global::System.Data.DataColumn("time_tag", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_tag);
                this.columnis_request = new global::System.Data.DataColumn("is_request", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_request);
                this.columnn_value = new global::System.Data.DataColumn("n_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnn_value);
                this.columncrc_error = new global::System.Data.DataColumn("crc_error", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncrc_error);
                this.columnraw_packet = new global::System.Data.DataColumn("raw_packet", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_packet);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsession_id,
                                this.columnunique_log_id}, true));
                this.columnsession_id.AllowDBNull = false;
                this.columnunique_log_id.AllowDBNull = false;
                this.columnlog_time.AllowDBNull = false;
                this.columnapid.AllowDBNull = false;
                this.columnssc.AllowDBNull = false;
                this.columnservice_type.AllowDBNull = false;
                this.columnservice_subtype.AllowDBNull = false;
                this.columnis_request.AllowDBNull = false;
                this.columnn_value.AllowDBNull = false;
                this.columncrc_error.AllowDBNull = false;
                this.columnraw_packet.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRow Newpackets_logRow() {
                return ((packets_logRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new packets_logRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(packets_logRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.packets_logRowChanged != null)) {
                    this.packets_logRowChanged(this, new packets_logRowChangeEvent(((packets_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.packets_logRowChanging != null)) {
                    this.packets_logRowChanging(this, new packets_logRowChangeEvent(((packets_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.packets_logRowDeleted != null)) {
                    this.packets_logRowDeleted(this, new packets_logRowChangeEvent(((packets_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.packets_logRowDeleting != null)) {
                    this.packets_logRowDeleting(this, new packets_logRowChangeEvent(((packets_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepackets_logRow(packets_logRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "packets_logDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class packets_log_data_fieldDataTable : global::System.Data.TypedTableBase<packets_log_data_fieldRow> {
            
            private global::System.Data.DataColumn columnsession_id;
            
            private global::System.Data.DataColumn columnunique_log_id;
            
            private global::System.Data.DataColumn columndata_field_id;
            
            private global::System.Data.DataColumn columnparameter_id;
            
            private global::System.Data.DataColumn columnposition;
            
            private global::System.Data.DataColumn columnnth_element;
            
            private global::System.Data.DataColumn columnis_data_field;
            
            private global::System.Data.DataColumn columndata_field_value;
            
            private global::System.Data.DataColumn columnlong_data_field_value;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldDataTable() {
                this.TableName = "packets_log_data_field";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packets_log_data_fieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected packets_log_data_fieldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn session_idColumn {
                get {
                    return this.columnsession_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unique_log_idColumn {
                get {
                    return this.columnunique_log_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_idColumn {
                get {
                    return this.columndata_field_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parameter_idColumn {
                get {
                    return this.columnparameter_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionColumn {
                get {
                    return this.columnposition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nth_elementColumn {
                get {
                    return this.columnnth_element;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn is_data_fieldColumn {
                get {
                    return this.columnis_data_field;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_valueColumn {
                get {
                    return this.columndata_field_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn long_data_field_valueColumn {
                get {
                    return this.columnlong_data_field_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRow this[int index] {
                get {
                    return ((packets_log_data_fieldRow)(this.Rows[index]));
                }
            }
            
            public event packets_log_data_fieldRowChangeEventHandler packets_log_data_fieldRowChanging;
            
            public event packets_log_data_fieldRowChangeEventHandler packets_log_data_fieldRowChanged;
            
            public event packets_log_data_fieldRowChangeEventHandler packets_log_data_fieldRowDeleting;
            
            public event packets_log_data_fieldRowChangeEventHandler packets_log_data_fieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpackets_log_data_fieldRow(packets_log_data_fieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRow Addpackets_log_data_fieldRow(int session_id, int unique_log_id, data_fieldsRow parentdata_fieldsRowByFK_packets_log_data_field_data_fields, int parameter_id, int position, int nth_element, bool is_data_field, long data_field_value, byte[] long_data_field_value) {
                packets_log_data_fieldRow rowpackets_log_data_fieldRow = ((packets_log_data_fieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        session_id,
                        unique_log_id,
                        null,
                        parameter_id,
                        position,
                        nth_element,
                        is_data_field,
                        data_field_value,
                        long_data_field_value};
                if ((parentdata_fieldsRowByFK_packets_log_data_field_data_fields != null)) {
                    columnValuesArray[2] = parentdata_fieldsRowByFK_packets_log_data_field_data_fields[0];
                }
                rowpackets_log_data_fieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpackets_log_data_fieldRow);
                return rowpackets_log_data_fieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRow FindBysession_idunique_log_iddata_field_idparameter_idpositionnth_element(int session_id, int unique_log_id, int data_field_id, int parameter_id, int position, int nth_element) {
                return ((packets_log_data_fieldRow)(this.Rows.Find(new object[] {
                            session_id,
                            unique_log_id,
                            data_field_id,
                            parameter_id,
                            position,
                            nth_element})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                packets_log_data_fieldDataTable cln = ((packets_log_data_fieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new packets_log_data_fieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsession_id = base.Columns["session_id"];
                this.columnunique_log_id = base.Columns["unique_log_id"];
                this.columndata_field_id = base.Columns["data_field_id"];
                this.columnparameter_id = base.Columns["parameter_id"];
                this.columnposition = base.Columns["position"];
                this.columnnth_element = base.Columns["nth_element"];
                this.columnis_data_field = base.Columns["is_data_field"];
                this.columndata_field_value = base.Columns["data_field_value"];
                this.columnlong_data_field_value = base.Columns["long_data_field_value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsession_id = new global::System.Data.DataColumn("session_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsession_id);
                this.columnunique_log_id = new global::System.Data.DataColumn("unique_log_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunique_log_id);
                this.columndata_field_id = new global::System.Data.DataColumn("data_field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_id);
                this.columnparameter_id = new global::System.Data.DataColumn("parameter_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparameter_id);
                this.columnposition = new global::System.Data.DataColumn("position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposition);
                this.columnnth_element = new global::System.Data.DataColumn("nth_element", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnth_element);
                this.columnis_data_field = new global::System.Data.DataColumn("is_data_field", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_data_field);
                this.columndata_field_value = new global::System.Data.DataColumn("data_field_value", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_value);
                this.columnlong_data_field_value = new global::System.Data.DataColumn("long_data_field_value", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlong_data_field_value);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsession_id,
                                this.columnunique_log_id,
                                this.columndata_field_id,
                                this.columnparameter_id,
                                this.columnposition,
                                this.columnnth_element}, true));
                this.columnsession_id.AllowDBNull = false;
                this.columnunique_log_id.AllowDBNull = false;
                this.columndata_field_id.AllowDBNull = false;
                this.columnparameter_id.AllowDBNull = false;
                this.columnposition.AllowDBNull = false;
                this.columnnth_element.AllowDBNull = false;
                this.columnis_data_field.AllowDBNull = false;
                this.columndata_field_value.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRow Newpackets_log_data_fieldRow() {
                return ((packets_log_data_fieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new packets_log_data_fieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(packets_log_data_fieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.packets_log_data_fieldRowChanged != null)) {
                    this.packets_log_data_fieldRowChanged(this, new packets_log_data_fieldRowChangeEvent(((packets_log_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.packets_log_data_fieldRowChanging != null)) {
                    this.packets_log_data_fieldRowChanging(this, new packets_log_data_fieldRowChangeEvent(((packets_log_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.packets_log_data_fieldRowDeleted != null)) {
                    this.packets_log_data_fieldRowDeleted(this, new packets_log_data_fieldRowChangeEvent(((packets_log_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.packets_log_data_fieldRowDeleting != null)) {
                    this.packets_log_data_fieldRowDeleting(this, new packets_log_data_fieldRowChangeEvent(((packets_log_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepackets_log_data_fieldRow(packets_log_data_fieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "packets_log_data_fieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class parametersDataTable : global::System.Data.TypedTableBase<parametersRow> {
            
            private global::System.Data.DataColumn columnparameter_id;
            
            private global::System.Data.DataColumn columnparameter_description;
            
            private global::System.Data.DataColumn columndata_type;
            
            private global::System.Data.DataColumn columnshow_as_hex;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersDataTable() {
                this.TableName = "parameters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal parametersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected parametersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parameter_idColumn {
                get {
                    return this.columnparameter_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parameter_descriptionColumn {
                get {
                    return this.columnparameter_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_typeColumn {
                get {
                    return this.columndata_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn show_as_hexColumn {
                get {
                    return this.columnshow_as_hex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersRow this[int index] {
                get {
                    return ((parametersRow)(this.Rows[index]));
                }
            }
            
            public event parametersRowChangeEventHandler parametersRowChanging;
            
            public event parametersRowChangeEventHandler parametersRowChanged;
            
            public event parametersRowChangeEventHandler parametersRowDeleting;
            
            public event parametersRowChangeEventHandler parametersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddparametersRow(parametersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersRow AddparametersRow(int parameter_id, string parameter_description, string data_type, bool show_as_hex) {
                parametersRow rowparametersRow = ((parametersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        parameter_id,
                        parameter_description,
                        data_type,
                        show_as_hex};
                rowparametersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowparametersRow);
                return rowparametersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersRow FindByparameter_id(int parameter_id) {
                return ((parametersRow)(this.Rows.Find(new object[] {
                            parameter_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                parametersDataTable cln = ((parametersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new parametersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnparameter_id = base.Columns["parameter_id"];
                this.columnparameter_description = base.Columns["parameter_description"];
                this.columndata_type = base.Columns["data_type"];
                this.columnshow_as_hex = base.Columns["show_as_hex"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnparameter_id = new global::System.Data.DataColumn("parameter_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparameter_id);
                this.columnparameter_description = new global::System.Data.DataColumn("parameter_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparameter_description);
                this.columndata_type = new global::System.Data.DataColumn("data_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_type);
                this.columnshow_as_hex = new global::System.Data.DataColumn("show_as_hex", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshow_as_hex);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnparameter_id}, true));
                this.columnparameter_id.AllowDBNull = false;
                this.columnparameter_id.Unique = true;
                this.columnparameter_description.MaxLength = 100;
                this.columndata_type.AllowDBNull = false;
                this.columndata_type.MaxLength = 50;
                this.columnshow_as_hex.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersRow NewparametersRow() {
                return ((parametersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new parametersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(parametersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.parametersRowChanged != null)) {
                    this.parametersRowChanged(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.parametersRowChanging != null)) {
                    this.parametersRowChanging(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.parametersRowDeleted != null)) {
                    this.parametersRowDeleted(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.parametersRowDeleting != null)) {
                    this.parametersRowDeleting(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveparametersRow(parametersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "parametersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class report_definition_structureDataTable : global::System.Data.TypedTableBase<report_definition_structureRow> {
            
            private global::System.Data.DataColumn columnstructure_id;
            
            private global::System.Data.DataColumn columnparameter_id;
            
            private global::System.Data.DataColumn columnposition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureDataTable() {
                this.TableName = "report_definition_structure";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_definition_structureDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected report_definition_structureDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn structure_idColumn {
                get {
                    return this.columnstructure_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parameter_idColumn {
                get {
                    return this.columnparameter_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionColumn {
                get {
                    return this.columnposition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRow this[int index] {
                get {
                    return ((report_definition_structureRow)(this.Rows[index]));
                }
            }
            
            public event report_definition_structureRowChangeEventHandler report_definition_structureRowChanging;
            
            public event report_definition_structureRowChangeEventHandler report_definition_structureRowChanged;
            
            public event report_definition_structureRowChangeEventHandler report_definition_structureRowDeleting;
            
            public event report_definition_structureRowChangeEventHandler report_definition_structureRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addreport_definition_structureRow(report_definition_structureRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRow Addreport_definition_structureRow(report_definitionsRow parentreport_definitionsRowByFK_report_definition_structure_report_definitions, parametersRow parentparametersRowByFK_report_definition_structure_parameters, int position) {
                report_definition_structureRow rowreport_definition_structureRow = ((report_definition_structureRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        position};
                if ((parentreport_definitionsRowByFK_report_definition_structure_report_definitions != null)) {
                    columnValuesArray[0] = parentreport_definitionsRowByFK_report_definition_structure_report_definitions[0];
                }
                if ((parentparametersRowByFK_report_definition_structure_parameters != null)) {
                    columnValuesArray[1] = parentparametersRowByFK_report_definition_structure_parameters[0];
                }
                rowreport_definition_structureRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreport_definition_structureRow);
                return rowreport_definition_structureRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRow FindBystructure_idparameter_idposition(int structure_id, int parameter_id, int position) {
                return ((report_definition_structureRow)(this.Rows.Find(new object[] {
                            structure_id,
                            parameter_id,
                            position})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                report_definition_structureDataTable cln = ((report_definition_structureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new report_definition_structureDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstructure_id = base.Columns["structure_id"];
                this.columnparameter_id = base.Columns["parameter_id"];
                this.columnposition = base.Columns["position"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstructure_id = new global::System.Data.DataColumn("structure_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstructure_id);
                this.columnparameter_id = new global::System.Data.DataColumn("parameter_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparameter_id);
                this.columnposition = new global::System.Data.DataColumn("position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposition);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstructure_id,
                                this.columnparameter_id,
                                this.columnposition}, true));
                this.columnstructure_id.AllowDBNull = false;
                this.columnparameter_id.AllowDBNull = false;
                this.columnposition.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRow Newreport_definition_structureRow() {
                return ((report_definition_structureRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new report_definition_structureRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(report_definition_structureRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.report_definition_structureRowChanged != null)) {
                    this.report_definition_structureRowChanged(this, new report_definition_structureRowChangeEvent(((report_definition_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.report_definition_structureRowChanging != null)) {
                    this.report_definition_structureRowChanging(this, new report_definition_structureRowChangeEvent(((report_definition_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.report_definition_structureRowDeleted != null)) {
                    this.report_definition_structureRowDeleted(this, new report_definition_structureRowChangeEvent(((report_definition_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.report_definition_structureRowDeleting != null)) {
                    this.report_definition_structureRowDeleting(this, new report_definition_structureRowChangeEvent(((report_definition_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removereport_definition_structureRow(report_definition_structureRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "report_definition_structureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class report_definitionsDataTable : global::System.Data.TypedTableBase<report_definitionsRow> {
            
            private global::System.Data.DataColumn columnstructure_id;
            
            private global::System.Data.DataColumn columnreport_definition_description;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsDataTable() {
                this.TableName = "report_definitions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_definitionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected report_definitionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn structure_idColumn {
                get {
                    return this.columnstructure_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn report_definition_descriptionColumn {
                get {
                    return this.columnreport_definition_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsRow this[int index] {
                get {
                    return ((report_definitionsRow)(this.Rows[index]));
                }
            }
            
            public event report_definitionsRowChangeEventHandler report_definitionsRowChanging;
            
            public event report_definitionsRowChangeEventHandler report_definitionsRowChanged;
            
            public event report_definitionsRowChangeEventHandler report_definitionsRowDeleting;
            
            public event report_definitionsRowChangeEventHandler report_definitionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addreport_definitionsRow(report_definitionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsRow Addreport_definitionsRow(int structure_id, string report_definition_description) {
                report_definitionsRow rowreport_definitionsRow = ((report_definitionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        structure_id,
                        report_definition_description};
                rowreport_definitionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreport_definitionsRow);
                return rowreport_definitionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsRow FindBystructure_id(int structure_id) {
                return ((report_definitionsRow)(this.Rows.Find(new object[] {
                            structure_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                report_definitionsDataTable cln = ((report_definitionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new report_definitionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstructure_id = base.Columns["structure_id"];
                this.columnreport_definition_description = base.Columns["report_definition_description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstructure_id = new global::System.Data.DataColumn("structure_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstructure_id);
                this.columnreport_definition_description = new global::System.Data.DataColumn("report_definition_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreport_definition_description);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnstructure_id}, true));
                this.columnstructure_id.AllowDBNull = false;
                this.columnstructure_id.Unique = true;
                this.columnreport_definition_description.AllowDBNull = false;
                this.columnreport_definition_description.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsRow Newreport_definitionsRow() {
                return ((report_definitionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new report_definitionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(report_definitionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.report_definitionsRowChanged != null)) {
                    this.report_definitionsRowChanged(this, new report_definitionsRowChangeEvent(((report_definitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.report_definitionsRowChanging != null)) {
                    this.report_definitionsRowChanging(this, new report_definitionsRowChangeEvent(((report_definitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.report_definitionsRowDeleted != null)) {
                    this.report_definitionsRowDeleted(this, new report_definitionsRowChangeEvent(((report_definitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.report_definitionsRowDeleting != null)) {
                    this.report_definitionsRowDeleting(this, new report_definitionsRowChangeEvent(((report_definitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removereport_definitionsRow(report_definitionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "report_definitionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ridsDataTable : global::System.Data.TypedTableBase<ridsRow> {
            
            private global::System.Data.DataColumn columnrid;
            
            private global::System.Data.DataColumn columndescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsDataTable() {
                this.TableName = "rids";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ridsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ridsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ridColumn {
                get {
                    return this.columnrid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsRow this[int index] {
                get {
                    return ((ridsRow)(this.Rows[index]));
                }
            }
            
            public event ridsRowChangeEventHandler ridsRowChanging;
            
            public event ridsRowChangeEventHandler ridsRowChanged;
            
            public event ridsRowChangeEventHandler ridsRowDeleting;
            
            public event ridsRowChangeEventHandler ridsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddridsRow(ridsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsRow AddridsRow(int rid, string description) {
                ridsRow rowridsRow = ((ridsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        rid,
                        description};
                rowridsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowridsRow);
                return rowridsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsRow FindByrid(int rid) {
                return ((ridsRow)(this.Rows.Find(new object[] {
                            rid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ridsDataTable cln = ((ridsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ridsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrid = base.Columns["rid"];
                this.columndescription = base.Columns["description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrid = new global::System.Data.DataColumn("rid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrid);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnrid}, true));
                this.columnrid.AllowDBNull = false;
                this.columnrid.Unique = true;
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsRow NewridsRow() {
                return ((ridsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ridsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ridsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ridsRowChanged != null)) {
                    this.ridsRowChanged(this, new ridsRowChangeEvent(((ridsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ridsRowChanging != null)) {
                    this.ridsRowChanging(this, new ridsRowChangeEvent(((ridsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ridsRowDeleted != null)) {
                    this.ridsRowDeleted(this, new ridsRowChangeEvent(((ridsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ridsRowDeleting != null)) {
                    this.ridsRowDeleting(this, new ridsRowChangeEvent(((ridsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveridsRow(ridsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ridsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class saved_requestsDataTable : global::System.Data.TypedTableBase<saved_requestsRow> {
            
            private global::System.Data.DataColumn columnsaved_request_id;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columnapid;
            
            private global::System.Data.DataColumn columnauto_ssc;
            
            private global::System.Data.DataColumn columnauto_length;
            
            private global::System.Data.DataColumn columnauto_crc;
            
            private global::System.Data.DataColumn columnssc;
            
            private global::System.Data.DataColumn columnservice_type;
            
            private global::System.Data.DataColumn columnservice_subtype;
            
            private global::System.Data.DataColumn columnn_value;
            
            private global::System.Data.DataColumn columncrc_error;
            
            private global::System.Data.DataColumn columnraw_packet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsDataTable() {
                this.TableName = "saved_requests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal saved_requestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected saved_requestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn saved_request_idColumn {
                get {
                    return this.columnsaved_request_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apidColumn {
                get {
                    return this.columnapid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn auto_sscColumn {
                get {
                    return this.columnauto_ssc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn auto_lengthColumn {
                get {
                    return this.columnauto_length;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn auto_crcColumn {
                get {
                    return this.columnauto_crc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sscColumn {
                get {
                    return this.columnssc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_typeColumn {
                get {
                    return this.columnservice_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_subtypeColumn {
                get {
                    return this.columnservice_subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn n_valueColumn {
                get {
                    return this.columnn_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn crc_errorColumn {
                get {
                    return this.columncrc_error;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_packetColumn {
                get {
                    return this.columnraw_packet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRow this[int index] {
                get {
                    return ((saved_requestsRow)(this.Rows[index]));
                }
            }
            
            public event saved_requestsRowChangeEventHandler saved_requestsRowChanging;
            
            public event saved_requestsRowChangeEventHandler saved_requestsRowChanged;
            
            public event saved_requestsRowChangeEventHandler saved_requestsRowDeleting;
            
            public event saved_requestsRowChangeEventHandler saved_requestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsaved_requestsRow(saved_requestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRow Addsaved_requestsRow(int saved_request_id, string description, int apid, bool auto_ssc, bool auto_length, bool auto_crc, int ssc, int service_type, int service_subtype, int n_value, bool crc_error, byte[] raw_packet) {
                saved_requestsRow rowsaved_requestsRow = ((saved_requestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        saved_request_id,
                        description,
                        apid,
                        auto_ssc,
                        auto_length,
                        auto_crc,
                        ssc,
                        service_type,
                        service_subtype,
                        n_value,
                        crc_error,
                        raw_packet};
                rowsaved_requestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsaved_requestsRow);
                return rowsaved_requestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRow FindBysaved_request_id(int saved_request_id) {
                return ((saved_requestsRow)(this.Rows.Find(new object[] {
                            saved_request_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                saved_requestsDataTable cln = ((saved_requestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new saved_requestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsaved_request_id = base.Columns["saved_request_id"];
                this.columndescription = base.Columns["description"];
                this.columnapid = base.Columns["apid"];
                this.columnauto_ssc = base.Columns["auto_ssc"];
                this.columnauto_length = base.Columns["auto_length"];
                this.columnauto_crc = base.Columns["auto_crc"];
                this.columnssc = base.Columns["ssc"];
                this.columnservice_type = base.Columns["service_type"];
                this.columnservice_subtype = base.Columns["service_subtype"];
                this.columnn_value = base.Columns["n_value"];
                this.columncrc_error = base.Columns["crc_error"];
                this.columnraw_packet = base.Columns["raw_packet"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsaved_request_id = new global::System.Data.DataColumn("saved_request_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaved_request_id);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnapid = new global::System.Data.DataColumn("apid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapid);
                this.columnauto_ssc = new global::System.Data.DataColumn("auto_ssc", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnauto_ssc);
                this.columnauto_length = new global::System.Data.DataColumn("auto_length", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnauto_length);
                this.columnauto_crc = new global::System.Data.DataColumn("auto_crc", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnauto_crc);
                this.columnssc = new global::System.Data.DataColumn("ssc", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnssc);
                this.columnservice_type = new global::System.Data.DataColumn("service_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_type);
                this.columnservice_subtype = new global::System.Data.DataColumn("service_subtype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_subtype);
                this.columnn_value = new global::System.Data.DataColumn("n_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnn_value);
                this.columncrc_error = new global::System.Data.DataColumn("crc_error", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncrc_error);
                this.columnraw_packet = new global::System.Data.DataColumn("raw_packet", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_packet);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsaved_request_id}, true));
                this.columnsaved_request_id.AllowDBNull = false;
                this.columnsaved_request_id.Unique = true;
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 255;
                this.columnapid.AllowDBNull = false;
                this.columnssc.AllowDBNull = false;
                this.columnservice_type.AllowDBNull = false;
                this.columnservice_subtype.AllowDBNull = false;
                this.columnn_value.AllowDBNull = false;
                this.columncrc_error.AllowDBNull = false;
                this.columnraw_packet.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRow Newsaved_requestsRow() {
                return ((saved_requestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new saved_requestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(saved_requestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.saved_requestsRowChanged != null)) {
                    this.saved_requestsRowChanged(this, new saved_requestsRowChangeEvent(((saved_requestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.saved_requestsRowChanging != null)) {
                    this.saved_requestsRowChanging(this, new saved_requestsRowChangeEvent(((saved_requestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.saved_requestsRowDeleted != null)) {
                    this.saved_requestsRowDeleted(this, new saved_requestsRowChangeEvent(((saved_requestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.saved_requestsRowDeleting != null)) {
                    this.saved_requestsRowDeleting(this, new saved_requestsRowChangeEvent(((saved_requestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesaved_requestsRow(saved_requestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "saved_requestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class saved_requests_data_fieldDataTable : global::System.Data.TypedTableBase<saved_requests_data_fieldRow> {
            
            private global::System.Data.DataColumn columnsaved_request_id;
            
            private global::System.Data.DataColumn columndata_field_id;
            
            private global::System.Data.DataColumn columnposition;
            
            private global::System.Data.DataColumn columnnth_element;
            
            private global::System.Data.DataColumn columndata_field_value;
            
            private global::System.Data.DataColumn columnlong_data_field_value;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requests_data_fieldDataTable() {
                this.TableName = "saved_requests_data_field";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal saved_requests_data_fieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected saved_requests_data_fieldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn saved_request_idColumn {
                get {
                    return this.columnsaved_request_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_idColumn {
                get {
                    return this.columndata_field_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionColumn {
                get {
                    return this.columnposition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nth_elementColumn {
                get {
                    return this.columnnth_element;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_valueColumn {
                get {
                    return this.columndata_field_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn long_data_field_valueColumn {
                get {
                    return this.columnlong_data_field_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requests_data_fieldRow this[int index] {
                get {
                    return ((saved_requests_data_fieldRow)(this.Rows[index]));
                }
            }
            
            public event saved_requests_data_fieldRowChangeEventHandler saved_requests_data_fieldRowChanging;
            
            public event saved_requests_data_fieldRowChangeEventHandler saved_requests_data_fieldRowChanged;
            
            public event saved_requests_data_fieldRowChangeEventHandler saved_requests_data_fieldRowDeleting;
            
            public event saved_requests_data_fieldRowChangeEventHandler saved_requests_data_fieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsaved_requests_data_fieldRow(saved_requests_data_fieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requests_data_fieldRow Addsaved_requests_data_fieldRow(int saved_request_id, int data_field_id, int position, int nth_element, long data_field_value, byte[] long_data_field_value) {
                saved_requests_data_fieldRow rowsaved_requests_data_fieldRow = ((saved_requests_data_fieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        saved_request_id,
                        data_field_id,
                        position,
                        nth_element,
                        data_field_value,
                        long_data_field_value};
                rowsaved_requests_data_fieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsaved_requests_data_fieldRow);
                return rowsaved_requests_data_fieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requests_data_fieldRow FindBysaved_request_iddata_field_idpositionnth_element(int saved_request_id, int data_field_id, int position, int nth_element) {
                return ((saved_requests_data_fieldRow)(this.Rows.Find(new object[] {
                            saved_request_id,
                            data_field_id,
                            position,
                            nth_element})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                saved_requests_data_fieldDataTable cln = ((saved_requests_data_fieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new saved_requests_data_fieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsaved_request_id = base.Columns["saved_request_id"];
                this.columndata_field_id = base.Columns["data_field_id"];
                this.columnposition = base.Columns["position"];
                this.columnnth_element = base.Columns["nth_element"];
                this.columndata_field_value = base.Columns["data_field_value"];
                this.columnlong_data_field_value = base.Columns["long_data_field_value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsaved_request_id = new global::System.Data.DataColumn("saved_request_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaved_request_id);
                this.columndata_field_id = new global::System.Data.DataColumn("data_field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_id);
                this.columnposition = new global::System.Data.DataColumn("position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposition);
                this.columnnth_element = new global::System.Data.DataColumn("nth_element", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnth_element);
                this.columndata_field_value = new global::System.Data.DataColumn("data_field_value", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_value);
                this.columnlong_data_field_value = new global::System.Data.DataColumn("long_data_field_value", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlong_data_field_value);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsaved_request_id,
                                this.columndata_field_id,
                                this.columnposition,
                                this.columnnth_element}, true));
                this.columnsaved_request_id.AllowDBNull = false;
                this.columndata_field_id.AllowDBNull = false;
                this.columnposition.AllowDBNull = false;
                this.columnnth_element.AllowDBNull = false;
                this.columndata_field_value.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requests_data_fieldRow Newsaved_requests_data_fieldRow() {
                return ((saved_requests_data_fieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new saved_requests_data_fieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(saved_requests_data_fieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.saved_requests_data_fieldRowChanged != null)) {
                    this.saved_requests_data_fieldRowChanged(this, new saved_requests_data_fieldRowChangeEvent(((saved_requests_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.saved_requests_data_fieldRowChanging != null)) {
                    this.saved_requests_data_fieldRowChanging(this, new saved_requests_data_fieldRowChangeEvent(((saved_requests_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.saved_requests_data_fieldRowDeleted != null)) {
                    this.saved_requests_data_fieldRowDeleted(this, new saved_requests_data_fieldRowChangeEvent(((saved_requests_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.saved_requests_data_fieldRowDeleting != null)) {
                    this.saved_requests_data_fieldRowDeleting(this, new saved_requests_data_fieldRowChangeEvent(((saved_requests_data_fieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesaved_requests_data_fieldRow(saved_requests_data_fieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "saved_requests_data_fieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class servicesDataTable : global::System.Data.TypedTableBase<servicesRow> {
            
            private global::System.Data.DataColumn columnservice_type;
            
            private global::System.Data.DataColumn columnservice_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesDataTable() {
                this.TableName = "services";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal servicesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected servicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_typeColumn {
                get {
                    return this.columnservice_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_nameColumn {
                get {
                    return this.columnservice_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesRow this[int index] {
                get {
                    return ((servicesRow)(this.Rows[index]));
                }
            }
            
            public event servicesRowChangeEventHandler servicesRowChanging;
            
            public event servicesRowChangeEventHandler servicesRowChanged;
            
            public event servicesRowChangeEventHandler servicesRowDeleting;
            
            public event servicesRowChangeEventHandler servicesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddservicesRow(servicesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesRow AddservicesRow(int service_type, string service_name) {
                servicesRow rowservicesRow = ((servicesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        service_type,
                        service_name};
                rowservicesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowservicesRow);
                return rowservicesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesRow FindByservice_type(int service_type) {
                return ((servicesRow)(this.Rows.Find(new object[] {
                            service_type})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                servicesDataTable cln = ((servicesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new servicesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnservice_type = base.Columns["service_type"];
                this.columnservice_name = base.Columns["service_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnservice_type = new global::System.Data.DataColumn("service_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_type);
                this.columnservice_name = new global::System.Data.DataColumn("service_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnservice_type}, true));
                this.columnservice_type.AllowDBNull = false;
                this.columnservice_type.Unique = true;
                this.columnservice_name.AllowDBNull = false;
                this.columnservice_name.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesRow NewservicesRow() {
                return ((servicesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new servicesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(servicesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.servicesRowChanged != null)) {
                    this.servicesRowChanged(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.servicesRowChanging != null)) {
                    this.servicesRowChanging(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.servicesRowDeleted != null)) {
                    this.servicesRowDeleted(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.servicesRowDeleting != null)) {
                    this.servicesRowDeleting(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveservicesRow(servicesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "servicesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sessionsDataTable : global::System.Data.TypedTableBase<sessionsRow> {
            
            private global::System.Data.DataColumn columnsession_id;
            
            private global::System.Data.DataColumn columnstart_time;
            
            private global::System.Data.DataColumn columnend_time;
            
            private global::System.Data.DataColumn columnconnection_type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsDataTable() {
                this.TableName = "sessions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sessionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sessionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn session_idColumn {
                get {
                    return this.columnsession_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_timeColumn {
                get {
                    return this.columnstart_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn end_timeColumn {
                get {
                    return this.columnend_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn connection_typeColumn {
                get {
                    return this.columnconnection_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsRow this[int index] {
                get {
                    return ((sessionsRow)(this.Rows[index]));
                }
            }
            
            public event sessionsRowChangeEventHandler sessionsRowChanging;
            
            public event sessionsRowChangeEventHandler sessionsRowChanged;
            
            public event sessionsRowChangeEventHandler sessionsRowDeleting;
            
            public event sessionsRowChangeEventHandler sessionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsessionsRow(sessionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsRow AddsessionsRow(int session_id, System.DateTime start_time, System.DateTime end_time, string connection_type) {
                sessionsRow rowsessionsRow = ((sessionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        session_id,
                        start_time,
                        end_time,
                        connection_type};
                rowsessionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsessionsRow);
                return rowsessionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsRow FindBysession_id(int session_id) {
                return ((sessionsRow)(this.Rows.Find(new object[] {
                            session_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sessionsDataTable cln = ((sessionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sessionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsession_id = base.Columns["session_id"];
                this.columnstart_time = base.Columns["start_time"];
                this.columnend_time = base.Columns["end_time"];
                this.columnconnection_type = base.Columns["connection_type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsession_id = new global::System.Data.DataColumn("session_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsession_id);
                this.columnstart_time = new global::System.Data.DataColumn("start_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_time);
                this.columnend_time = new global::System.Data.DataColumn("end_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_time);
                this.columnconnection_type = new global::System.Data.DataColumn("connection_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconnection_type);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsession_id}, true));
                this.columnsession_id.AllowDBNull = false;
                this.columnsession_id.Unique = true;
                this.columnstart_time.AllowDBNull = false;
                this.columnend_time.AllowDBNull = false;
                this.columnconnection_type.AllowDBNull = false;
                this.columnconnection_type.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsRow NewsessionsRow() {
                return ((sessionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sessionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sessionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sessionsRowChanged != null)) {
                    this.sessionsRowChanged(this, new sessionsRowChangeEvent(((sessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sessionsRowChanging != null)) {
                    this.sessionsRowChanging(this, new sessionsRowChangeEvent(((sessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sessionsRowDeleted != null)) {
                    this.sessionsRowDeleted(this, new sessionsRowChangeEvent(((sessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sessionsRowDeleting != null)) {
                    this.sessionsRowDeleting(this, new sessionsRowChangeEvent(((sessionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesessionsRow(sessionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sessionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class subtype_structureDataTable : global::System.Data.TypedTableBase<subtype_structureRow> {
            
            private global::System.Data.DataColumn columnservice_type;
            
            private global::System.Data.DataColumn columnservice_subtype;
            
            private global::System.Data.DataColumn columndata_field_id;
            
            private global::System.Data.DataColumn columnposition;
            
            private global::System.Data.DataColumn columnsame_as_subtype;
            
            private global::System.Data.DataColumn columnread_only;
            
            private global::System.Data.DataColumn columndefault_value;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureDataTable() {
                this.TableName = "subtype_structure";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal subtype_structureDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected subtype_structureDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_typeColumn {
                get {
                    return this.columnservice_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_subtypeColumn {
                get {
                    return this.columnservice_subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_idColumn {
                get {
                    return this.columndata_field_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionColumn {
                get {
                    return this.columnposition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn same_as_subtypeColumn {
                get {
                    return this.columnsame_as_subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn read_onlyColumn {
                get {
                    return this.columnread_only;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn default_valueColumn {
                get {
                    return this.columndefault_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRow this[int index] {
                get {
                    return ((subtype_structureRow)(this.Rows[index]));
                }
            }
            
            public event subtype_structureRowChangeEventHandler subtype_structureRowChanging;
            
            public event subtype_structureRowChangeEventHandler subtype_structureRowChanged;
            
            public event subtype_structureRowChangeEventHandler subtype_structureRowDeleting;
            
            public event subtype_structureRowChangeEventHandler subtype_structureRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsubtype_structureRow(subtype_structureRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRow Addsubtype_structureRow(int service_type, int service_subtype, data_fieldsRow parentdata_fieldsRowByFK_subtype_structure_data_fields, int position, int same_as_subtype, bool read_only, int default_value) {
                subtype_structureRow rowsubtype_structureRow = ((subtype_structureRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        service_type,
                        service_subtype,
                        null,
                        position,
                        same_as_subtype,
                        read_only,
                        default_value};
                if ((parentdata_fieldsRowByFK_subtype_structure_data_fields != null)) {
                    columnValuesArray[2] = parentdata_fieldsRowByFK_subtype_structure_data_fields[0];
                }
                rowsubtype_structureRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsubtype_structureRow);
                return rowsubtype_structureRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRow FindByservice_typeservice_subtypedata_field_idposition(int service_type, int service_subtype, int data_field_id, int position) {
                return ((subtype_structureRow)(this.Rows.Find(new object[] {
                            service_type,
                            service_subtype,
                            data_field_id,
                            position})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                subtype_structureDataTable cln = ((subtype_structureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new subtype_structureDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnservice_type = base.Columns["service_type"];
                this.columnservice_subtype = base.Columns["service_subtype"];
                this.columndata_field_id = base.Columns["data_field_id"];
                this.columnposition = base.Columns["position"];
                this.columnsame_as_subtype = base.Columns["same_as_subtype"];
                this.columnread_only = base.Columns["read_only"];
                this.columndefault_value = base.Columns["default_value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnservice_type = new global::System.Data.DataColumn("service_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_type);
                this.columnservice_subtype = new global::System.Data.DataColumn("service_subtype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_subtype);
                this.columndata_field_id = new global::System.Data.DataColumn("data_field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_id);
                this.columnposition = new global::System.Data.DataColumn("position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposition);
                this.columnsame_as_subtype = new global::System.Data.DataColumn("same_as_subtype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsame_as_subtype);
                this.columnread_only = new global::System.Data.DataColumn("read_only", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnread_only);
                this.columndefault_value = new global::System.Data.DataColumn("default_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefault_value);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnservice_type,
                                this.columnservice_subtype,
                                this.columndata_field_id,
                                this.columnposition}, true));
                this.columnservice_type.AllowDBNull = false;
                this.columnservice_subtype.AllowDBNull = false;
                this.columndata_field_id.AllowDBNull = false;
                this.columnposition.AllowDBNull = false;
                this.columnread_only.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRow Newsubtype_structureRow() {
                return ((subtype_structureRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new subtype_structureRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(subtype_structureRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.subtype_structureRowChanged != null)) {
                    this.subtype_structureRowChanged(this, new subtype_structureRowChangeEvent(((subtype_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.subtype_structureRowChanging != null)) {
                    this.subtype_structureRowChanging(this, new subtype_structureRowChangeEvent(((subtype_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.subtype_structureRowDeleted != null)) {
                    this.subtype_structureRowDeleted(this, new subtype_structureRowChangeEvent(((subtype_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.subtype_structureRowDeleting != null)) {
                    this.subtype_structureRowDeleting(this, new subtype_structureRowChangeEvent(((subtype_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesubtype_structureRow(subtype_structureRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "subtype_structureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class subtypesDataTable : global::System.Data.TypedTableBase<subtypesRow> {
            
            private global::System.Data.DataColumn columnservice_type;
            
            private global::System.Data.DataColumn columnservice_subtype;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columnis_request;
            
            private global::System.Data.DataColumn columnallow_repetition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesDataTable() {
                this.TableName = "subtypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal subtypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected subtypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_typeColumn {
                get {
                    return this.columnservice_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_subtypeColumn {
                get {
                    return this.columnservice_subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn is_requestColumn {
                get {
                    return this.columnis_request;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn allow_repetitionColumn {
                get {
                    return this.columnallow_repetition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRow this[int index] {
                get {
                    return ((subtypesRow)(this.Rows[index]));
                }
            }
            
            public event subtypesRowChangeEventHandler subtypesRowChanging;
            
            public event subtypesRowChangeEventHandler subtypesRowChanged;
            
            public event subtypesRowChangeEventHandler subtypesRowDeleting;
            
            public event subtypesRowChangeEventHandler subtypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsubtypesRow(subtypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRow AddsubtypesRow(servicesRow parentservicesRowByFK_subtypes_services, int service_subtype, string description, bool is_request, bool allow_repetition) {
                subtypesRow rowsubtypesRow = ((subtypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        service_subtype,
                        description,
                        is_request,
                        allow_repetition};
                if ((parentservicesRowByFK_subtypes_services != null)) {
                    columnValuesArray[0] = parentservicesRowByFK_subtypes_services[0];
                }
                rowsubtypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsubtypesRow);
                return rowsubtypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRow FindByservice_typeservice_subtype(int service_type, int service_subtype) {
                return ((subtypesRow)(this.Rows.Find(new object[] {
                            service_type,
                            service_subtype})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                subtypesDataTable cln = ((subtypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new subtypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnservice_type = base.Columns["service_type"];
                this.columnservice_subtype = base.Columns["service_subtype"];
                this.columndescription = base.Columns["description"];
                this.columnis_request = base.Columns["is_request"];
                this.columnallow_repetition = base.Columns["allow_repetition"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnservice_type = new global::System.Data.DataColumn("service_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_type);
                this.columnservice_subtype = new global::System.Data.DataColumn("service_subtype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_subtype);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnis_request = new global::System.Data.DataColumn("is_request", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_request);
                this.columnallow_repetition = new global::System.Data.DataColumn("allow_repetition", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnallow_repetition);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnservice_type,
                                this.columnservice_subtype}, true));
                this.columnservice_type.AllowDBNull = false;
                this.columnservice_subtype.AllowDBNull = false;
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 100;
                this.columnis_request.AllowDBNull = false;
                this.columnallow_repetition.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRow NewsubtypesRow() {
                return ((subtypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new subtypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(subtypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.subtypesRowChanged != null)) {
                    this.subtypesRowChanged(this, new subtypesRowChangeEvent(((subtypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.subtypesRowChanging != null)) {
                    this.subtypesRowChanging(this, new subtypesRowChangeEvent(((subtypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.subtypesRowDeleted != null)) {
                    this.subtypesRowDeleted(this, new subtypesRowChangeEvent(((subtypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.subtypesRowDeleting != null)) {
                    this.subtypesRowDeleting(this, new subtypesRowChangeEvent(((subtypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesubtypesRow(subtypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "subtypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tc_failure_code_structureDataTable : global::System.Data.TypedTableBase<tc_failure_code_structureRow> {
            
            private global::System.Data.DataColumn columntc_failure_code;
            
            private global::System.Data.DataColumn columndata_field_id;
            
            private global::System.Data.DataColumn columnposition;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureDataTable() {
                this.TableName = "tc_failure_code_structure";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tc_failure_code_structureDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tc_failure_code_structureDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tc_failure_codeColumn {
                get {
                    return this.columntc_failure_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_idColumn {
                get {
                    return this.columndata_field_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionColumn {
                get {
                    return this.columnposition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureRow this[int index] {
                get {
                    return ((tc_failure_code_structureRow)(this.Rows[index]));
                }
            }
            
            public event tc_failure_code_structureRowChangeEventHandler tc_failure_code_structureRowChanging;
            
            public event tc_failure_code_structureRowChangeEventHandler tc_failure_code_structureRowChanged;
            
            public event tc_failure_code_structureRowChangeEventHandler tc_failure_code_structureRowDeleting;
            
            public event tc_failure_code_structureRowChangeEventHandler tc_failure_code_structureRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtc_failure_code_structureRow(tc_failure_code_structureRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureRow Addtc_failure_code_structureRow(tc_failure_codesRow parenttc_failure_codesRowByFK_tc_failure_code_structure_tc_failure_codes, int data_field_id, int position) {
                tc_failure_code_structureRow rowtc_failure_code_structureRow = ((tc_failure_code_structureRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        data_field_id,
                        position};
                if ((parenttc_failure_codesRowByFK_tc_failure_code_structure_tc_failure_codes != null)) {
                    columnValuesArray[0] = parenttc_failure_codesRowByFK_tc_failure_code_structure_tc_failure_codes[0];
                }
                rowtc_failure_code_structureRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtc_failure_code_structureRow);
                return rowtc_failure_code_structureRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureRow FindBytc_failure_codedata_field_idposition(int tc_failure_code, int data_field_id, int position) {
                return ((tc_failure_code_structureRow)(this.Rows.Find(new object[] {
                            tc_failure_code,
                            data_field_id,
                            position})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tc_failure_code_structureDataTable cln = ((tc_failure_code_structureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tc_failure_code_structureDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntc_failure_code = base.Columns["tc_failure_code"];
                this.columndata_field_id = base.Columns["data_field_id"];
                this.columnposition = base.Columns["position"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntc_failure_code = new global::System.Data.DataColumn("tc_failure_code", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntc_failure_code);
                this.columndata_field_id = new global::System.Data.DataColumn("data_field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_id);
                this.columnposition = new global::System.Data.DataColumn("position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposition);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntc_failure_code,
                                this.columndata_field_id,
                                this.columnposition}, true));
                this.columntc_failure_code.AllowDBNull = false;
                this.columndata_field_id.AllowDBNull = false;
                this.columnposition.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureRow Newtc_failure_code_structureRow() {
                return ((tc_failure_code_structureRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tc_failure_code_structureRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tc_failure_code_structureRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tc_failure_code_structureRowChanged != null)) {
                    this.tc_failure_code_structureRowChanged(this, new tc_failure_code_structureRowChangeEvent(((tc_failure_code_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tc_failure_code_structureRowChanging != null)) {
                    this.tc_failure_code_structureRowChanging(this, new tc_failure_code_structureRowChangeEvent(((tc_failure_code_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tc_failure_code_structureRowDeleted != null)) {
                    this.tc_failure_code_structureRowDeleted(this, new tc_failure_code_structureRowChangeEvent(((tc_failure_code_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tc_failure_code_structureRowDeleting != null)) {
                    this.tc_failure_code_structureRowDeleting(this, new tc_failure_code_structureRowChangeEvent(((tc_failure_code_structureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetc_failure_code_structureRow(tc_failure_code_structureRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tc_failure_code_structureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tc_failure_codesDataTable : global::System.Data.TypedTableBase<tc_failure_codesRow> {
            
            private global::System.Data.DataColumn columntc_failure_code;
            
            private global::System.Data.DataColumn columntc_failure_description;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesDataTable() {
                this.TableName = "tc_failure_codes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tc_failure_codesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tc_failure_codesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tc_failure_codeColumn {
                get {
                    return this.columntc_failure_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tc_failure_descriptionColumn {
                get {
                    return this.columntc_failure_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesRow this[int index] {
                get {
                    return ((tc_failure_codesRow)(this.Rows[index]));
                }
            }
            
            public event tc_failure_codesRowChangeEventHandler tc_failure_codesRowChanging;
            
            public event tc_failure_codesRowChangeEventHandler tc_failure_codesRowChanged;
            
            public event tc_failure_codesRowChangeEventHandler tc_failure_codesRowDeleting;
            
            public event tc_failure_codesRowChangeEventHandler tc_failure_codesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtc_failure_codesRow(tc_failure_codesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesRow Addtc_failure_codesRow(int tc_failure_code, string tc_failure_description) {
                tc_failure_codesRow rowtc_failure_codesRow = ((tc_failure_codesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tc_failure_code,
                        tc_failure_description};
                rowtc_failure_codesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtc_failure_codesRow);
                return rowtc_failure_codesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesRow FindBytc_failure_code(int tc_failure_code) {
                return ((tc_failure_codesRow)(this.Rows.Find(new object[] {
                            tc_failure_code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tc_failure_codesDataTable cln = ((tc_failure_codesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tc_failure_codesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntc_failure_code = base.Columns["tc_failure_code"];
                this.columntc_failure_description = base.Columns["tc_failure_description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntc_failure_code = new global::System.Data.DataColumn("tc_failure_code", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntc_failure_code);
                this.columntc_failure_description = new global::System.Data.DataColumn("tc_failure_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntc_failure_description);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntc_failure_code}, true));
                this.columntc_failure_code.AllowDBNull = false;
                this.columntc_failure_code.Unique = true;
                this.columntc_failure_description.AllowDBNull = false;
                this.columntc_failure_description.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesRow Newtc_failure_codesRow() {
                return ((tc_failure_codesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tc_failure_codesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tc_failure_codesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tc_failure_codesRowChanged != null)) {
                    this.tc_failure_codesRowChanged(this, new tc_failure_codesRowChangeEvent(((tc_failure_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tc_failure_codesRowChanging != null)) {
                    this.tc_failure_codesRowChanging(this, new tc_failure_codesRowChangeEvent(((tc_failure_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tc_failure_codesRowDeleted != null)) {
                    this.tc_failure_codesRowDeleted(this, new tc_failure_codesRowChangeEvent(((tc_failure_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tc_failure_codesRowDeleting != null)) {
                    this.tc_failure_codesRowDeleting(this, new tc_failure_codesRowChangeEvent(((tc_failure_codesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetc_failure_codesRow(tc_failure_codesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tc_failure_codesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class test_procedure_stepsDataTable : global::System.Data.TypedTableBase<test_procedure_stepsRow> {
            
            private global::System.Data.DataColumn columnprocedure_id;
            
            private global::System.Data.DataColumn columnposition;
            
            private global::System.Data.DataColumn columnsaved_request_id;
            
            private global::System.Data.DataColumn columninner_procedure_id;
            
            private global::System.Data.DataColumn columntime_delay;
            
            private global::System.Data.DataColumn columnverify_execution;
            
            private global::System.Data.DataColumn columnverify_condition;
            
            private global::System.Data.DataColumn columnreport_type;
            
            private global::System.Data.DataColumn columnreport_subtype;
            
            private global::System.Data.DataColumn columndata_field_id;
            
            private global::System.Data.DataColumn columncomparison_operation;
            
            private global::System.Data.DataColumn columnvalue_to_compare;
            
            private global::System.Data.DataColumn columnverify_interval_start;
            
            private global::System.Data.DataColumn columnverify_interval_end;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsDataTable() {
                this.TableName = "test_procedure_steps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_procedure_stepsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected test_procedure_stepsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn procedure_idColumn {
                get {
                    return this.columnprocedure_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn positionColumn {
                get {
                    return this.columnposition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn saved_request_idColumn {
                get {
                    return this.columnsaved_request_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inner_procedure_idColumn {
                get {
                    return this.columninner_procedure_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_delayColumn {
                get {
                    return this.columntime_delay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verify_executionColumn {
                get {
                    return this.columnverify_execution;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verify_conditionColumn {
                get {
                    return this.columnverify_condition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn report_typeColumn {
                get {
                    return this.columnreport_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn report_subtypeColumn {
                get {
                    return this.columnreport_subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_idColumn {
                get {
                    return this.columndata_field_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn comparison_operationColumn {
                get {
                    return this.columncomparison_operation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn value_to_compareColumn {
                get {
                    return this.columnvalue_to_compare;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verify_interval_startColumn {
                get {
                    return this.columnverify_interval_start;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn verify_interval_endColumn {
                get {
                    return this.columnverify_interval_end;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow this[int index] {
                get {
                    return ((test_procedure_stepsRow)(this.Rows[index]));
                }
            }
            
            public event test_procedure_stepsRowChangeEventHandler test_procedure_stepsRowChanging;
            
            public event test_procedure_stepsRowChangeEventHandler test_procedure_stepsRowChanged;
            
            public event test_procedure_stepsRowChangeEventHandler test_procedure_stepsRowDeleting;
            
            public event test_procedure_stepsRowChangeEventHandler test_procedure_stepsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtest_procedure_stepsRow(test_procedure_stepsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow Addtest_procedure_stepsRow(test_proceduresRow parenttest_proceduresRowByFK_test_procedure_steps_test_procedures, int position, saved_requestsRow parentsaved_requestsRowByFK_test_procedure_steps_saved_requests, int inner_procedure_id, decimal time_delay, bool verify_execution, string verify_condition, int report_type, int report_subtype, data_fieldsRow parentdata_fieldsRowByFK_test_procedure_steps_data_fields, string comparison_operation, decimal value_to_compare, decimal verify_interval_start, decimal verify_interval_end) {
                test_procedure_stepsRow rowtest_procedure_stepsRow = ((test_procedure_stepsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        position,
                        null,
                        inner_procedure_id,
                        time_delay,
                        verify_execution,
                        verify_condition,
                        report_type,
                        report_subtype,
                        null,
                        comparison_operation,
                        value_to_compare,
                        verify_interval_start,
                        verify_interval_end};
                if ((parenttest_proceduresRowByFK_test_procedure_steps_test_procedures != null)) {
                    columnValuesArray[0] = parenttest_proceduresRowByFK_test_procedure_steps_test_procedures[0];
                }
                if ((parentsaved_requestsRowByFK_test_procedure_steps_saved_requests != null)) {
                    columnValuesArray[2] = parentsaved_requestsRowByFK_test_procedure_steps_saved_requests[0];
                }
                if ((parentdata_fieldsRowByFK_test_procedure_steps_data_fields != null)) {
                    columnValuesArray[9] = parentdata_fieldsRowByFK_test_procedure_steps_data_fields[0];
                }
                rowtest_procedure_stepsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtest_procedure_stepsRow);
                return rowtest_procedure_stepsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow FindByprocedure_idpositionsaved_request_idinner_procedure_id(int procedure_id, int position, int saved_request_id, int inner_procedure_id) {
                return ((test_procedure_stepsRow)(this.Rows.Find(new object[] {
                            procedure_id,
                            position,
                            saved_request_id,
                            inner_procedure_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                test_procedure_stepsDataTable cln = ((test_procedure_stepsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new test_procedure_stepsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprocedure_id = base.Columns["procedure_id"];
                this.columnposition = base.Columns["position"];
                this.columnsaved_request_id = base.Columns["saved_request_id"];
                this.columninner_procedure_id = base.Columns["inner_procedure_id"];
                this.columntime_delay = base.Columns["time_delay"];
                this.columnverify_execution = base.Columns["verify_execution"];
                this.columnverify_condition = base.Columns["verify_condition"];
                this.columnreport_type = base.Columns["report_type"];
                this.columnreport_subtype = base.Columns["report_subtype"];
                this.columndata_field_id = base.Columns["data_field_id"];
                this.columncomparison_operation = base.Columns["comparison_operation"];
                this.columnvalue_to_compare = base.Columns["value_to_compare"];
                this.columnverify_interval_start = base.Columns["verify_interval_start"];
                this.columnverify_interval_end = base.Columns["verify_interval_end"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprocedure_id = new global::System.Data.DataColumn("procedure_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocedure_id);
                this.columnposition = new global::System.Data.DataColumn("position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnposition);
                this.columnsaved_request_id = new global::System.Data.DataColumn("saved_request_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaved_request_id);
                this.columninner_procedure_id = new global::System.Data.DataColumn("inner_procedure_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninner_procedure_id);
                this.columntime_delay = new global::System.Data.DataColumn("time_delay", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_delay);
                this.columnverify_execution = new global::System.Data.DataColumn("verify_execution", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnverify_execution);
                this.columnverify_condition = new global::System.Data.DataColumn("verify_condition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnverify_condition);
                this.columnreport_type = new global::System.Data.DataColumn("report_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreport_type);
                this.columnreport_subtype = new global::System.Data.DataColumn("report_subtype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreport_subtype);
                this.columndata_field_id = new global::System.Data.DataColumn("data_field_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_id);
                this.columncomparison_operation = new global::System.Data.DataColumn("comparison_operation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomparison_operation);
                this.columnvalue_to_compare = new global::System.Data.DataColumn("value_to_compare", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue_to_compare);
                this.columnverify_interval_start = new global::System.Data.DataColumn("verify_interval_start", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnverify_interval_start);
                this.columnverify_interval_end = new global::System.Data.DataColumn("verify_interval_end", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnverify_interval_end);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprocedure_id,
                                this.columnposition,
                                this.columnsaved_request_id,
                                this.columninner_procedure_id}, true));
                this.columnprocedure_id.AllowDBNull = false;
                this.columnposition.AllowDBNull = false;
                this.columnsaved_request_id.AllowDBNull = false;
                this.columninner_procedure_id.AllowDBNull = false;
                this.columntime_delay.AllowDBNull = false;
                this.columnverify_execution.AllowDBNull = false;
                this.columnverify_condition.AllowDBNull = false;
                this.columnverify_condition.MaxLength = 50;
                this.columncomparison_operation.AllowDBNull = false;
                this.columncomparison_operation.MaxLength = 50;
                this.columnvalue_to_compare.AllowDBNull = false;
                this.columnverify_interval_start.AllowDBNull = false;
                this.columnverify_interval_end.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow Newtest_procedure_stepsRow() {
                return ((test_procedure_stepsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new test_procedure_stepsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(test_procedure_stepsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.test_procedure_stepsRowChanged != null)) {
                    this.test_procedure_stepsRowChanged(this, new test_procedure_stepsRowChangeEvent(((test_procedure_stepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.test_procedure_stepsRowChanging != null)) {
                    this.test_procedure_stepsRowChanging(this, new test_procedure_stepsRowChangeEvent(((test_procedure_stepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.test_procedure_stepsRowDeleted != null)) {
                    this.test_procedure_stepsRowDeleted(this, new test_procedure_stepsRowChangeEvent(((test_procedure_stepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.test_procedure_stepsRowDeleting != null)) {
                    this.test_procedure_stepsRowDeleting(this, new test_procedure_stepsRowChangeEvent(((test_procedure_stepsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetest_procedure_stepsRow(test_procedure_stepsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "test_procedure_stepsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class test_procedure_steps_executionDataTable : global::System.Data.TypedTableBase<test_procedure_steps_executionRow> {
            
            private global::System.Data.DataColumn columnexecution_id;
            
            private global::System.Data.DataColumn columnprocedure_id;
            
            private global::System.Data.DataColumn columnsaved_request_id;
            
            private global::System.Data.DataColumn columniteration;
            
            private global::System.Data.DataColumn columnstatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionDataTable() {
                this.TableName = "test_procedure_steps_execution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_procedure_steps_executionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected test_procedure_steps_executionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn execution_idColumn {
                get {
                    return this.columnexecution_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn procedure_idColumn {
                get {
                    return this.columnprocedure_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn saved_request_idColumn {
                get {
                    return this.columnsaved_request_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iterationColumn {
                get {
                    return this.columniteration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRow this[int index] {
                get {
                    return ((test_procedure_steps_executionRow)(this.Rows[index]));
                }
            }
            
            public event test_procedure_steps_executionRowChangeEventHandler test_procedure_steps_executionRowChanging;
            
            public event test_procedure_steps_executionRowChangeEventHandler test_procedure_steps_executionRowChanged;
            
            public event test_procedure_steps_executionRowChangeEventHandler test_procedure_steps_executionRowDeleting;
            
            public event test_procedure_steps_executionRowChangeEventHandler test_procedure_steps_executionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtest_procedure_steps_executionRow(test_procedure_steps_executionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRow Addtest_procedure_steps_executionRow(int execution_id, test_proceduresRow parenttest_proceduresRowByFK_test_procedure_steps_execution_test_procedures, saved_requestsRow parentsaved_requestsRowByFK_test_procedure_steps_execution_saved_requests, int iteration, string status) {
                test_procedure_steps_executionRow rowtest_procedure_steps_executionRow = ((test_procedure_steps_executionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        execution_id,
                        null,
                        null,
                        iteration,
                        status};
                if ((parenttest_proceduresRowByFK_test_procedure_steps_execution_test_procedures != null)) {
                    columnValuesArray[1] = parenttest_proceduresRowByFK_test_procedure_steps_execution_test_procedures[0];
                }
                if ((parentsaved_requestsRowByFK_test_procedure_steps_execution_saved_requests != null)) {
                    columnValuesArray[2] = parentsaved_requestsRowByFK_test_procedure_steps_execution_saved_requests[0];
                }
                rowtest_procedure_steps_executionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtest_procedure_steps_executionRow);
                return rowtest_procedure_steps_executionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRow FindByexecution_idprocedure_idsaved_request_iditeration(int execution_id, int procedure_id, int saved_request_id, int iteration) {
                return ((test_procedure_steps_executionRow)(this.Rows.Find(new object[] {
                            execution_id,
                            procedure_id,
                            saved_request_id,
                            iteration})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                test_procedure_steps_executionDataTable cln = ((test_procedure_steps_executionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new test_procedure_steps_executionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexecution_id = base.Columns["execution_id"];
                this.columnprocedure_id = base.Columns["procedure_id"];
                this.columnsaved_request_id = base.Columns["saved_request_id"];
                this.columniteration = base.Columns["iteration"];
                this.columnstatus = base.Columns["status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexecution_id = new global::System.Data.DataColumn("execution_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexecution_id);
                this.columnprocedure_id = new global::System.Data.DataColumn("procedure_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocedure_id);
                this.columnsaved_request_id = new global::System.Data.DataColumn("saved_request_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaved_request_id);
                this.columniteration = new global::System.Data.DataColumn("iteration", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columniteration);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnexecution_id,
                                this.columnprocedure_id,
                                this.columnsaved_request_id,
                                this.columniteration}, true));
                this.columnexecution_id.AllowDBNull = false;
                this.columnprocedure_id.AllowDBNull = false;
                this.columnsaved_request_id.AllowDBNull = false;
                this.columniteration.AllowDBNull = false;
                this.columnstatus.AllowDBNull = false;
                this.columnstatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRow Newtest_procedure_steps_executionRow() {
                return ((test_procedure_steps_executionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new test_procedure_steps_executionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(test_procedure_steps_executionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.test_procedure_steps_executionRowChanged != null)) {
                    this.test_procedure_steps_executionRowChanged(this, new test_procedure_steps_executionRowChangeEvent(((test_procedure_steps_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.test_procedure_steps_executionRowChanging != null)) {
                    this.test_procedure_steps_executionRowChanging(this, new test_procedure_steps_executionRowChangeEvent(((test_procedure_steps_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.test_procedure_steps_executionRowDeleted != null)) {
                    this.test_procedure_steps_executionRowDeleted(this, new test_procedure_steps_executionRowChangeEvent(((test_procedure_steps_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.test_procedure_steps_executionRowDeleting != null)) {
                    this.test_procedure_steps_executionRowDeleting(this, new test_procedure_steps_executionRowChangeEvent(((test_procedure_steps_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetest_procedure_steps_executionRow(test_procedure_steps_executionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "test_procedure_steps_executionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class test_proceduresDataTable : global::System.Data.TypedTableBase<test_proceduresRow> {
            
            private global::System.Data.DataColumn columnprocedure_id;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columnpurpose;
            
            private global::System.Data.DataColumn columnestimated_duration;
            
            private global::System.Data.DataColumn columnsynchronize_obt;
            
            private global::System.Data.DataColumn columnget_cpu_usage;
            
            private global::System.Data.DataColumn columnrun_in_loop;
            
            private global::System.Data.DataColumn columnloop_iterations;
            
            private global::System.Data.DataColumn columnsend_mail;
            
            private global::System.Data.DataColumn columnpackets_sequence_control_options;
            
            private global::System.Data.DataColumn columnexecuted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresDataTable() {
                this.TableName = "test_procedures";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_proceduresDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected test_proceduresDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn procedure_idColumn {
                get {
                    return this.columnprocedure_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn purposeColumn {
                get {
                    return this.columnpurpose;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn estimated_durationColumn {
                get {
                    return this.columnestimated_duration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn synchronize_obtColumn {
                get {
                    return this.columnsynchronize_obt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn get_cpu_usageColumn {
                get {
                    return this.columnget_cpu_usage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_in_loopColumn {
                get {
                    return this.columnrun_in_loop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn loop_iterationsColumn {
                get {
                    return this.columnloop_iterations;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn send_mailColumn {
                get {
                    return this.columnsend_mail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn packets_sequence_control_optionsColumn {
                get {
                    return this.columnpackets_sequence_control_options;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn executedColumn {
                get {
                    return this.columnexecuted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow this[int index] {
                get {
                    return ((test_proceduresRow)(this.Rows[index]));
                }
            }
            
            public event test_proceduresRowChangeEventHandler test_proceduresRowChanging;
            
            public event test_proceduresRowChangeEventHandler test_proceduresRowChanged;
            
            public event test_proceduresRowChangeEventHandler test_proceduresRowDeleting;
            
            public event test_proceduresRowChangeEventHandler test_proceduresRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtest_proceduresRow(test_proceduresRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow Addtest_proceduresRow(int procedure_id, string description, string purpose, int estimated_duration, bool synchronize_obt, bool get_cpu_usage, bool run_in_loop, int loop_iterations, bool send_mail, string packets_sequence_control_options, bool executed) {
                test_proceduresRow rowtest_proceduresRow = ((test_proceduresRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        procedure_id,
                        description,
                        purpose,
                        estimated_duration,
                        synchronize_obt,
                        get_cpu_usage,
                        run_in_loop,
                        loop_iterations,
                        send_mail,
                        packets_sequence_control_options,
                        executed};
                rowtest_proceduresRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtest_proceduresRow);
                return rowtest_proceduresRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow FindByprocedure_id(int procedure_id) {
                return ((test_proceduresRow)(this.Rows.Find(new object[] {
                            procedure_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                test_proceduresDataTable cln = ((test_proceduresDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new test_proceduresDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprocedure_id = base.Columns["procedure_id"];
                this.columndescription = base.Columns["description"];
                this.columnpurpose = base.Columns["purpose"];
                this.columnestimated_duration = base.Columns["estimated_duration"];
                this.columnsynchronize_obt = base.Columns["synchronize_obt"];
                this.columnget_cpu_usage = base.Columns["get_cpu_usage"];
                this.columnrun_in_loop = base.Columns["run_in_loop"];
                this.columnloop_iterations = base.Columns["loop_iterations"];
                this.columnsend_mail = base.Columns["send_mail"];
                this.columnpackets_sequence_control_options = base.Columns["packets_sequence_control_options"];
                this.columnexecuted = base.Columns["executed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprocedure_id = new global::System.Data.DataColumn("procedure_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocedure_id);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnpurpose = new global::System.Data.DataColumn("purpose", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpurpose);
                this.columnestimated_duration = new global::System.Data.DataColumn("estimated_duration", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnestimated_duration);
                this.columnsynchronize_obt = new global::System.Data.DataColumn("synchronize_obt", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsynchronize_obt);
                this.columnget_cpu_usage = new global::System.Data.DataColumn("get_cpu_usage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnget_cpu_usage);
                this.columnrun_in_loop = new global::System.Data.DataColumn("run_in_loop", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrun_in_loop);
                this.columnloop_iterations = new global::System.Data.DataColumn("loop_iterations", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnloop_iterations);
                this.columnsend_mail = new global::System.Data.DataColumn("send_mail", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsend_mail);
                this.columnpackets_sequence_control_options = new global::System.Data.DataColumn("packets_sequence_control_options", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpackets_sequence_control_options);
                this.columnexecuted = new global::System.Data.DataColumn("executed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexecuted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprocedure_id}, true));
                this.columnprocedure_id.AllowDBNull = false;
                this.columnprocedure_id.Unique = true;
                this.columndescription.AllowDBNull = false;
                this.columndescription.MaxLength = 100;
                this.columnpurpose.AllowDBNull = false;
                this.columnpurpose.MaxLength = 1023;
                this.columnestimated_duration.AllowDBNull = false;
                this.columnsynchronize_obt.AllowDBNull = false;
                this.columnget_cpu_usage.AllowDBNull = false;
                this.columnrun_in_loop.AllowDBNull = false;
                this.columnloop_iterations.AllowDBNull = false;
                this.columnsend_mail.AllowDBNull = false;
                this.columnpackets_sequence_control_options.AllowDBNull = false;
                this.columnpackets_sequence_control_options.MaxLength = 10;
                this.columnexecuted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow Newtest_proceduresRow() {
                return ((test_proceduresRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new test_proceduresRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(test_proceduresRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.test_proceduresRowChanged != null)) {
                    this.test_proceduresRowChanged(this, new test_proceduresRowChangeEvent(((test_proceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.test_proceduresRowChanging != null)) {
                    this.test_proceduresRowChanging(this, new test_proceduresRowChangeEvent(((test_proceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.test_proceduresRowDeleted != null)) {
                    this.test_proceduresRowDeleted(this, new test_proceduresRowChangeEvent(((test_proceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.test_proceduresRowDeleting != null)) {
                    this.test_proceduresRowDeleting(this, new test_proceduresRowChangeEvent(((test_proceduresRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetest_proceduresRow(test_proceduresRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "test_proceduresDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class test_procedures_executionDataTable : global::System.Data.TypedTableBase<test_procedures_executionRow> {
            
            private global::System.Data.DataColumn columnexecution_id;
            
            private global::System.Data.DataColumn columnprocedure_id;
            
            private global::System.Data.DataColumn columnstart_time;
            
            private global::System.Data.DataColumn columnend_time;
            
            private global::System.Data.DataColumn columnexecution_time;
            
            private global::System.Data.DataColumn columnexecuted_loop_iterations;
            
            private global::System.Data.DataColumn columnstatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionDataTable() {
                this.TableName = "test_procedures_execution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_procedures_executionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected test_procedures_executionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn execution_idColumn {
                get {
                    return this.columnexecution_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn procedure_idColumn {
                get {
                    return this.columnprocedure_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn start_timeColumn {
                get {
                    return this.columnstart_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn end_timeColumn {
                get {
                    return this.columnend_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn execution_timeColumn {
                get {
                    return this.columnexecution_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn executed_loop_iterationsColumn {
                get {
                    return this.columnexecuted_loop_iterations;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionRow this[int index] {
                get {
                    return ((test_procedures_executionRow)(this.Rows[index]));
                }
            }
            
            public event test_procedures_executionRowChangeEventHandler test_procedures_executionRowChanging;
            
            public event test_procedures_executionRowChangeEventHandler test_procedures_executionRowChanged;
            
            public event test_procedures_executionRowChangeEventHandler test_procedures_executionRowDeleting;
            
            public event test_procedures_executionRowChangeEventHandler test_procedures_executionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtest_procedures_executionRow(test_procedures_executionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionRow Addtest_procedures_executionRow(int execution_id, test_proceduresRow parenttest_proceduresRowByFK_test_procedures_execution_test_procedures, System.DateTime start_time, System.DateTime end_time, int execution_time, int executed_loop_iterations, string status) {
                test_procedures_executionRow rowtest_procedures_executionRow = ((test_procedures_executionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        execution_id,
                        null,
                        start_time,
                        end_time,
                        execution_time,
                        executed_loop_iterations,
                        status};
                if ((parenttest_proceduresRowByFK_test_procedures_execution_test_procedures != null)) {
                    columnValuesArray[1] = parenttest_proceduresRowByFK_test_procedures_execution_test_procedures[0];
                }
                rowtest_procedures_executionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtest_procedures_executionRow);
                return rowtest_procedures_executionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionRow FindByexecution_idprocedure_id(int execution_id, int procedure_id) {
                return ((test_procedures_executionRow)(this.Rows.Find(new object[] {
                            execution_id,
                            procedure_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                test_procedures_executionDataTable cln = ((test_procedures_executionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new test_procedures_executionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnexecution_id = base.Columns["execution_id"];
                this.columnprocedure_id = base.Columns["procedure_id"];
                this.columnstart_time = base.Columns["start_time"];
                this.columnend_time = base.Columns["end_time"];
                this.columnexecution_time = base.Columns["execution_time"];
                this.columnexecuted_loop_iterations = base.Columns["executed_loop_iterations"];
                this.columnstatus = base.Columns["status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnexecution_id = new global::System.Data.DataColumn("execution_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexecution_id);
                this.columnprocedure_id = new global::System.Data.DataColumn("procedure_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocedure_id);
                this.columnstart_time = new global::System.Data.DataColumn("start_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_time);
                this.columnend_time = new global::System.Data.DataColumn("end_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_time);
                this.columnexecution_time = new global::System.Data.DataColumn("execution_time", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexecution_time);
                this.columnexecuted_loop_iterations = new global::System.Data.DataColumn("executed_loop_iterations", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnexecuted_loop_iterations);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnexecution_id,
                                this.columnprocedure_id}, true));
                this.columnexecution_id.AllowDBNull = false;
                this.columnprocedure_id.AllowDBNull = false;
                this.columnstart_time.AllowDBNull = false;
                this.columnend_time.AllowDBNull = false;
                this.columnexecution_time.AllowDBNull = false;
                this.columnexecuted_loop_iterations.AllowDBNull = false;
                this.columnstatus.AllowDBNull = false;
                this.columnstatus.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionRow Newtest_procedures_executionRow() {
                return ((test_procedures_executionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new test_procedures_executionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(test_procedures_executionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.test_procedures_executionRowChanged != null)) {
                    this.test_procedures_executionRowChanged(this, new test_procedures_executionRowChangeEvent(((test_procedures_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.test_procedures_executionRowChanging != null)) {
                    this.test_procedures_executionRowChanging(this, new test_procedures_executionRowChangeEvent(((test_procedures_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.test_procedures_executionRowDeleted != null)) {
                    this.test_procedures_executionRowDeleted(this, new test_procedures_executionRowChangeEvent(((test_procedures_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.test_procedures_executionRowDeleting != null)) {
                    this.test_procedures_executionRowDeleting(this, new test_procedures_executionRowChangeEvent(((test_procedures_executionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetest_procedures_executionRow(test_procedures_executionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "test_procedures_executionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sp_test_sessions_logDataTable : global::System.Data.TypedTableBase<sp_test_sessions_logRow> {
            
            private global::System.Data.DataColumn columnLog_Time;
            
            private global::System.Data.DataColumn columnPacket_Type;
            
            private global::System.Data.DataColumn columnAPIDX;
            
            private global::System.Data.DataColumn columnSSC;
            
            private global::System.Data.DataColumn columnService_Type;
            
            private global::System.Data.DataColumn columnService_Subtype;
            
            private global::System.Data.DataColumn columnTime_Tag;
            
            private global::System.Data.DataColumn columnCRC;
            
            private global::System.Data.DataColumn columnReception_Ack;
            
            private global::System.Data.DataColumn columnExecution_Ack;
            
            private global::System.Data.DataColumn columnsession_id;
            
            private global::System.Data.DataColumn columnlog_time;
            
            private global::System.Data.DataColumn columnapid;
            
            private global::System.Data.DataColumn columnservice_type;
            
            private global::System.Data.DataColumn columnservice_subtype;
            
            private global::System.Data.DataColumn columnunique_log_id;
            
            private global::System.Data.DataColumn columnallow_repetition;
            
            private global::System.Data.DataColumn columnn_value;
            
            private global::System.Data.DataColumn columnraw_packet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_logDataTable() {
                this.TableName = "sp_test_sessions_log";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_test_sessions_logDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sp_test_sessions_logDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Log_TimeColumn {
                get {
                    return this.columnLog_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Packet_TypeColumn {
                get {
                    return this.columnPacket_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APIDXColumn {
                get {
                    return this.columnAPIDX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSCColumn {
                get {
                    return this.columnSSC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Service_TypeColumn {
                get {
                    return this.columnService_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Service_SubtypeColumn {
                get {
                    return this.columnService_Subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Time_TagColumn {
                get {
                    return this.columnTime_Tag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CRCColumn {
                get {
                    return this.columnCRC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Reception_AckColumn {
                get {
                    return this.columnReception_Ack;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Execution_AckColumn {
                get {
                    return this.columnExecution_Ack;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn session_idColumn {
                get {
                    return this.columnsession_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn log_timeColumn {
                get {
                    return this.columnlog_time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn apidColumn {
                get {
                    return this.columnapid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_typeColumn {
                get {
                    return this.columnservice_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn service_subtypeColumn {
                get {
                    return this.columnservice_subtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unique_log_idColumn {
                get {
                    return this.columnunique_log_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn allow_repetitionColumn {
                get {
                    return this.columnallow_repetition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn n_valueColumn {
                get {
                    return this.columnn_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn raw_packetColumn {
                get {
                    return this.columnraw_packet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_logRow this[int index] {
                get {
                    return ((sp_test_sessions_logRow)(this.Rows[index]));
                }
            }
            
            public event sp_test_sessions_logRowChangeEventHandler sp_test_sessions_logRowChanging;
            
            public event sp_test_sessions_logRowChangeEventHandler sp_test_sessions_logRowChanged;
            
            public event sp_test_sessions_logRowChangeEventHandler sp_test_sessions_logRowDeleting;
            
            public event sp_test_sessions_logRowChangeEventHandler sp_test_sessions_logRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsp_test_sessions_logRow(sp_test_sessions_logRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_logRow Addsp_test_sessions_logRow(
                        string Log_Time, 
                        string Packet_Type, 
                        string APIDX, 
                        int SSC, 
                        string Service_Type, 
                        string Service_Subtype, 
                        string Time_Tag, 
                        string CRC, 
                        string Reception_Ack, 
                        string Execution_Ack, 
                        int session_id, 
                        System.DateTime log_time1, 
                        int apid, 
                        int service_type1, 
                        int service_subtype1, 
                        int unique_log_id, 
                        bool allow_repetition, 
                        int n_value, 
                        byte[] raw_packet) {
                sp_test_sessions_logRow rowsp_test_sessions_logRow = ((sp_test_sessions_logRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Log_Time,
                        Packet_Type,
                        APIDX,
                        SSC,
                        Service_Type,
                        Service_Subtype,
                        Time_Tag,
                        CRC,
                        Reception_Ack,
                        Execution_Ack,
                        session_id,
                        log_time1,
                        apid,
                        service_type1,
                        service_subtype1,
                        unique_log_id,
                        allow_repetition,
                        n_value,
                        raw_packet};
                rowsp_test_sessions_logRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsp_test_sessions_logRow);
                return rowsp_test_sessions_logRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_logRow FindBysession_idunique_log_id(int session_id, int unique_log_id) {
                return ((sp_test_sessions_logRow)(this.Rows.Find(new object[] {
                            session_id,
                            unique_log_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sp_test_sessions_logDataTable cln = ((sp_test_sessions_logDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sp_test_sessions_logDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLog_Time = base.Columns["Log Time"];
                this.columnPacket_Type = base.Columns["Packet Type"];
                this.columnAPIDX = base.Columns["APIDX"];
                this.columnSSC = base.Columns["SSC"];
                this.columnService_Type = base.Columns["Service Type"];
                this.columnService_Subtype = base.Columns["Service Subtype"];
                this.columnTime_Tag = base.Columns["Time Tag"];
                this.columnCRC = base.Columns["CRC"];
                this.columnReception_Ack = base.Columns["Reception Ack"];
                this.columnExecution_Ack = base.Columns["Execution Ack"];
                this.columnsession_id = base.Columns["session_id"];
                this.columnlog_time = base.Columns["log_time"];
                this.columnapid = base.Columns["apid"];
                this.columnservice_type = base.Columns["service_type"];
                this.columnservice_subtype = base.Columns["service_subtype"];
                this.columnunique_log_id = base.Columns["unique_log_id"];
                this.columnallow_repetition = base.Columns["allow_repetition"];
                this.columnn_value = base.Columns["n_value"];
                this.columnraw_packet = base.Columns["raw_packet"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLog_Time = new global::System.Data.DataColumn("Log Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLog_Time);
                this.columnPacket_Type = new global::System.Data.DataColumn("Packet Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacket_Type);
                this.columnAPIDX = new global::System.Data.DataColumn("APIDX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPIDX);
                this.columnSSC = new global::System.Data.DataColumn("SSC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSC);
                this.columnService_Type = new global::System.Data.DataColumn("Service Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnService_Type);
                this.columnService_Subtype = new global::System.Data.DataColumn("Service Subtype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnService_Subtype);
                this.columnTime_Tag = new global::System.Data.DataColumn("Time Tag", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime_Tag);
                this.columnCRC = new global::System.Data.DataColumn("CRC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCRC);
                this.columnReception_Ack = new global::System.Data.DataColumn("Reception Ack", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReception_Ack);
                this.columnExecution_Ack = new global::System.Data.DataColumn("Execution Ack", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecution_Ack);
                this.columnsession_id = new global::System.Data.DataColumn("session_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsession_id);
                this.columnlog_time = new global::System.Data.DataColumn("log_time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlog_time);
                this.columnapid = new global::System.Data.DataColumn("apid", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnapid);
                this.columnservice_type = new global::System.Data.DataColumn("service_type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_type);
                this.columnservice_subtype = new global::System.Data.DataColumn("service_subtype", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnservice_subtype);
                this.columnunique_log_id = new global::System.Data.DataColumn("unique_log_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunique_log_id);
                this.columnallow_repetition = new global::System.Data.DataColumn("allow_repetition", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnallow_repetition);
                this.columnn_value = new global::System.Data.DataColumn("n_value", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnn_value);
                this.columnraw_packet = new global::System.Data.DataColumn("raw_packet", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnraw_packet);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnsession_id,
                                this.columnunique_log_id}, true));
                this.columnLog_Time.ReadOnly = true;
                this.columnLog_Time.MaxLength = 61;
                this.columnPacket_Type.ReadOnly = true;
                this.columnPacket_Type.MaxLength = 7;
                this.columnAPIDX.ReadOnly = true;
                this.columnAPIDX.MaxLength = 113;
                this.columnSSC.AllowDBNull = false;
                this.columnService_Type.ReadOnly = true;
                this.columnService_Type.MaxLength = 113;
                this.columnService_Subtype.ReadOnly = true;
                this.columnService_Subtype.MaxLength = 113;
                this.columnTime_Tag.ReadOnly = true;
                this.columnTime_Tag.MaxLength = 2147483647;
                this.columnCRC.ReadOnly = true;
                this.columnCRC.MaxLength = 5;
                this.columnReception_Ack.ReadOnly = true;
                this.columnReception_Ack.MaxLength = 2147483647;
                this.columnExecution_Ack.ReadOnly = true;
                this.columnExecution_Ack.MaxLength = 2147483647;
                this.columnsession_id.AllowDBNull = false;
                this.columnlog_time.AllowDBNull = false;
                this.columnapid.AllowDBNull = false;
                this.columnservice_type.AllowDBNull = false;
                this.columnservice_subtype.AllowDBNull = false;
                this.columnunique_log_id.AllowDBNull = false;
                this.columnallow_repetition.ReadOnly = true;
                this.columnn_value.AllowDBNull = false;
                this.columnraw_packet.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_logRow Newsp_test_sessions_logRow() {
                return ((sp_test_sessions_logRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sp_test_sessions_logRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sp_test_sessions_logRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sp_test_sessions_logRowChanged != null)) {
                    this.sp_test_sessions_logRowChanged(this, new sp_test_sessions_logRowChangeEvent(((sp_test_sessions_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sp_test_sessions_logRowChanging != null)) {
                    this.sp_test_sessions_logRowChanging(this, new sp_test_sessions_logRowChangeEvent(((sp_test_sessions_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sp_test_sessions_logRowDeleted != null)) {
                    this.sp_test_sessions_logRowDeleted(this, new sp_test_sessions_logRowChangeEvent(((sp_test_sessions_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sp_test_sessions_logRowDeleting != null)) {
                    this.sp_test_sessions_logRowDeleting(this, new sp_test_sessions_logRowChangeEvent(((sp_test_sessions_logRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesp_test_sessions_logRow(sp_test_sessions_logRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sp_test_sessions_logDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sp_test_sessions_log_app_dataDataTable : global::System.Data.TypedTableBase<sp_test_sessions_log_app_dataRow> {
            
            private global::System.Data.DataColumn columndata_field_name;
            
            private global::System.Data.DataColumn columnvalue;
            
            private global::System.Data.DataColumn columnnumber_of_bits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_log_app_dataDataTable() {
                this.TableName = "sp_test_sessions_log_app_data";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_test_sessions_log_app_dataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sp_test_sessions_log_app_dataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn data_field_nameColumn {
                get {
                    return this.columndata_field_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn number_of_bitsColumn {
                get {
                    return this.columnnumber_of_bits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_log_app_dataRow this[int index] {
                get {
                    return ((sp_test_sessions_log_app_dataRow)(this.Rows[index]));
                }
            }
            
            public event sp_test_sessions_log_app_dataRowChangeEventHandler sp_test_sessions_log_app_dataRowChanging;
            
            public event sp_test_sessions_log_app_dataRowChangeEventHandler sp_test_sessions_log_app_dataRowChanged;
            
            public event sp_test_sessions_log_app_dataRowChangeEventHandler sp_test_sessions_log_app_dataRowDeleting;
            
            public event sp_test_sessions_log_app_dataRowChangeEventHandler sp_test_sessions_log_app_dataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsp_test_sessions_log_app_dataRow(sp_test_sessions_log_app_dataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_log_app_dataRow Addsp_test_sessions_log_app_dataRow(string data_field_name, string value, int number_of_bits) {
                sp_test_sessions_log_app_dataRow rowsp_test_sessions_log_app_dataRow = ((sp_test_sessions_log_app_dataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        data_field_name,
                        value,
                        number_of_bits};
                rowsp_test_sessions_log_app_dataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsp_test_sessions_log_app_dataRow);
                return rowsp_test_sessions_log_app_dataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sp_test_sessions_log_app_dataDataTable cln = ((sp_test_sessions_log_app_dataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sp_test_sessions_log_app_dataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndata_field_name = base.Columns["data_field_name"];
                this.columnvalue = base.Columns["value"];
                this.columnnumber_of_bits = base.Columns["number_of_bits"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndata_field_name = new global::System.Data.DataColumn("data_field_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_field_name);
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
                this.columnnumber_of_bits = new global::System.Data.DataColumn("number_of_bits", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumber_of_bits);
                this.columndata_field_name.AllowDBNull = false;
                this.columndata_field_name.MaxLength = 50;
                this.columnvalue.ReadOnly = true;
                this.columnvalue.MaxLength = 2147483647;
                this.columnnumber_of_bits.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_log_app_dataRow Newsp_test_sessions_log_app_dataRow() {
                return ((sp_test_sessions_log_app_dataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sp_test_sessions_log_app_dataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sp_test_sessions_log_app_dataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sp_test_sessions_log_app_dataRowChanged != null)) {
                    this.sp_test_sessions_log_app_dataRowChanged(this, new sp_test_sessions_log_app_dataRowChangeEvent(((sp_test_sessions_log_app_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sp_test_sessions_log_app_dataRowChanging != null)) {
                    this.sp_test_sessions_log_app_dataRowChanging(this, new sp_test_sessions_log_app_dataRowChangeEvent(((sp_test_sessions_log_app_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sp_test_sessions_log_app_dataRowDeleted != null)) {
                    this.sp_test_sessions_log_app_dataRowDeleted(this, new sp_test_sessions_log_app_dataRowChangeEvent(((sp_test_sessions_log_app_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sp_test_sessions_log_app_dataRowDeleting != null)) {
                    this.sp_test_sessions_log_app_dataRowDeleting(this, new sp_test_sessions_log_app_dataRowChangeEvent(((sp_test_sessions_log_app_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesp_test_sessions_log_app_dataRow(sp_test_sessions_log_app_dataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COMAV_EGSEDataSet ds = new COMAV_EGSEDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sp_test_sessions_log_app_dataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class apidsRow : global::System.Data.DataRow {
            
            private apidsDataTable tableapids;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal apidsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableapids = ((apidsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int apid {
                get {
                    return ((int)(this[this.tableapids.apidColumn]));
                }
                set {
                    this[this.tableapids.apidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string application_name {
                get {
                    return ((string)(this[this.tableapids.application_nameColumn]));
                }
                set {
                    this[this.tableapids.application_nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class data_field_listsRow : global::System.Data.DataRow {
            
            private data_field_listsDataTable tabledata_field_lists;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal data_field_listsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledata_field_lists = ((data_field_listsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int list_id {
                get {
                    return ((int)(this[this.tabledata_field_lists.list_idColumn]));
                }
                set {
                    this[this.tabledata_field_lists.list_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int list_value {
                get {
                    return ((int)(this[this.tabledata_field_lists.list_valueColumn]));
                }
                set {
                    this[this.tabledata_field_lists.list_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string list_text {
                get {
                    return ((string)(this[this.tabledata_field_lists.list_textColumn]));
                }
                set {
                    this[this.tabledata_field_lists.list_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerRow data_field_lists_headerRow {
                get {
                    return ((data_field_lists_headerRow)(this.GetParentRow(this.Table.ParentRelations["FK_data_field_lists_data_field_lists_header"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_data_field_lists_data_field_lists_header"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class data_field_lists_headerRow : global::System.Data.DataRow {
            
            private data_field_lists_headerDataTable tabledata_field_lists_header;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal data_field_lists_headerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledata_field_lists_header = ((data_field_lists_headerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int list_id {
                get {
                    return ((int)(this[this.tabledata_field_lists_header.list_idColumn]));
                }
                set {
                    this[this.tabledata_field_lists_header.list_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string list_description {
                get {
                    return ((string)(this[this.tabledata_field_lists_header.list_descriptionColumn]));
                }
                set {
                    this[this.tabledata_field_lists_header.list_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsRow[] Getdata_field_listsRows() {
                if ((this.Table.ChildRelations["FK_data_field_lists_data_field_lists_header"] == null)) {
                    return new data_field_listsRow[0];
                }
                else {
                    return ((data_field_listsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_data_field_lists_data_field_lists_header"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class data_fieldsRow : global::System.Data.DataRow {
            
            private data_fieldsDataTable tabledata_fields;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal data_fieldsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledata_fields = ((data_fieldsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int data_field_id {
                get {
                    return ((int)(this[this.tabledata_fields.data_field_idColumn]));
                }
                set {
                    this[this.tabledata_fields.data_field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string data_field_name {
                get {
                    return ((string)(this[this.tabledata_fields.data_field_nameColumn]));
                }
                set {
                    this[this.tabledata_fields.data_field_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool type_is_bool {
                get {
                    return ((bool)(this[this.tabledata_fields.type_is_boolColumn]));
                }
                set {
                    this[this.tabledata_fields.type_is_boolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool type_is_numeric {
                get {
                    return ((bool)(this[this.tabledata_fields.type_is_numericColumn]));
                }
                set {
                    this[this.tabledata_fields.type_is_numericColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool type_is_raw_hex {
                get {
                    return ((bool)(this[this.tabledata_fields.type_is_raw_hexColumn]));
                }
                set {
                    this[this.tabledata_fields.type_is_raw_hexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool type_is_list {
                get {
                    return ((bool)(this[this.tabledata_fields.type_is_listColumn]));
                }
                set {
                    this[this.tabledata_fields.type_is_listColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool type_is_table {
                get {
                    return ((bool)(this[this.tabledata_fields.type_is_tableColumn]));
                }
                set {
                    this[this.tabledata_fields.type_is_tableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int list_id {
                get {
                    try {
                        return ((int)(this[this.tabledata_fields.list_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'list_id\' na tabela \'data_fields\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tabledata_fields.list_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string table_name {
                get {
                    try {
                        return ((string)(this[this.tabledata_fields.table_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'table_name\' na tabela \'data_fields\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tabledata_fields.table_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int number_of_bits {
                get {
                    return ((int)(this[this.tabledata_fields.number_of_bitsColumn]));
                }
                set {
                    this[this.tabledata_fields.number_of_bitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool variable_length {
                get {
                    return ((bool)(this[this.tabledata_fields.variable_lengthColumn]));
                }
                set {
                    this[this.tabledata_fields.variable_lengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islist_idNull() {
                return this.IsNull(this.tabledata_fields.list_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlist_idNull() {
                this[this.tabledata_fields.list_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istable_nameNull() {
                return this.IsNull(this.tabledata_fields.table_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settable_nameNull() {
                this[this.tabledata_fields.table_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRow[] Getevent_report_structureRows() {
                if ((this.Table.ChildRelations["FK_event_report_structure_data_fields"] == null)) {
                    return new event_report_structureRow[0];
                }
                else {
                    return ((event_report_structureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_event_report_structure_data_fields"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRow[] Getpackets_log_data_fieldRows() {
                if ((this.Table.ChildRelations["FK_packets_log_data_field_data_fields"] == null)) {
                    return new packets_log_data_fieldRow[0];
                }
                else {
                    return ((packets_log_data_fieldRow[])(base.GetChildRows(this.Table.ChildRelations["FK_packets_log_data_field_data_fields"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRow[] Getsubtype_structureRows() {
                if ((this.Table.ChildRelations["FK_subtype_structure_data_fields"] == null)) {
                    return new subtype_structureRow[0];
                }
                else {
                    return ((subtype_structureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_subtype_structure_data_fields"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow[] Gettest_procedure_stepsRows() {
                if ((this.Table.ChildRelations["FK_test_procedure_steps_data_fields"] == null)) {
                    return new test_procedure_stepsRow[0];
                }
                else {
                    return ((test_procedure_stepsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_procedure_steps_data_fields"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class event_report_structureRow : global::System.Data.DataRow {
            
            private event_report_structureDataTable tableevent_report_structure;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal event_report_structureRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableevent_report_structure = ((event_report_structureDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int rid {
                get {
                    return ((int)(this[this.tableevent_report_structure.ridColumn]));
                }
                set {
                    this[this.tableevent_report_structure.ridColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int data_field_id {
                get {
                    return ((int)(this[this.tableevent_report_structure.data_field_idColumn]));
                }
                set {
                    this[this.tableevent_report_structure.data_field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int position {
                get {
                    return ((int)(this[this.tableevent_report_structure.positionColumn]));
                }
                set {
                    this[this.tableevent_report_structure.positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow data_fieldsRow {
                get {
                    return ((data_fieldsRow)(this.GetParentRow(this.Table.ParentRelations["FK_event_report_structure_data_fields"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_event_report_structure_data_fields"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsRow ridsRow {
                get {
                    return ((ridsRow)(this.GetParentRow(this.Table.ParentRelations["FK_event_report_structure_rids"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_event_report_structure_rids"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class memory_idsRow : global::System.Data.DataRow {
            
            private memory_idsDataTable tablememory_ids;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal memory_idsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablememory_ids = ((memory_idsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int memory_id {
                get {
                    return ((int)(this[this.tablememory_ids.memory_idColumn]));
                }
                set {
                    this[this.tablememory_ids.memory_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memory_unit_description {
                get {
                    return ((string)(this[this.tablememory_ids.memory_unit_descriptionColumn]));
                }
                set {
                    this[this.tablememory_ids.memory_unit_descriptionColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class mission_constantsRow : global::System.Data.DataRow {
            
            private mission_constantsDataTable tablemission_constants;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal mission_constantsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemission_constants = ((mission_constantsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mission_constant {
                get {
                    return ((string)(this[this.tablemission_constants.mission_constantColumn]));
                }
                set {
                    this[this.tablemission_constants.mission_constantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string constant_description {
                get {
                    return ((string)(this[this.tablemission_constants.constant_descriptionColumn]));
                }
                set {
                    this[this.tablemission_constants.constant_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string defined_in {
                get {
                    return ((string)(this[this.tablemission_constants.defined_inColumn]));
                }
                set {
                    this[this.tablemission_constants.defined_inColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string constant_value {
                get {
                    return ((string)(this[this.tablemission_constants.constant_valueColumn]));
                }
                set {
                    this[this.tablemission_constants.constant_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool is_flight_sw_constant {
                get {
                    return ((bool)(this[this.tablemission_constants.is_flight_sw_constantColumn]));
                }
                set {
                    this[this.tablemission_constants.is_flight_sw_constantColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class output_line_idsRow : global::System.Data.DataRow {
            
            private output_line_idsDataTable tableoutput_line_ids;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal output_line_idsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableoutput_line_ids = ((output_line_idsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int output_line_id {
                get {
                    return ((int)(this[this.tableoutput_line_ids.output_line_idColumn]));
                }
                set {
                    this[this.tableoutput_line_ids.output_line_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string output_line_description {
                get {
                    return ((string)(this[this.tableoutput_line_ids.output_line_descriptionColumn]));
                }
                set {
                    this[this.tableoutput_line_ids.output_line_descriptionColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class packet_store_idsRow : global::System.Data.DataRow {
            
            private packet_store_idsDataTable tablepacket_store_ids;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packet_store_idsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepacket_store_ids = ((packet_store_idsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int store_id {
                get {
                    return ((int)(this[this.tablepacket_store_ids.store_idColumn]));
                }
                set {
                    this[this.tablepacket_store_ids.store_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string packet_store_name {
                get {
                    return ((string)(this[this.tablepacket_store_ids.packet_store_nameColumn]));
                }
                set {
                    this[this.tablepacket_store_ids.packet_store_nameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class packets_logRow : global::System.Data.DataRow {
            
            private packets_logDataTable tablepackets_log;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packets_logRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepackets_log = ((packets_logDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int session_id {
                get {
                    return ((int)(this[this.tablepackets_log.session_idColumn]));
                }
                set {
                    this[this.tablepackets_log.session_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int unique_log_id {
                get {
                    return ((int)(this[this.tablepackets_log.unique_log_idColumn]));
                }
                set {
                    this[this.tablepackets_log.unique_log_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime log_time {
                get {
                    return ((global::System.DateTime)(this[this.tablepackets_log.log_timeColumn]));
                }
                set {
                    this[this.tablepackets_log.log_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int apid {
                get {
                    return ((int)(this[this.tablepackets_log.apidColumn]));
                }
                set {
                    this[this.tablepackets_log.apidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ssc {
                get {
                    return ((int)(this[this.tablepackets_log.sscColumn]));
                }
                set {
                    this[this.tablepackets_log.sscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_type {
                get {
                    return ((int)(this[this.tablepackets_log.service_typeColumn]));
                }
                set {
                    this[this.tablepackets_log.service_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_subtype {
                get {
                    return ((int)(this[this.tablepackets_log.service_subtypeColumn]));
                }
                set {
                    this[this.tablepackets_log.service_subtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] time_tag {
                get {
                    try {
                        return ((byte[])(this[this.tablepackets_log.time_tagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'time_tag\' na tabela \'packets_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablepackets_log.time_tagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool is_request {
                get {
                    return ((bool)(this[this.tablepackets_log.is_requestColumn]));
                }
                set {
                    this[this.tablepackets_log.is_requestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int n_value {
                get {
                    return ((int)(this[this.tablepackets_log.n_valueColumn]));
                }
                set {
                    this[this.tablepackets_log.n_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool crc_error {
                get {
                    return ((bool)(this[this.tablepackets_log.crc_errorColumn]));
                }
                set {
                    this[this.tablepackets_log.crc_errorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] raw_packet {
                get {
                    return ((byte[])(this[this.tablepackets_log.raw_packetColumn]));
                }
                set {
                    this[this.tablepackets_log.raw_packetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsRow sessionsRow {
                get {
                    return ((sessionsRow)(this.GetParentRow(this.Table.ParentRelations["FK_packets_log_sessions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_packets_log_sessions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istime_tagNull() {
                return this.IsNull(this.tablepackets_log.time_tagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settime_tagNull() {
                this[this.tablepackets_log.time_tagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRow[] Getpackets_log_data_fieldRows() {
                if ((this.Table.ChildRelations["FK_packets_log_data_field_packets_log"] == null)) {
                    return new packets_log_data_fieldRow[0];
                }
                else {
                    return ((packets_log_data_fieldRow[])(base.GetChildRows(this.Table.ChildRelations["FK_packets_log_data_field_packets_log"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class packets_log_data_fieldRow : global::System.Data.DataRow {
            
            private packets_log_data_fieldDataTable tablepackets_log_data_field;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal packets_log_data_fieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepackets_log_data_field = ((packets_log_data_fieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int session_id {
                get {
                    return ((int)(this[this.tablepackets_log_data_field.session_idColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.session_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int unique_log_id {
                get {
                    return ((int)(this[this.tablepackets_log_data_field.unique_log_idColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.unique_log_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int data_field_id {
                get {
                    return ((int)(this[this.tablepackets_log_data_field.data_field_idColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.data_field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parameter_id {
                get {
                    return ((int)(this[this.tablepackets_log_data_field.parameter_idColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.parameter_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int position {
                get {
                    return ((int)(this[this.tablepackets_log_data_field.positionColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nth_element {
                get {
                    return ((int)(this[this.tablepackets_log_data_field.nth_elementColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.nth_elementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool is_data_field {
                get {
                    return ((bool)(this[this.tablepackets_log_data_field.is_data_fieldColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.is_data_fieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long data_field_value {
                get {
                    return ((long)(this[this.tablepackets_log_data_field.data_field_valueColumn]));
                }
                set {
                    this[this.tablepackets_log_data_field.data_field_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] long_data_field_value {
                get {
                    try {
                        return ((byte[])(this[this.tablepackets_log_data_field.long_data_field_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'long_data_field_value\' na tabela \'packets_log_data_field\' é DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablepackets_log_data_field.long_data_field_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow data_fieldsRow {
                get {
                    return ((data_fieldsRow)(this.GetParentRow(this.Table.ParentRelations["FK_packets_log_data_field_data_fields"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_packets_log_data_field_data_fields"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRow packets_logRowParent {
                get {
                    return ((packets_logRow)(this.GetParentRow(this.Table.ParentRelations["FK_packets_log_data_field_packets_log"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_packets_log_data_field_packets_log"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islong_data_field_valueNull() {
                return this.IsNull(this.tablepackets_log_data_field.long_data_field_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlong_data_field_valueNull() {
                this[this.tablepackets_log_data_field.long_data_field_valueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class parametersRow : global::System.Data.DataRow {
            
            private parametersDataTable tableparameters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal parametersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableparameters = ((parametersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parameter_id {
                get {
                    return ((int)(this[this.tableparameters.parameter_idColumn]));
                }
                set {
                    this[this.tableparameters.parameter_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string parameter_description {
                get {
                    try {
                        return ((string)(this[this.tableparameters.parameter_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'parameter_description\' na tabela \'parameters\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tableparameters.parameter_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string data_type {
                get {
                    return ((string)(this[this.tableparameters.data_typeColumn]));
                }
                set {
                    this[this.tableparameters.data_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool show_as_hex {
                get {
                    return ((bool)(this[this.tableparameters.show_as_hexColumn]));
                }
                set {
                    this[this.tableparameters.show_as_hexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparameter_descriptionNull() {
                return this.IsNull(this.tableparameters.parameter_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparameter_descriptionNull() {
                this[this.tableparameters.parameter_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRow[] Getreport_definition_structureRows() {
                if ((this.Table.ChildRelations["FK_report_definition_structure_parameters"] == null)) {
                    return new report_definition_structureRow[0];
                }
                else {
                    return ((report_definition_structureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_report_definition_structure_parameters"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class report_definition_structureRow : global::System.Data.DataRow {
            
            private report_definition_structureDataTable tablereport_definition_structure;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_definition_structureRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereport_definition_structure = ((report_definition_structureDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int structure_id {
                get {
                    return ((int)(this[this.tablereport_definition_structure.structure_idColumn]));
                }
                set {
                    this[this.tablereport_definition_structure.structure_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parameter_id {
                get {
                    return ((int)(this[this.tablereport_definition_structure.parameter_idColumn]));
                }
                set {
                    this[this.tablereport_definition_structure.parameter_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int position {
                get {
                    return ((int)(this[this.tablereport_definition_structure.positionColumn]));
                }
                set {
                    this[this.tablereport_definition_structure.positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersRow parametersRow {
                get {
                    return ((parametersRow)(this.GetParentRow(this.Table.ParentRelations["FK_report_definition_structure_parameters"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_report_definition_structure_parameters"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsRow report_definitionsRow {
                get {
                    return ((report_definitionsRow)(this.GetParentRow(this.Table.ParentRelations["FK_report_definition_structure_report_definitions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_report_definition_structure_report_definitions"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class report_definitionsRow : global::System.Data.DataRow {
            
            private report_definitionsDataTable tablereport_definitions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal report_definitionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereport_definitions = ((report_definitionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int structure_id {
                get {
                    return ((int)(this[this.tablereport_definitions.structure_idColumn]));
                }
                set {
                    this[this.tablereport_definitions.structure_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string report_definition_description {
                get {
                    return ((string)(this[this.tablereport_definitions.report_definition_descriptionColumn]));
                }
                set {
                    this[this.tablereport_definitions.report_definition_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRow[] Getreport_definition_structureRows() {
                if ((this.Table.ChildRelations["FK_report_definition_structure_report_definitions"] == null)) {
                    return new report_definition_structureRow[0];
                }
                else {
                    return ((report_definition_structureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_report_definition_structure_report_definitions"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ridsRow : global::System.Data.DataRow {
            
            private ridsDataTable tablerids;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ridsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablerids = ((ridsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int rid {
                get {
                    return ((int)(this[this.tablerids.ridColumn]));
                }
                set {
                    this[this.tablerids.ridColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tablerids.descriptionColumn]));
                }
                set {
                    this[this.tablerids.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRow[] Getevent_report_structureRows() {
                if ((this.Table.ChildRelations["FK_event_report_structure_rids"] == null)) {
                    return new event_report_structureRow[0];
                }
                else {
                    return ((event_report_structureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_event_report_structure_rids"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class saved_requestsRow : global::System.Data.DataRow {
            
            private saved_requestsDataTable tablesaved_requests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal saved_requestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesaved_requests = ((saved_requestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int saved_request_id {
                get {
                    return ((int)(this[this.tablesaved_requests.saved_request_idColumn]));
                }
                set {
                    this[this.tablesaved_requests.saved_request_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tablesaved_requests.descriptionColumn]));
                }
                set {
                    this[this.tablesaved_requests.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int apid {
                get {
                    return ((int)(this[this.tablesaved_requests.apidColumn]));
                }
                set {
                    this[this.tablesaved_requests.apidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool auto_ssc {
                get {
                    try {
                        return ((bool)(this[this.tablesaved_requests.auto_sscColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'auto_ssc\' na tabela \'saved_requests\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesaved_requests.auto_sscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool auto_length {
                get {
                    try {
                        return ((bool)(this[this.tablesaved_requests.auto_lengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'auto_length\' na tabela \'saved_requests\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesaved_requests.auto_lengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool auto_crc {
                get {
                    try {
                        return ((bool)(this[this.tablesaved_requests.auto_crcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'auto_crc\' na tabela \'saved_requests\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesaved_requests.auto_crcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ssc {
                get {
                    return ((int)(this[this.tablesaved_requests.sscColumn]));
                }
                set {
                    this[this.tablesaved_requests.sscColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_type {
                get {
                    return ((int)(this[this.tablesaved_requests.service_typeColumn]));
                }
                set {
                    this[this.tablesaved_requests.service_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_subtype {
                get {
                    return ((int)(this[this.tablesaved_requests.service_subtypeColumn]));
                }
                set {
                    this[this.tablesaved_requests.service_subtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int n_value {
                get {
                    return ((int)(this[this.tablesaved_requests.n_valueColumn]));
                }
                set {
                    this[this.tablesaved_requests.n_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool crc_error {
                get {
                    return ((bool)(this[this.tablesaved_requests.crc_errorColumn]));
                }
                set {
                    this[this.tablesaved_requests.crc_errorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] raw_packet {
                get {
                    return ((byte[])(this[this.tablesaved_requests.raw_packetColumn]));
                }
                set {
                    this[this.tablesaved_requests.raw_packetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isauto_sscNull() {
                return this.IsNull(this.tablesaved_requests.auto_sscColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setauto_sscNull() {
                this[this.tablesaved_requests.auto_sscColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isauto_lengthNull() {
                return this.IsNull(this.tablesaved_requests.auto_lengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setauto_lengthNull() {
                this[this.tablesaved_requests.auto_lengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isauto_crcNull() {
                return this.IsNull(this.tablesaved_requests.auto_crcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setauto_crcNull() {
                this[this.tablesaved_requests.auto_crcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow[] Gettest_procedure_stepsRows() {
                if ((this.Table.ChildRelations["FK_test_procedure_steps_saved_requests"] == null)) {
                    return new test_procedure_stepsRow[0];
                }
                else {
                    return ((test_procedure_stepsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_procedure_steps_saved_requests"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRow[] Gettest_procedure_steps_executionRows() {
                if ((this.Table.ChildRelations["FK_test_procedure_steps_execution_saved_requests"] == null)) {
                    return new test_procedure_steps_executionRow[0];
                }
                else {
                    return ((test_procedure_steps_executionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_procedure_steps_execution_saved_requests"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class saved_requests_data_fieldRow : global::System.Data.DataRow {
            
            private saved_requests_data_fieldDataTable tablesaved_requests_data_field;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal saved_requests_data_fieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesaved_requests_data_field = ((saved_requests_data_fieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int saved_request_id {
                get {
                    return ((int)(this[this.tablesaved_requests_data_field.saved_request_idColumn]));
                }
                set {
                    this[this.tablesaved_requests_data_field.saved_request_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int data_field_id {
                get {
                    return ((int)(this[this.tablesaved_requests_data_field.data_field_idColumn]));
                }
                set {
                    this[this.tablesaved_requests_data_field.data_field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int position {
                get {
                    return ((int)(this[this.tablesaved_requests_data_field.positionColumn]));
                }
                set {
                    this[this.tablesaved_requests_data_field.positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nth_element {
                get {
                    return ((int)(this[this.tablesaved_requests_data_field.nth_elementColumn]));
                }
                set {
                    this[this.tablesaved_requests_data_field.nth_elementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long data_field_value {
                get {
                    return ((long)(this[this.tablesaved_requests_data_field.data_field_valueColumn]));
                }
                set {
                    this[this.tablesaved_requests_data_field.data_field_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] long_data_field_value {
                get {
                    try {
                        return ((byte[])(this[this.tablesaved_requests_data_field.long_data_field_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'long_data_field_value\' na tabela \'saved_requests_data_field\' é" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablesaved_requests_data_field.long_data_field_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islong_data_field_valueNull() {
                return this.IsNull(this.tablesaved_requests_data_field.long_data_field_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlong_data_field_valueNull() {
                this[this.tablesaved_requests_data_field.long_data_field_valueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class servicesRow : global::System.Data.DataRow {
            
            private servicesDataTable tableservices;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal servicesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableservices = ((servicesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_type {
                get {
                    return ((int)(this[this.tableservices.service_typeColumn]));
                }
                set {
                    this[this.tableservices.service_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string service_name {
                get {
                    return ((string)(this[this.tableservices.service_nameColumn]));
                }
                set {
                    this[this.tableservices.service_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRow[] GetsubtypesRows() {
                if ((this.Table.ChildRelations["FK_subtypes_services"] == null)) {
                    return new subtypesRow[0];
                }
                else {
                    return ((subtypesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_subtypes_services"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sessionsRow : global::System.Data.DataRow {
            
            private sessionsDataTable tablesessions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sessionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesessions = ((sessionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int session_id {
                get {
                    return ((int)(this[this.tablesessions.session_idColumn]));
                }
                set {
                    this[this.tablesessions.session_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start_time {
                get {
                    return ((global::System.DateTime)(this[this.tablesessions.start_timeColumn]));
                }
                set {
                    this[this.tablesessions.start_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime end_time {
                get {
                    return ((global::System.DateTime)(this[this.tablesessions.end_timeColumn]));
                }
                set {
                    this[this.tablesessions.end_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connection_type {
                get {
                    return ((string)(this[this.tablesessions.connection_typeColumn]));
                }
                set {
                    this[this.tablesessions.connection_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRow[] Getpackets_logRows() {
                if ((this.Table.ChildRelations["FK_packets_log_sessions"] == null)) {
                    return new packets_logRow[0];
                }
                else {
                    return ((packets_logRow[])(base.GetChildRows(this.Table.ChildRelations["FK_packets_log_sessions"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class subtype_structureRow : global::System.Data.DataRow {
            
            private subtype_structureDataTable tablesubtype_structure;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal subtype_structureRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesubtype_structure = ((subtype_structureDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_type {
                get {
                    return ((int)(this[this.tablesubtype_structure.service_typeColumn]));
                }
                set {
                    this[this.tablesubtype_structure.service_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_subtype {
                get {
                    return ((int)(this[this.tablesubtype_structure.service_subtypeColumn]));
                }
                set {
                    this[this.tablesubtype_structure.service_subtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int data_field_id {
                get {
                    return ((int)(this[this.tablesubtype_structure.data_field_idColumn]));
                }
                set {
                    this[this.tablesubtype_structure.data_field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int position {
                get {
                    return ((int)(this[this.tablesubtype_structure.positionColumn]));
                }
                set {
                    this[this.tablesubtype_structure.positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int same_as_subtype {
                get {
                    try {
                        return ((int)(this[this.tablesubtype_structure.same_as_subtypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'same_as_subtype\' na tabela \'subtype_structure\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesubtype_structure.same_as_subtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool read_only {
                get {
                    return ((bool)(this[this.tablesubtype_structure.read_onlyColumn]));
                }
                set {
                    this[this.tablesubtype_structure.read_onlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int default_value {
                get {
                    try {
                        return ((int)(this[this.tablesubtype_structure.default_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'default_value\' na tabela \'subtype_structure\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesubtype_structure.default_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow data_fieldsRow {
                get {
                    return ((data_fieldsRow)(this.GetParentRow(this.Table.ParentRelations["FK_subtype_structure_data_fields"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_subtype_structure_data_fields"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRow subtypesRowParent {
                get {
                    return ((subtypesRow)(this.GetParentRow(this.Table.ParentRelations["FK_subtype_structure_subtypes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_subtype_structure_subtypes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issame_as_subtypeNull() {
                return this.IsNull(this.tablesubtype_structure.same_as_subtypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsame_as_subtypeNull() {
                this[this.tablesubtype_structure.same_as_subtypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdefault_valueNull() {
                return this.IsNull(this.tablesubtype_structure.default_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdefault_valueNull() {
                this[this.tablesubtype_structure.default_valueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class subtypesRow : global::System.Data.DataRow {
            
            private subtypesDataTable tablesubtypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal subtypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesubtypes = ((subtypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_type {
                get {
                    return ((int)(this[this.tablesubtypes.service_typeColumn]));
                }
                set {
                    this[this.tablesubtypes.service_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_subtype {
                get {
                    return ((int)(this[this.tablesubtypes.service_subtypeColumn]));
                }
                set {
                    this[this.tablesubtypes.service_subtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tablesubtypes.descriptionColumn]));
                }
                set {
                    this[this.tablesubtypes.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool is_request {
                get {
                    return ((bool)(this[this.tablesubtypes.is_requestColumn]));
                }
                set {
                    this[this.tablesubtypes.is_requestColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool allow_repetition {
                get {
                    return ((bool)(this[this.tablesubtypes.allow_repetitionColumn]));
                }
                set {
                    this[this.tablesubtypes.allow_repetitionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesRow servicesRow {
                get {
                    return ((servicesRow)(this.GetParentRow(this.Table.ParentRelations["FK_subtypes_services"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_subtypes_services"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRow[] Getsubtype_structureRows() {
                if ((this.Table.ChildRelations["FK_subtype_structure_subtypes"] == null)) {
                    return new subtype_structureRow[0];
                }
                else {
                    return ((subtype_structureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_subtype_structure_subtypes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tc_failure_code_structureRow : global::System.Data.DataRow {
            
            private tc_failure_code_structureDataTable tabletc_failure_code_structure;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tc_failure_code_structureRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletc_failure_code_structure = ((tc_failure_code_structureDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tc_failure_code {
                get {
                    return ((int)(this[this.tabletc_failure_code_structure.tc_failure_codeColumn]));
                }
                set {
                    this[this.tabletc_failure_code_structure.tc_failure_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int data_field_id {
                get {
                    return ((int)(this[this.tabletc_failure_code_structure.data_field_idColumn]));
                }
                set {
                    this[this.tabletc_failure_code_structure.data_field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int position {
                get {
                    return ((int)(this[this.tabletc_failure_code_structure.positionColumn]));
                }
                set {
                    this[this.tabletc_failure_code_structure.positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesRow tc_failure_codesRow {
                get {
                    return ((tc_failure_codesRow)(this.GetParentRow(this.Table.ParentRelations["FK_tc_failure_code_structure_tc_failure_codes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_tc_failure_code_structure_tc_failure_codes"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tc_failure_codesRow : global::System.Data.DataRow {
            
            private tc_failure_codesDataTable tabletc_failure_codes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tc_failure_codesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletc_failure_codes = ((tc_failure_codesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tc_failure_code {
                get {
                    return ((int)(this[this.tabletc_failure_codes.tc_failure_codeColumn]));
                }
                set {
                    this[this.tabletc_failure_codes.tc_failure_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tc_failure_description {
                get {
                    return ((string)(this[this.tabletc_failure_codes.tc_failure_descriptionColumn]));
                }
                set {
                    this[this.tabletc_failure_codes.tc_failure_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureRow[] Gettc_failure_code_structureRows() {
                if ((this.Table.ChildRelations["FK_tc_failure_code_structure_tc_failure_codes"] == null)) {
                    return new tc_failure_code_structureRow[0];
                }
                else {
                    return ((tc_failure_code_structureRow[])(base.GetChildRows(this.Table.ChildRelations["FK_tc_failure_code_structure_tc_failure_codes"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class test_procedure_stepsRow : global::System.Data.DataRow {
            
            private test_procedure_stepsDataTable tabletest_procedure_steps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_procedure_stepsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletest_procedure_steps = ((test_procedure_stepsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int procedure_id {
                get {
                    return ((int)(this[this.tabletest_procedure_steps.procedure_idColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.procedure_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int position {
                get {
                    return ((int)(this[this.tabletest_procedure_steps.positionColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.positionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int saved_request_id {
                get {
                    return ((int)(this[this.tabletest_procedure_steps.saved_request_idColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.saved_request_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inner_procedure_id {
                get {
                    return ((int)(this[this.tabletest_procedure_steps.inner_procedure_idColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.inner_procedure_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal time_delay {
                get {
                    return ((decimal)(this[this.tabletest_procedure_steps.time_delayColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.time_delayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool verify_execution {
                get {
                    return ((bool)(this[this.tabletest_procedure_steps.verify_executionColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.verify_executionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string verify_condition {
                get {
                    return ((string)(this[this.tabletest_procedure_steps.verify_conditionColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.verify_conditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int report_type {
                get {
                    try {
                        return ((int)(this[this.tabletest_procedure_steps.report_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'report_type\' na tabela \'test_procedure_steps\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tabletest_procedure_steps.report_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int report_subtype {
                get {
                    try {
                        return ((int)(this[this.tabletest_procedure_steps.report_subtypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'report_subtype\' na tabela \'test_procedure_steps\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tabletest_procedure_steps.report_subtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int data_field_id {
                get {
                    try {
                        return ((int)(this[this.tabletest_procedure_steps.data_field_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'data_field_id\' na tabela \'test_procedure_steps\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tabletest_procedure_steps.data_field_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comparison_operation {
                get {
                    return ((string)(this[this.tabletest_procedure_steps.comparison_operationColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.comparison_operationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal value_to_compare {
                get {
                    return ((decimal)(this[this.tabletest_procedure_steps.value_to_compareColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.value_to_compareColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal verify_interval_start {
                get {
                    return ((decimal)(this[this.tabletest_procedure_steps.verify_interval_startColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.verify_interval_startColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal verify_interval_end {
                get {
                    return ((decimal)(this[this.tabletest_procedure_steps.verify_interval_endColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps.verify_interval_endColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow data_fieldsRow {
                get {
                    return ((data_fieldsRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_procedure_steps_data_fields"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_procedure_steps_data_fields"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRow saved_requestsRow {
                get {
                    return ((saved_requestsRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_procedure_steps_saved_requests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_procedure_steps_saved_requests"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow test_proceduresRow {
                get {
                    return ((test_proceduresRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_procedure_steps_test_procedures"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_procedure_steps_test_procedures"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isreport_typeNull() {
                return this.IsNull(this.tabletest_procedure_steps.report_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setreport_typeNull() {
                this[this.tabletest_procedure_steps.report_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isreport_subtypeNull() {
                return this.IsNull(this.tabletest_procedure_steps.report_subtypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setreport_subtypeNull() {
                this[this.tabletest_procedure_steps.report_subtypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdata_field_idNull() {
                return this.IsNull(this.tabletest_procedure_steps.data_field_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdata_field_idNull() {
                this[this.tabletest_procedure_steps.data_field_idColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class test_procedure_steps_executionRow : global::System.Data.DataRow {
            
            private test_procedure_steps_executionDataTable tabletest_procedure_steps_execution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_procedure_steps_executionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletest_procedure_steps_execution = ((test_procedure_steps_executionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int execution_id {
                get {
                    return ((int)(this[this.tabletest_procedure_steps_execution.execution_idColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps_execution.execution_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int procedure_id {
                get {
                    return ((int)(this[this.tabletest_procedure_steps_execution.procedure_idColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps_execution.procedure_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int saved_request_id {
                get {
                    return ((int)(this[this.tabletest_procedure_steps_execution.saved_request_idColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps_execution.saved_request_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int iteration {
                get {
                    return ((int)(this[this.tabletest_procedure_steps_execution.iterationColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps_execution.iterationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    return ((string)(this[this.tabletest_procedure_steps_execution.statusColumn]));
                }
                set {
                    this[this.tabletest_procedure_steps_execution.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRow saved_requestsRow {
                get {
                    return ((saved_requestsRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_procedure_steps_execution_saved_requests"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_procedure_steps_execution_saved_requests"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow test_proceduresRow {
                get {
                    return ((test_proceduresRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_procedure_steps_execution_test_procedures"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_procedure_steps_execution_test_procedures"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class test_proceduresRow : global::System.Data.DataRow {
            
            private test_proceduresDataTable tabletest_procedures;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_proceduresRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletest_procedures = ((test_proceduresDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int procedure_id {
                get {
                    return ((int)(this[this.tabletest_procedures.procedure_idColumn]));
                }
                set {
                    this[this.tabletest_procedures.procedure_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    return ((string)(this[this.tabletest_procedures.descriptionColumn]));
                }
                set {
                    this[this.tabletest_procedures.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string purpose {
                get {
                    return ((string)(this[this.tabletest_procedures.purposeColumn]));
                }
                set {
                    this[this.tabletest_procedures.purposeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int estimated_duration {
                get {
                    return ((int)(this[this.tabletest_procedures.estimated_durationColumn]));
                }
                set {
                    this[this.tabletest_procedures.estimated_durationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool synchronize_obt {
                get {
                    return ((bool)(this[this.tabletest_procedures.synchronize_obtColumn]));
                }
                set {
                    this[this.tabletest_procedures.synchronize_obtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool get_cpu_usage {
                get {
                    return ((bool)(this[this.tabletest_procedures.get_cpu_usageColumn]));
                }
                set {
                    this[this.tabletest_procedures.get_cpu_usageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool run_in_loop {
                get {
                    return ((bool)(this[this.tabletest_procedures.run_in_loopColumn]));
                }
                set {
                    this[this.tabletest_procedures.run_in_loopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int loop_iterations {
                get {
                    return ((int)(this[this.tabletest_procedures.loop_iterationsColumn]));
                }
                set {
                    this[this.tabletest_procedures.loop_iterationsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool send_mail {
                get {
                    return ((bool)(this[this.tabletest_procedures.send_mailColumn]));
                }
                set {
                    this[this.tabletest_procedures.send_mailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string packets_sequence_control_options {
                get {
                    return ((string)(this[this.tabletest_procedures.packets_sequence_control_optionsColumn]));
                }
                set {
                    this[this.tabletest_procedures.packets_sequence_control_optionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool executed {
                get {
                    return ((bool)(this[this.tabletest_procedures.executedColumn]));
                }
                set {
                    this[this.tabletest_procedures.executedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow[] Gettest_procedure_stepsRows() {
                if ((this.Table.ChildRelations["FK_test_procedure_steps_test_procedures"] == null)) {
                    return new test_procedure_stepsRow[0];
                }
                else {
                    return ((test_procedure_stepsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_procedure_steps_test_procedures"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRow[] Gettest_procedure_steps_executionRows() {
                if ((this.Table.ChildRelations["FK_test_procedure_steps_execution_test_procedures"] == null)) {
                    return new test_procedure_steps_executionRow[0];
                }
                else {
                    return ((test_procedure_steps_executionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_procedure_steps_execution_test_procedures"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionRow[] Gettest_procedures_executionRows() {
                if ((this.Table.ChildRelations["FK_test_procedures_execution_test_procedures"] == null)) {
                    return new test_procedures_executionRow[0];
                }
                else {
                    return ((test_procedures_executionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_test_procedures_execution_test_procedures"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class test_procedures_executionRow : global::System.Data.DataRow {
            
            private test_procedures_executionDataTable tabletest_procedures_execution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal test_procedures_executionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletest_procedures_execution = ((test_procedures_executionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int execution_id {
                get {
                    return ((int)(this[this.tabletest_procedures_execution.execution_idColumn]));
                }
                set {
                    this[this.tabletest_procedures_execution.execution_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int procedure_id {
                get {
                    return ((int)(this[this.tabletest_procedures_execution.procedure_idColumn]));
                }
                set {
                    this[this.tabletest_procedures_execution.procedure_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start_time {
                get {
                    return ((global::System.DateTime)(this[this.tabletest_procedures_execution.start_timeColumn]));
                }
                set {
                    this[this.tabletest_procedures_execution.start_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime end_time {
                get {
                    return ((global::System.DateTime)(this[this.tabletest_procedures_execution.end_timeColumn]));
                }
                set {
                    this[this.tabletest_procedures_execution.end_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int execution_time {
                get {
                    return ((int)(this[this.tabletest_procedures_execution.execution_timeColumn]));
                }
                set {
                    this[this.tabletest_procedures_execution.execution_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int executed_loop_iterations {
                get {
                    return ((int)(this[this.tabletest_procedures_execution.executed_loop_iterationsColumn]));
                }
                set {
                    this[this.tabletest_procedures_execution.executed_loop_iterationsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    return ((string)(this[this.tabletest_procedures_execution.statusColumn]));
                }
                set {
                    this[this.tabletest_procedures_execution.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow test_proceduresRow {
                get {
                    return ((test_proceduresRow)(this.GetParentRow(this.Table.ParentRelations["FK_test_procedures_execution_test_procedures"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_test_procedures_execution_test_procedures"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sp_test_sessions_logRow : global::System.Data.DataRow {
            
            private sp_test_sessions_logDataTable tablesp_test_sessions_log;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_test_sessions_logRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesp_test_sessions_log = ((sp_test_sessions_logDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Log_Time {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.Log_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'Log Time\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.Log_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Packet_Type {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.Packet_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'Packet Type\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.Packet_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APIDX {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.APIDXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'APIDX\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.APIDXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SSC {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log.SSCColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.SSCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Service_Type {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.Service_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'Service Type\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.Service_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Service_Subtype {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.Service_SubtypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'Service Subtype\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.Service_SubtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Time_Tag {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.Time_TagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'Time Tag\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.Time_TagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CRC {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.CRCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'CRC\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.CRCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reception_Ack {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.Reception_AckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'Reception Ack\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.Reception_AckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Execution_Ack {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log.Execution_AckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'Execution Ack\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.Execution_AckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int session_id {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log.session_idColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.session_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime log_time {
                get {
                    return ((global::System.DateTime)(this[this.tablesp_test_sessions_log.log_timeColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.log_timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int apid {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log.apidColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.apidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_type {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log.service_typeColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.service_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int service_subtype {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log.service_subtypeColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.service_subtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int unique_log_id {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log.unique_log_idColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.unique_log_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool allow_repetition {
                get {
                    try {
                        return ((bool)(this[this.tablesp_test_sessions_log.allow_repetitionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'allow_repetition\' na tabela \'sp_test_sessions_log\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log.allow_repetitionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int n_value {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log.n_valueColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.n_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] raw_packet {
                get {
                    return ((byte[])(this[this.tablesp_test_sessions_log.raw_packetColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log.raw_packetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLog_TimeNull() {
                return this.IsNull(this.tablesp_test_sessions_log.Log_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLog_TimeNull() {
                this[this.tablesp_test_sessions_log.Log_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPacket_TypeNull() {
                return this.IsNull(this.tablesp_test_sessions_log.Packet_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPacket_TypeNull() {
                this[this.tablesp_test_sessions_log.Packet_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPIDXNull() {
                return this.IsNull(this.tablesp_test_sessions_log.APIDXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPIDXNull() {
                this[this.tablesp_test_sessions_log.APIDXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsService_TypeNull() {
                return this.IsNull(this.tablesp_test_sessions_log.Service_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetService_TypeNull() {
                this[this.tablesp_test_sessions_log.Service_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsService_SubtypeNull() {
                return this.IsNull(this.tablesp_test_sessions_log.Service_SubtypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetService_SubtypeNull() {
                this[this.tablesp_test_sessions_log.Service_SubtypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTime_TagNull() {
                return this.IsNull(this.tablesp_test_sessions_log.Time_TagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTime_TagNull() {
                this[this.tablesp_test_sessions_log.Time_TagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCRCNull() {
                return this.IsNull(this.tablesp_test_sessions_log.CRCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCRCNull() {
                this[this.tablesp_test_sessions_log.CRCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReception_AckNull() {
                return this.IsNull(this.tablesp_test_sessions_log.Reception_AckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReception_AckNull() {
                this[this.tablesp_test_sessions_log.Reception_AckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecution_AckNull() {
                return this.IsNull(this.tablesp_test_sessions_log.Execution_AckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecution_AckNull() {
                this[this.tablesp_test_sessions_log.Execution_AckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isallow_repetitionNull() {
                return this.IsNull(this.tablesp_test_sessions_log.allow_repetitionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setallow_repetitionNull() {
                this[this.tablesp_test_sessions_log.allow_repetitionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sp_test_sessions_log_app_dataRow : global::System.Data.DataRow {
            
            private sp_test_sessions_log_app_dataDataTable tablesp_test_sessions_log_app_data;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sp_test_sessions_log_app_dataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesp_test_sessions_log_app_data = ((sp_test_sessions_log_app_dataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string data_field_name {
                get {
                    return ((string)(this[this.tablesp_test_sessions_log_app_data.data_field_nameColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log_app_data.data_field_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string value {
                get {
                    try {
                        return ((string)(this[this.tablesp_test_sessions_log_app_data.valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("O valor da coluna \'value\' na tabela \'sp_test_sessions_log_app_data\' é DBNull.", e);
                    }
                }
                set {
                    this[this.tablesp_test_sessions_log_app_data.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int number_of_bits {
                get {
                    return ((int)(this[this.tablesp_test_sessions_log_app_data.number_of_bitsColumn]));
                }
                set {
                    this[this.tablesp_test_sessions_log_app_data.number_of_bitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tablesp_test_sessions_log_app_data.valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tablesp_test_sessions_log_app_data.valueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class apidsRowChangeEvent : global::System.EventArgs {
            
            private apidsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public apidsRowChangeEvent(apidsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public apidsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class data_field_listsRowChangeEvent : global::System.EventArgs {
            
            private data_field_listsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsRowChangeEvent(data_field_listsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_listsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class data_field_lists_headerRowChangeEvent : global::System.EventArgs {
            
            private data_field_lists_headerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerRowChangeEvent(data_field_lists_headerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_field_lists_headerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class data_fieldsRowChangeEvent : global::System.EventArgs {
            
            private data_fieldsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRowChangeEvent(data_fieldsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public data_fieldsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class event_report_structureRowChangeEvent : global::System.EventArgs {
            
            private event_report_structureRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRowChangeEvent(event_report_structureRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public event_report_structureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class memory_idsRowChangeEvent : global::System.EventArgs {
            
            private memory_idsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memory_idsRowChangeEvent(memory_idsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public memory_idsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class mission_constantsRowChangeEvent : global::System.EventArgs {
            
            private mission_constantsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mission_constantsRowChangeEvent(mission_constantsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public mission_constantsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class output_line_idsRowChangeEvent : global::System.EventArgs {
            
            private output_line_idsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public output_line_idsRowChangeEvent(output_line_idsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public output_line_idsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class packet_store_idsRowChangeEvent : global::System.EventArgs {
            
            private packet_store_idsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packet_store_idsRowChangeEvent(packet_store_idsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packet_store_idsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class packets_logRowChangeEvent : global::System.EventArgs {
            
            private packets_logRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRowChangeEvent(packets_logRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_logRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class packets_log_data_fieldRowChangeEvent : global::System.EventArgs {
            
            private packets_log_data_fieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRowChangeEvent(packets_log_data_fieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public packets_log_data_fieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class parametersRowChangeEvent : global::System.EventArgs {
            
            private parametersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersRowChangeEvent(parametersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public parametersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class report_definition_structureRowChangeEvent : global::System.EventArgs {
            
            private report_definition_structureRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRowChangeEvent(report_definition_structureRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definition_structureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class report_definitionsRowChangeEvent : global::System.EventArgs {
            
            private report_definitionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsRowChangeEvent(report_definitionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public report_definitionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ridsRowChangeEvent : global::System.EventArgs {
            
            private ridsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsRowChangeEvent(ridsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ridsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class saved_requestsRowChangeEvent : global::System.EventArgs {
            
            private saved_requestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRowChangeEvent(saved_requestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class saved_requests_data_fieldRowChangeEvent : global::System.EventArgs {
            
            private saved_requests_data_fieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requests_data_fieldRowChangeEvent(saved_requests_data_fieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public saved_requests_data_fieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class servicesRowChangeEvent : global::System.EventArgs {
            
            private servicesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesRowChangeEvent(servicesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public servicesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sessionsRowChangeEvent : global::System.EventArgs {
            
            private sessionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsRowChangeEvent(sessionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sessionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class subtype_structureRowChangeEvent : global::System.EventArgs {
            
            private subtype_structureRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRowChangeEvent(subtype_structureRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtype_structureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class subtypesRowChangeEvent : global::System.EventArgs {
            
            private subtypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRowChangeEvent(subtypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public subtypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tc_failure_code_structureRowChangeEvent : global::System.EventArgs {
            
            private tc_failure_code_structureRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureRowChangeEvent(tc_failure_code_structureRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_code_structureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tc_failure_codesRowChangeEvent : global::System.EventArgs {
            
            private tc_failure_codesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesRowChangeEvent(tc_failure_codesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tc_failure_codesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class test_procedure_stepsRowChangeEvent : global::System.EventArgs {
            
            private test_procedure_stepsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRowChangeEvent(test_procedure_stepsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_stepsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class test_procedure_steps_executionRowChangeEvent : global::System.EventArgs {
            
            private test_procedure_steps_executionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRowChangeEvent(test_procedure_steps_executionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedure_steps_executionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class test_proceduresRowChangeEvent : global::System.EventArgs {
            
            private test_proceduresRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRowChangeEvent(test_proceduresRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_proceduresRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class test_procedures_executionRowChangeEvent : global::System.EventArgs {
            
            private test_procedures_executionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionRowChangeEvent(test_procedures_executionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public test_procedures_executionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sp_test_sessions_logRowChangeEvent : global::System.EventArgs {
            
            private sp_test_sessions_logRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_logRowChangeEvent(sp_test_sessions_logRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_logRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sp_test_sessions_log_app_dataRowChangeEvent : global::System.EventArgs {
            
            private sp_test_sessions_log_app_dataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_log_app_dataRowChangeEvent(sp_test_sessions_log_app_dataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sp_test_sessions_log_app_dataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Inpe.Subord.Comav.Egse.Smc.COMAV_EGSEDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class apidsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public apidsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "apids";
            tableMapping.ColumnMappings.Add("apid", "apid");
            tableMapping.ColumnMappings.Add("application_name", "application_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[apids] WHERE (([apid] = @Original_apid) AND ([application_name" +
                "] = @Original_application_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_application_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "application_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[apids] ([apid], [application_name]) VALUES (@apid, @applicatio" +
                "n_name);\r\nSELECT apid, application_name FROM apids WHERE (apid = @apid)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@application_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "application_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[apids] SET [apid] = @apid, [application_name] = @application_name W" +
                "HERE (([apid] = @Original_apid) AND ([application_name] = @Original_application_" +
                "name));\r\nSELECT apid, application_name FROM apids WHERE (apid = @apid)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@application_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "application_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_application_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "application_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT apid, application_name FROM dbo.apids";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.apidsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.apidsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.apidsDataTable dataTable = new COMAV_EGSEDataSet.apidsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.apidsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "apids");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_apid, string Original_application_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_apid));
            if ((Original_application_name == null)) {
                throw new global::System.ArgumentNullException("Original_application_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_application_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int apid, string application_name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(apid));
            if ((application_name == null)) {
                throw new global::System.ArgumentNullException("application_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(application_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int apid, string application_name, int Original_apid, string Original_application_name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(apid));
            if ((application_name == null)) {
                throw new global::System.ArgumentNullException("application_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(application_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_apid));
            if ((Original_application_name == null)) {
                throw new global::System.ArgumentNullException("Original_application_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_application_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string application_name, int Original_apid, string Original_application_name) {
            return this.Update(Original_apid, application_name, Original_apid, Original_application_name);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class data_field_listsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public data_field_listsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "data_field_lists";
            tableMapping.ColumnMappings.Add("list_id", "list_id");
            tableMapping.ColumnMappings.Add("list_value", "list_value");
            tableMapping.ColumnMappings.Add("list_text", "list_text");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[data_field_lists] WHERE (([list_id] = @Original_list_id) AND (" +
                "[list_value] = @Original_list_value) AND ([list_text] = @Original_list_text))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_text", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_text", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[data_field_lists] ([list_id], [list_value], [list_text]) VALUE" +
                "S (@list_id, @list_value, @list_text);\r\nSELECT list_id, list_value, list_text FR" +
                "OM data_field_lists WHERE (list_id = @list_id) AND (list_value = @list_value)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_text", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[data_field_lists] SET [list_id] = @list_id, [list_value] = @list_value, [list_text] = @list_text WHERE (([list_id] = @Original_list_id) AND ([list_value] = @Original_list_value) AND ([list_text] = @Original_list_text));
SELECT list_id, list_value, list_text FROM data_field_lists WHERE (list_id = @list_id) AND (list_value = @list_value)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_text", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_text", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_text", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT list_id, list_value, list_text FROM dbo.data_field_lists";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.data_field_listsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.data_field_listsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.data_field_listsDataTable dataTable = new COMAV_EGSEDataSet.data_field_listsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.data_field_listsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "data_field_lists");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_list_id, int Original_list_value, string Original_list_text) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_list_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_list_value));
            if ((Original_list_text == null)) {
                throw new global::System.ArgumentNullException("Original_list_text");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_list_text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int list_id, int list_value, string list_text) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(list_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(list_value));
            if ((list_text == null)) {
                throw new global::System.ArgumentNullException("list_text");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(list_text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int list_id, int list_value, string list_text, int Original_list_id, int Original_list_value, string Original_list_text) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(list_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(list_value));
            if ((list_text == null)) {
                throw new global::System.ArgumentNullException("list_text");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(list_text));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_list_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_list_value));
            if ((Original_list_text == null)) {
                throw new global::System.ArgumentNullException("Original_list_text");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_list_text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string list_text, int Original_list_id, int Original_list_value, string Original_list_text) {
            return this.Update(Original_list_id, Original_list_value, list_text, Original_list_id, Original_list_value, Original_list_text);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class data_field_lists_headerTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public data_field_lists_headerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "data_field_lists_header";
            tableMapping.ColumnMappings.Add("list_id", "list_id");
            tableMapping.ColumnMappings.Add("list_description", "list_description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[data_field_lists_header] WHERE (([list_id] = @Original_list_id" +
                ") AND ([list_description] = @Original_list_description))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[data_field_lists_header] ([list_id], [list_description]) VALUE" +
                "S (@list_id, @list_description);\r\nSELECT list_id, list_description FROM data_fie" +
                "ld_lists_header WHERE (list_id = @list_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[data_field_lists_header] SET [list_id] = @list_id, [list_description] = @list_description WHERE (([list_id] = @Original_list_id) AND ([list_description] = @Original_list_description));
SELECT list_id, list_description FROM data_field_lists_header WHERE (list_id = @list_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT list_id, list_description FROM dbo.data_field_lists_header";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.data_field_lists_headerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.data_field_lists_headerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.data_field_lists_headerDataTable dataTable = new COMAV_EGSEDataSet.data_field_lists_headerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.data_field_lists_headerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "data_field_lists_header");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_list_id, string Original_list_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_list_id));
            if ((Original_list_description == null)) {
                throw new global::System.ArgumentNullException("Original_list_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_list_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int list_id, string list_description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(list_id));
            if ((list_description == null)) {
                throw new global::System.ArgumentNullException("list_description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(list_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int list_id, string list_description, int Original_list_id, string Original_list_description) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(list_id));
            if ((list_description == null)) {
                throw new global::System.ArgumentNullException("list_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(list_description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_list_id));
            if ((Original_list_description == null)) {
                throw new global::System.ArgumentNullException("Original_list_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_list_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string list_description, int Original_list_id, string Original_list_description) {
            return this.Update(Original_list_id, list_description, Original_list_id, Original_list_description);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class data_fieldsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public data_fieldsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "data_fields";
            tableMapping.ColumnMappings.Add("data_field_id", "data_field_id");
            tableMapping.ColumnMappings.Add("data_field_name", "data_field_name");
            tableMapping.ColumnMappings.Add("type_is_bool", "type_is_bool");
            tableMapping.ColumnMappings.Add("type_is_numeric", "type_is_numeric");
            tableMapping.ColumnMappings.Add("type_is_raw_hex", "type_is_raw_hex");
            tableMapping.ColumnMappings.Add("type_is_list", "type_is_list");
            tableMapping.ColumnMappings.Add("type_is_table", "type_is_table");
            tableMapping.ColumnMappings.Add("list_id", "list_id");
            tableMapping.ColumnMappings.Add("table_name", "table_name");
            tableMapping.ColumnMappings.Add("number_of_bits", "number_of_bits");
            tableMapping.ColumnMappings.Add("variable_length", "variable_length");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[data_fields] WHERE (([data_field_id] = @Original_data_field_id) AND ([data_field_name] = @Original_data_field_name) AND ([type_is_bool] = @Original_type_is_bool) AND ([type_is_numeric] = @Original_type_is_numeric) AND ([type_is_raw_hex] = @Original_type_is_raw_hex) AND ([type_is_list] = @Original_type_is_list) AND ([type_is_table] = @Original_type_is_table) AND ((@IsNull_list_id = 1 AND [list_id] IS NULL) OR ([list_id] = @Original_list_id)) AND ((@IsNull_table_name = 1 AND [table_name] IS NULL) OR ([table_name] = @Original_table_name)) AND ([number_of_bits] = @Original_number_of_bits) AND ([variable_length] = @Original_variable_length))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_bool", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_bool", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_numeric", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_numeric", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_raw_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_raw_hex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_list", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_list", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_table", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_table", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_table_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_number_of_bits", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "number_of_bits", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_variable_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "variable_length", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[data_fields] ([data_field_id], [data_field_name], [type_is_bool], [type_is_numeric], [type_is_raw_hex], [type_is_list], [type_is_table], [list_id], [table_name], [number_of_bits], [variable_length]) VALUES (@data_field_id, @data_field_name, @type_is_bool, @type_is_numeric, @type_is_raw_hex, @type_is_list, @type_is_table, @list_id, @table_name, @number_of_bits, @variable_length);
SELECT data_field_id, data_field_name, type_is_bool, type_is_numeric, type_is_raw_hex, type_is_list, type_is_table, list_id, table_name, number_of_bits, variable_length FROM data_fields WHERE (data_field_id = @data_field_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_bool", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_bool", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_numeric", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_numeric", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_raw_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_raw_hex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_list", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_list", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_table", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_table", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@number_of_bits", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "number_of_bits", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@variable_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "variable_length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[data_fields] SET [data_field_id] = @data_field_id, [data_field_name] = @data_field_name, [type_is_bool] = @type_is_bool, [type_is_numeric] = @type_is_numeric, [type_is_raw_hex] = @type_is_raw_hex, [type_is_list] = @type_is_list, [type_is_table] = @type_is_table, [list_id] = @list_id, [table_name] = @table_name, [number_of_bits] = @number_of_bits, [variable_length] = @variable_length WHERE (([data_field_id] = @Original_data_field_id) AND ([data_field_name] = @Original_data_field_name) AND ([type_is_bool] = @Original_type_is_bool) AND ([type_is_numeric] = @Original_type_is_numeric) AND ([type_is_raw_hex] = @Original_type_is_raw_hex) AND ([type_is_list] = @Original_type_is_list) AND ([type_is_table] = @Original_type_is_table) AND ((@IsNull_list_id = 1 AND [list_id] IS NULL) OR ([list_id] = @Original_list_id)) AND ((@IsNull_table_name = 1 AND [table_name] IS NULL) OR ([table_name] = @Original_table_name)) AND ([number_of_bits] = @Original_number_of_bits) AND ([variable_length] = @Original_variable_length));
SELECT data_field_id, data_field_name, type_is_bool, type_is_numeric, type_is_raw_hex, type_is_list, type_is_table, list_id, table_name, number_of_bits, variable_length FROM data_fields WHERE (data_field_id = @data_field_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_bool", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_bool", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_numeric", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_numeric", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_raw_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_raw_hex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_list", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_list", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type_is_table", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_table", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@table_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@number_of_bits", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "number_of_bits", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@variable_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "variable_length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_bool", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_bool", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_numeric", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_numeric", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_raw_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_raw_hex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_list", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_list", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_type_is_table", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "type_is_table", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_list_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "list_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_table_name", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_table_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "table_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_number_of_bits", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "number_of_bits", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_variable_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "variable_length", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT data_field_id, data_field_name, type_is_bool, type_is_numeric, type_is_raw" +
                "_hex, type_is_list, type_is_table, list_id, table_name, number_of_bits, variable" +
                "_length FROM dbo.data_fields";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.data_fieldsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.data_fieldsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.data_fieldsDataTable dataTable = new COMAV_EGSEDataSet.data_fieldsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.data_fieldsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "data_fields");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_data_field_id, string Original_data_field_name, bool Original_type_is_bool, bool Original_type_is_numeric, bool Original_type_is_raw_hex, bool Original_type_is_list, bool Original_type_is_table, global::System.Nullable<int> Original_list_id, string Original_table_name, int Original_number_of_bits, bool Original_variable_length) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_data_field_id));
            if ((Original_data_field_name == null)) {
                throw new global::System.ArgumentNullException("Original_data_field_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_data_field_name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_type_is_bool));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_type_is_numeric));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_type_is_raw_hex));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_type_is_list));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_type_is_table));
            if ((Original_list_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_list_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_table_name == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_table_name));
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_number_of_bits));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((bool)(Original_variable_length));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int data_field_id, string data_field_name, bool type_is_bool, bool type_is_numeric, bool type_is_raw_hex, bool type_is_list, bool type_is_table, global::System.Nullable<int> list_id, string table_name, int number_of_bits, bool variable_length) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(data_field_id));
            if ((data_field_name == null)) {
                throw new global::System.ArgumentNullException("data_field_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(data_field_name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(type_is_bool));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(type_is_numeric));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(type_is_raw_hex));
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(type_is_list));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(type_is_table));
            if ((list_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(list_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((table_name == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(table_name));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(number_of_bits));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(variable_length));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int data_field_id, 
                    string data_field_name, 
                    bool type_is_bool, 
                    bool type_is_numeric, 
                    bool type_is_raw_hex, 
                    bool type_is_list, 
                    bool type_is_table, 
                    global::System.Nullable<int> list_id, 
                    string table_name, 
                    int number_of_bits, 
                    bool variable_length, 
                    int Original_data_field_id, 
                    string Original_data_field_name, 
                    bool Original_type_is_bool, 
                    bool Original_type_is_numeric, 
                    bool Original_type_is_raw_hex, 
                    bool Original_type_is_list, 
                    bool Original_type_is_table, 
                    global::System.Nullable<int> Original_list_id, 
                    string Original_table_name, 
                    int Original_number_of_bits, 
                    bool Original_variable_length) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(data_field_id));
            if ((data_field_name == null)) {
                throw new global::System.ArgumentNullException("data_field_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(data_field_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(type_is_bool));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(type_is_numeric));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(type_is_raw_hex));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(type_is_list));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(type_is_table));
            if ((list_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(list_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((table_name == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(table_name));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(number_of_bits));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(variable_length));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_data_field_id));
            if ((Original_data_field_name == null)) {
                throw new global::System.ArgumentNullException("Original_data_field_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_data_field_name));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_type_is_bool));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(Original_type_is_numeric));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_type_is_raw_hex));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((bool)(Original_type_is_list));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(Original_type_is_table));
            if ((Original_list_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_list_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_table_name == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_table_name));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_number_of_bits));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(Original_variable_length));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string data_field_name, 
                    bool type_is_bool, 
                    bool type_is_numeric, 
                    bool type_is_raw_hex, 
                    bool type_is_list, 
                    bool type_is_table, 
                    global::System.Nullable<int> list_id, 
                    string table_name, 
                    int number_of_bits, 
                    bool variable_length, 
                    int Original_data_field_id, 
                    string Original_data_field_name, 
                    bool Original_type_is_bool, 
                    bool Original_type_is_numeric, 
                    bool Original_type_is_raw_hex, 
                    bool Original_type_is_list, 
                    bool Original_type_is_table, 
                    global::System.Nullable<int> Original_list_id, 
                    string Original_table_name, 
                    int Original_number_of_bits, 
                    bool Original_variable_length) {
            return this.Update(Original_data_field_id, data_field_name, type_is_bool, type_is_numeric, type_is_raw_hex, type_is_list, type_is_table, list_id, table_name, number_of_bits, variable_length, Original_data_field_id, Original_data_field_name, Original_type_is_bool, Original_type_is_numeric, Original_type_is_raw_hex, Original_type_is_list, Original_type_is_table, Original_list_id, Original_table_name, Original_number_of_bits, Original_variable_length);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class event_report_structureTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public event_report_structureTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "event_report_structure";
            tableMapping.ColumnMappings.Add("rid", "rid");
            tableMapping.ColumnMappings.Add("data_field_id", "data_field_id");
            tableMapping.ColumnMappings.Add("position", "position");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[event_report_structure] WHERE (([rid] = @Original_rid) AND ([d" +
                "ata_field_id] = @Original_data_field_id) AND ([position] = @Original_position))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[event_report_structure] ([rid], [data_field_id], [position]) VALUES (@rid, @data_field_id, @position);
SELECT rid, data_field_id, position FROM event_report_structure WHERE (data_field_id = @data_field_id) AND (position = @position) AND (rid = @rid)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[event_report_structure] SET [rid] = @rid, [data_field_id] = @data_field_id, [position] = @position WHERE (([rid] = @Original_rid) AND ([data_field_id] = @Original_data_field_id) AND ([position] = @Original_position));
SELECT rid, data_field_id, position FROM event_report_structure WHERE (data_field_id = @data_field_id) AND (position = @position) AND (rid = @rid)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT rid, data_field_id, position FROM dbo.event_report_structure";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.event_report_structureDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.event_report_structureDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.event_report_structureDataTable dataTable = new COMAV_EGSEDataSet.event_report_structureDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.event_report_structureDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "event_report_structure");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_rid, int Original_data_field_id, int Original_position) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_rid));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_data_field_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int rid, int data_field_id, int position) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(rid));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(data_field_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int rid, int data_field_id, int position, int Original_rid, int Original_data_field_id, int Original_position) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(rid));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(data_field_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(position));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_rid));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_data_field_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Original_rid, int Original_data_field_id, int Original_position) {
            return this.Update(Original_rid, Original_data_field_id, Original_position, Original_rid, Original_data_field_id, Original_position);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class memory_idsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public memory_idsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "memory_ids";
            tableMapping.ColumnMappings.Add("memory_id", "memory_id");
            tableMapping.ColumnMappings.Add("memory_unit_description", "memory_unit_description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[memory_ids] WHERE (([memory_id] = @Original_memory_id) AND ([m" +
                "emory_unit_description] = @Original_memory_unit_description))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_memory_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_memory_unit_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_unit_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[memory_ids] ([memory_id], [memory_unit_description]) VALUES (@" +
                "memory_id, @memory_unit_description);\r\nSELECT memory_id, memory_unit_description" +
                " FROM memory_ids WHERE (memory_id = @memory_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@memory_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@memory_unit_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_unit_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[memory_ids] SET [memory_id] = @memory_id, [memory_unit_description] = @memory_unit_description WHERE (([memory_id] = @Original_memory_id) AND ([memory_unit_description] = @Original_memory_unit_description));
SELECT memory_id, memory_unit_description FROM memory_ids WHERE (memory_id = @memory_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@memory_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@memory_unit_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_unit_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_memory_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_memory_unit_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "memory_unit_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT memory_id, memory_unit_description FROM dbo.memory_ids";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.memory_idsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.memory_idsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.memory_idsDataTable dataTable = new COMAV_EGSEDataSet.memory_idsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.memory_idsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "memory_ids");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_memory_id, string Original_memory_unit_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_memory_id));
            if ((Original_memory_unit_description == null)) {
                throw new global::System.ArgumentNullException("Original_memory_unit_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_memory_unit_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int memory_id, string memory_unit_description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(memory_id));
            if ((memory_unit_description == null)) {
                throw new global::System.ArgumentNullException("memory_unit_description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(memory_unit_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int memory_id, string memory_unit_description, int Original_memory_id, string Original_memory_unit_description) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(memory_id));
            if ((memory_unit_description == null)) {
                throw new global::System.ArgumentNullException("memory_unit_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(memory_unit_description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_memory_id));
            if ((Original_memory_unit_description == null)) {
                throw new global::System.ArgumentNullException("Original_memory_unit_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_memory_unit_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string memory_unit_description, int Original_memory_id, string Original_memory_unit_description) {
            return this.Update(Original_memory_id, memory_unit_description, Original_memory_id, Original_memory_unit_description);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class mission_constantsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mission_constantsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "mission_constants";
            tableMapping.ColumnMappings.Add("mission_constant", "mission_constant");
            tableMapping.ColumnMappings.Add("constant_description", "constant_description");
            tableMapping.ColumnMappings.Add("defined_in", "defined_in");
            tableMapping.ColumnMappings.Add("constant_value", "constant_value");
            tableMapping.ColumnMappings.Add("is_flight_sw_constant", "is_flight_sw_constant");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[mission_constants] WHERE (([mission_constant] = @Original_mission_constant) AND ([constant_description] = @Original_constant_description) AND ([defined_in] = @Original_defined_in) AND ([constant_value] = @Original_constant_value) AND ([is_flight_sw_constant] = @Original_is_flight_sw_constant))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mission_constant", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mission_constant", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_constant_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_defined_in", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defined_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_constant_value", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_flight_sw_constant", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_flight_sw_constant", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[mission_constants] ([mission_constant], [constant_description], [defined_in], [constant_value], [is_flight_sw_constant]) VALUES (@mission_constant, @constant_description, @defined_in, @constant_value, @is_flight_sw_constant);
SELECT mission_constant, constant_description, defined_in, constant_value, is_flight_sw_constant FROM mission_constants WHERE (mission_constant = @mission_constant)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mission_constant", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mission_constant", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@constant_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@defined_in", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defined_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@constant_value", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_flight_sw_constant", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_flight_sw_constant", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[mission_constants] SET [mission_constant] = @mission_constant, [constant_description] = @constant_description, [defined_in] = @defined_in, [constant_value] = @constant_value, [is_flight_sw_constant] = @is_flight_sw_constant WHERE (([mission_constant] = @Original_mission_constant) AND ([constant_description] = @Original_constant_description) AND ([defined_in] = @Original_defined_in) AND ([constant_value] = @Original_constant_value) AND ([is_flight_sw_constant] = @Original_is_flight_sw_constant));
SELECT mission_constant, constant_description, defined_in, constant_value, is_flight_sw_constant FROM mission_constants WHERE (mission_constant = @mission_constant)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mission_constant", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mission_constant", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@constant_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@defined_in", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defined_in", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@constant_value", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_flight_sw_constant", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_flight_sw_constant", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_mission_constant", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mission_constant", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_constant_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_defined_in", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "defined_in", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_constant_value", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "constant_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_flight_sw_constant", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_flight_sw_constant", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT mission_constant, constant_description, defined_in, constant_value, is_fli" +
                "ght_sw_constant FROM dbo.mission_constants";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.mission_constantsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.mission_constantsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.mission_constantsDataTable dataTable = new COMAV_EGSEDataSet.mission_constantsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.mission_constantsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "mission_constants");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_mission_constant, string Original_constant_description, string Original_defined_in, string Original_constant_value, bool Original_is_flight_sw_constant) {
            if ((Original_mission_constant == null)) {
                throw new global::System.ArgumentNullException("Original_mission_constant");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_mission_constant));
            }
            if ((Original_constant_description == null)) {
                throw new global::System.ArgumentNullException("Original_constant_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_constant_description));
            }
            if ((Original_defined_in == null)) {
                throw new global::System.ArgumentNullException("Original_defined_in");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_defined_in));
            }
            if ((Original_constant_value == null)) {
                throw new global::System.ArgumentNullException("Original_constant_value");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_constant_value));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_is_flight_sw_constant));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string mission_constant, string constant_description, string defined_in, string constant_value, bool is_flight_sw_constant) {
            if ((mission_constant == null)) {
                throw new global::System.ArgumentNullException("mission_constant");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(mission_constant));
            }
            if ((constant_description == null)) {
                throw new global::System.ArgumentNullException("constant_description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(constant_description));
            }
            if ((defined_in == null)) {
                throw new global::System.ArgumentNullException("defined_in");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(defined_in));
            }
            if ((constant_value == null)) {
                throw new global::System.ArgumentNullException("constant_value");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(constant_value));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(is_flight_sw_constant));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string mission_constant, string constant_description, string defined_in, string constant_value, bool is_flight_sw_constant, string Original_mission_constant, string Original_constant_description, string Original_defined_in, string Original_constant_value, bool Original_is_flight_sw_constant) {
            if ((mission_constant == null)) {
                throw new global::System.ArgumentNullException("mission_constant");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(mission_constant));
            }
            if ((constant_description == null)) {
                throw new global::System.ArgumentNullException("constant_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(constant_description));
            }
            if ((defined_in == null)) {
                throw new global::System.ArgumentNullException("defined_in");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(defined_in));
            }
            if ((constant_value == null)) {
                throw new global::System.ArgumentNullException("constant_value");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(constant_value));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(is_flight_sw_constant));
            if ((Original_mission_constant == null)) {
                throw new global::System.ArgumentNullException("Original_mission_constant");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_mission_constant));
            }
            if ((Original_constant_description == null)) {
                throw new global::System.ArgumentNullException("Original_constant_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_constant_description));
            }
            if ((Original_defined_in == null)) {
                throw new global::System.ArgumentNullException("Original_defined_in");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_defined_in));
            }
            if ((Original_constant_value == null)) {
                throw new global::System.ArgumentNullException("Original_constant_value");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_constant_value));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_is_flight_sw_constant));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string constant_description, string defined_in, string constant_value, bool is_flight_sw_constant, string Original_mission_constant, string Original_constant_description, string Original_defined_in, string Original_constant_value, bool Original_is_flight_sw_constant) {
            return this.Update(Original_mission_constant, constant_description, defined_in, constant_value, is_flight_sw_constant, Original_mission_constant, Original_constant_description, Original_defined_in, Original_constant_value, Original_is_flight_sw_constant);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class output_line_idsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public output_line_idsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "output_line_ids";
            tableMapping.ColumnMappings.Add("output_line_id", "output_line_id");
            tableMapping.ColumnMappings.Add("output_line_description", "output_line_description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[output_line_ids] WHERE (([output_line_id] = @Original_output_l" +
                "ine_id) AND ([output_line_description] = @Original_output_line_description))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_output_line_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_output_line_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[output_line_ids] ([output_line_id], [output_line_description])" +
                " VALUES (@output_line_id, @output_line_description);\r\nSELECT output_line_id, out" +
                "put_line_description FROM output_line_ids WHERE (output_line_id = @output_line_i" +
                "d)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@output_line_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@output_line_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[output_line_ids] SET [output_line_id] = @output_line_id, [output_line_description] = @output_line_description WHERE (([output_line_id] = @Original_output_line_id) AND ([output_line_description] = @Original_output_line_description));
SELECT output_line_id, output_line_description FROM output_line_ids WHERE (output_line_id = @output_line_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@output_line_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@output_line_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_output_line_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_output_line_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "output_line_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT output_line_id, output_line_description FROM dbo.output_line_ids";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.output_line_idsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.output_line_idsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.output_line_idsDataTable dataTable = new COMAV_EGSEDataSet.output_line_idsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.output_line_idsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "output_line_ids");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_output_line_id, string Original_output_line_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_output_line_id));
            if ((Original_output_line_description == null)) {
                throw new global::System.ArgumentNullException("Original_output_line_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_output_line_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int output_line_id, string output_line_description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(output_line_id));
            if ((output_line_description == null)) {
                throw new global::System.ArgumentNullException("output_line_description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(output_line_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int output_line_id, string output_line_description, int Original_output_line_id, string Original_output_line_description) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(output_line_id));
            if ((output_line_description == null)) {
                throw new global::System.ArgumentNullException("output_line_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(output_line_description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_output_line_id));
            if ((Original_output_line_description == null)) {
                throw new global::System.ArgumentNullException("Original_output_line_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_output_line_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string output_line_description, int Original_output_line_id, string Original_output_line_description) {
            return this.Update(Original_output_line_id, output_line_description, Original_output_line_id, Original_output_line_description);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class packet_store_idsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public packet_store_idsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "packet_store_ids";
            tableMapping.ColumnMappings.Add("store_id", "store_id");
            tableMapping.ColumnMappings.Add("packet_store_name", "packet_store_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[packet_store_ids] WHERE (([store_id] = @Original_store_id) AND" +
                " ([packet_store_name] = @Original_packet_store_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_store_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "store_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_packet_store_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packet_store_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[packet_store_ids] ([store_id], [packet_store_name]) VALUES (@s" +
                "tore_id, @packet_store_name);\r\nSELECT store_id, packet_store_name FROM packet_st" +
                "ore_ids WHERE (store_id = @store_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@store_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "store_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@packet_store_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packet_store_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[packet_store_ids] SET [store_id] = @store_id, [packet_store_name] = @packet_store_name WHERE (([store_id] = @Original_store_id) AND ([packet_store_name] = @Original_packet_store_name));
SELECT store_id, packet_store_name FROM packet_store_ids WHERE (store_id = @store_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@store_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "store_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@packet_store_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packet_store_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_store_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "store_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_packet_store_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packet_store_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT store_id, packet_store_name FROM dbo.packet_store_ids";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.packet_store_idsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.packet_store_idsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.packet_store_idsDataTable dataTable = new COMAV_EGSEDataSet.packet_store_idsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.packet_store_idsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "packet_store_ids");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_store_id, string Original_packet_store_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_store_id));
            if ((Original_packet_store_name == null)) {
                throw new global::System.ArgumentNullException("Original_packet_store_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_packet_store_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int store_id, string packet_store_name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(store_id));
            if ((packet_store_name == null)) {
                throw new global::System.ArgumentNullException("packet_store_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(packet_store_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int store_id, string packet_store_name, int Original_store_id, string Original_packet_store_name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(store_id));
            if ((packet_store_name == null)) {
                throw new global::System.ArgumentNullException("packet_store_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(packet_store_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_store_id));
            if ((Original_packet_store_name == null)) {
                throw new global::System.ArgumentNullException("Original_packet_store_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_packet_store_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string packet_store_name, int Original_store_id, string Original_packet_store_name) {
            return this.Update(Original_store_id, packet_store_name, Original_store_id, Original_packet_store_name);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class packets_logTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public packets_logTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "packets_log";
            tableMapping.ColumnMappings.Add("session_id", "session_id");
            tableMapping.ColumnMappings.Add("unique_log_id", "unique_log_id");
            tableMapping.ColumnMappings.Add("log_time", "log_time");
            tableMapping.ColumnMappings.Add("apid", "apid");
            tableMapping.ColumnMappings.Add("ssc", "ssc");
            tableMapping.ColumnMappings.Add("service_type", "service_type");
            tableMapping.ColumnMappings.Add("service_subtype", "service_subtype");
            tableMapping.ColumnMappings.Add("time_tag", "time_tag");
            tableMapping.ColumnMappings.Add("is_request", "is_request");
            tableMapping.ColumnMappings.Add("n_value", "n_value");
            tableMapping.ColumnMappings.Add("crc_error", "crc_error");
            tableMapping.ColumnMappings.Add("raw_packet", "raw_packet");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[packets_log] WHERE (([session_id] = @Original_session_id) AND ([unique_log_id] = @Original_unique_log_id) AND ([log_time] = @Original_log_time) AND ([apid] = @Original_apid) AND ([ssc] = @Original_ssc) AND ([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ((@IsNull_time_tag = 1 AND [time_tag] IS NULL) OR ([time_tag] = @Original_time_tag)) AND ([is_request] = @Original_is_request) AND ([n_value] = @Original_n_value) AND ([crc_error] = @Original_crc_error) AND ([raw_packet] = @Original_raw_packet))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_log_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "log_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_time_tag", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_tag", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_tag", global::System.Data.SqlDbType.Binary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_tag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[packets_log] ([session_id], [unique_log_id], [log_time], [apid], [ssc], [service_type], [service_subtype], [time_tag], [is_request], [n_value], [crc_error], [raw_packet]) VALUES (@session_id, @unique_log_id, @log_time, @apid, @ssc, @service_type, @service_subtype, @time_tag, @is_request, @n_value, @crc_error, @raw_packet);
SELECT session_id, unique_log_id, log_time, apid, ssc, service_type, service_subtype, time_tag, is_request, n_value, crc_error, raw_packet FROM packets_log WHERE (session_id = @session_id) AND (unique_log_id = @unique_log_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@log_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "log_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_tag", global::System.Data.SqlDbType.Binary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_tag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[packets_log] SET [session_id] = @session_id, [unique_log_id] = @unique_log_id, [log_time] = @log_time, [apid] = @apid, [ssc] = @ssc, [service_type] = @service_type, [service_subtype] = @service_subtype, [time_tag] = @time_tag, [is_request] = @is_request, [n_value] = @n_value, [crc_error] = @crc_error, [raw_packet] = @raw_packet WHERE (([session_id] = @Original_session_id) AND ([unique_log_id] = @Original_unique_log_id) AND ([log_time] = @Original_log_time) AND ([apid] = @Original_apid) AND ([ssc] = @Original_ssc) AND ([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ((@IsNull_time_tag = 1 AND [time_tag] IS NULL) OR ([time_tag] = @Original_time_tag)) AND ([is_request] = @Original_is_request) AND ([n_value] = @Original_n_value) AND ([crc_error] = @Original_crc_error) AND ([raw_packet] = @Original_raw_packet));
SELECT session_id, unique_log_id, log_time, apid, ssc, service_type, service_subtype, time_tag, is_request, n_value, crc_error, raw_packet FROM packets_log WHERE (session_id = @session_id) AND (unique_log_id = @unique_log_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@log_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "log_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_tag", global::System.Data.SqlDbType.Binary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_tag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_log_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "log_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_time_tag", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_tag", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_tag", global::System.Data.SqlDbType.Binary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_tag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT session_id, unique_log_id, log_time, apid, ssc, service_type, service_subt" +
                "ype, time_tag, is_request, n_value, crc_error, raw_packet FROM dbo.packets_log";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.packets_logDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.packets_logDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.packets_logDataTable dataTable = new COMAV_EGSEDataSet.packets_logDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.packets_logDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "packets_log");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_session_id, int Original_unique_log_id, System.DateTime Original_log_time, int Original_apid, int Original_ssc, int Original_service_type, int Original_service_subtype, byte[] Original_time_tag, bool Original_is_request, int Original_n_value, bool Original_crc_error, byte[] Original_raw_packet) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_session_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_unique_log_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_log_time));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_apid));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ssc));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_service_type));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_service_subtype));
            if ((Original_time_tag == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((byte[])(Original_time_tag));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_is_request));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_n_value));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((bool)(Original_crc_error));
            if ((Original_raw_packet == null)) {
                throw new global::System.ArgumentNullException("Original_raw_packet");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((byte[])(Original_raw_packet));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int session_id, int unique_log_id, System.DateTime log_time, int apid, int ssc, int service_type, int service_subtype, byte[] time_tag, bool is_request, int n_value, bool crc_error, byte[] raw_packet) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(session_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(unique_log_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(log_time));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(apid));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ssc));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(service_type));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(service_subtype));
            if ((time_tag == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((byte[])(time_tag));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(is_request));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(n_value));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(crc_error));
            if ((raw_packet == null)) {
                throw new global::System.ArgumentNullException("raw_packet");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((byte[])(raw_packet));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int session_id, 
                    int unique_log_id, 
                    System.DateTime log_time, 
                    int apid, 
                    int ssc, 
                    int service_type, 
                    int service_subtype, 
                    byte[] time_tag, 
                    bool is_request, 
                    int n_value, 
                    bool crc_error, 
                    byte[] raw_packet, 
                    int Original_session_id, 
                    int Original_unique_log_id, 
                    System.DateTime Original_log_time, 
                    int Original_apid, 
                    int Original_ssc, 
                    int Original_service_type, 
                    int Original_service_subtype, 
                    byte[] Original_time_tag, 
                    bool Original_is_request, 
                    int Original_n_value, 
                    bool Original_crc_error, 
                    byte[] Original_raw_packet) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(session_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(unique_log_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(log_time));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(apid));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ssc));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(service_type));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(service_subtype));
            if ((time_tag == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((byte[])(time_tag));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(is_request));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(n_value));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(crc_error));
            if ((raw_packet == null)) {
                throw new global::System.ArgumentNullException("raw_packet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((byte[])(raw_packet));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_session_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_unique_log_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_log_time));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_apid));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_ssc));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_service_type));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_service_subtype));
            if ((Original_time_tag == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((byte[])(Original_time_tag));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_is_request));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_n_value));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((bool)(Original_crc_error));
            if ((Original_raw_packet == null)) {
                throw new global::System.ArgumentNullException("Original_raw_packet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((byte[])(Original_raw_packet));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime log_time, 
                    int apid, 
                    int ssc, 
                    int service_type, 
                    int service_subtype, 
                    byte[] time_tag, 
                    bool is_request, 
                    int n_value, 
                    bool crc_error, 
                    byte[] raw_packet, 
                    int Original_session_id, 
                    int Original_unique_log_id, 
                    System.DateTime Original_log_time, 
                    int Original_apid, 
                    int Original_ssc, 
                    int Original_service_type, 
                    int Original_service_subtype, 
                    byte[] Original_time_tag, 
                    bool Original_is_request, 
                    int Original_n_value, 
                    bool Original_crc_error, 
                    byte[] Original_raw_packet) {
            return this.Update(Original_session_id, Original_unique_log_id, log_time, apid, ssc, service_type, service_subtype, time_tag, is_request, n_value, crc_error, raw_packet, Original_session_id, Original_unique_log_id, Original_log_time, Original_apid, Original_ssc, Original_service_type, Original_service_subtype, Original_time_tag, Original_is_request, Original_n_value, Original_crc_error, Original_raw_packet);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class packets_log_data_fieldTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public packets_log_data_fieldTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "packets_log_data_field";
            tableMapping.ColumnMappings.Add("session_id", "session_id");
            tableMapping.ColumnMappings.Add("unique_log_id", "unique_log_id");
            tableMapping.ColumnMappings.Add("data_field_id", "data_field_id");
            tableMapping.ColumnMappings.Add("parameter_id", "parameter_id");
            tableMapping.ColumnMappings.Add("position", "position");
            tableMapping.ColumnMappings.Add("nth_element", "nth_element");
            tableMapping.ColumnMappings.Add("is_data_field", "is_data_field");
            tableMapping.ColumnMappings.Add("data_field_value", "data_field_value");
            tableMapping.ColumnMappings.Add("long_data_field_value", "long_data_field_value");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[packets_log_data_field] WHERE (([session_id] = @Original_session_id) AND ([unique_log_id] = @Original_unique_log_id) AND ([data_field_id] = @Original_data_field_id) AND ([parameter_id] = @Original_parameter_id) AND ([position] = @Original_position) AND ([nth_element] = @Original_nth_element) AND ([is_data_field] = @Original_is_data_field) AND ([data_field_value] = @Original_data_field_value) AND ((@IsNull_long_data_field_value = 1 AND [long_data_field_value] IS NULL) OR ([long_data_field_value] = @Original_long_data_field_value)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_data_field", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_data_field", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_long_data_field_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[packets_log_data_field] ([session_id], [unique_log_id], [data_field_id], [parameter_id], [position], [nth_element], [is_data_field], [data_field_value], [long_data_field_value]) VALUES (@session_id, @unique_log_id, @data_field_id, @parameter_id, @position, @nth_element, @is_data_field, @data_field_value, @long_data_field_value);
SELECT session_id, unique_log_id, data_field_id, parameter_id, position, nth_element, is_data_field, data_field_value, long_data_field_value FROM packets_log_data_field WHERE (data_field_id = @data_field_id) AND (nth_element = @nth_element) AND (parameter_id = @parameter_id) AND (position = @position) AND (session_id = @session_id) AND (unique_log_id = @unique_log_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_data_field", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_data_field", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[packets_log_data_field] SET [session_id] = @session_id, [unique_log_id] = @unique_log_id, [data_field_id] = @data_field_id, [parameter_id] = @parameter_id, [position] = @position, [nth_element] = @nth_element, [is_data_field] = @is_data_field, [data_field_value] = @data_field_value, [long_data_field_value] = @long_data_field_value WHERE (([session_id] = @Original_session_id) AND ([unique_log_id] = @Original_unique_log_id) AND ([data_field_id] = @Original_data_field_id) AND ([parameter_id] = @Original_parameter_id) AND ([position] = @Original_position) AND ([nth_element] = @Original_nth_element) AND ([is_data_field] = @Original_is_data_field) AND ([data_field_value] = @Original_data_field_value) AND ((@IsNull_long_data_field_value = 1 AND [long_data_field_value] IS NULL) OR ([long_data_field_value] = @Original_long_data_field_value)));
SELECT session_id, unique_log_id, data_field_id, parameter_id, position, nth_element, is_data_field, data_field_value, long_data_field_value FROM packets_log_data_field WHERE (data_field_id = @data_field_id) AND (nth_element = @nth_element) AND (parameter_id = @parameter_id) AND (position = @position) AND (session_id = @session_id) AND (unique_log_id = @unique_log_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_data_field", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_data_field", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_unique_log_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "unique_log_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_data_field", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_data_field", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_long_data_field_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT session_id, unique_log_id, data_field_id, parameter_id, position, nth_elem" +
                "ent, is_data_field, data_field_value, long_data_field_value FROM dbo.packets_log" +
                "_data_field";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.packets_log_data_fieldDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.packets_log_data_fieldDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.packets_log_data_fieldDataTable dataTable = new COMAV_EGSEDataSet.packets_log_data_fieldDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.packets_log_data_fieldDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "packets_log_data_field");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_session_id, int Original_unique_log_id, int Original_data_field_id, int Original_parameter_id, int Original_position, int Original_nth_element, bool Original_is_data_field, long Original_data_field_value, byte[] Original_long_data_field_value) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_session_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_unique_log_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_data_field_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_parameter_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_position));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_nth_element));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_is_data_field));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_data_field_value));
            if ((Original_long_data_field_value == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((byte[])(Original_long_data_field_value));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int session_id, int unique_log_id, int data_field_id, int parameter_id, int position, int nth_element, bool is_data_field, long data_field_value, byte[] long_data_field_value) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(session_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(unique_log_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(data_field_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(parameter_id));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(position));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(nth_element));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(is_data_field));
            this.Adapter.InsertCommand.Parameters[7].Value = ((long)(data_field_value));
            if ((long_data_field_value == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((byte[])(long_data_field_value));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int session_id, 
                    int unique_log_id, 
                    int data_field_id, 
                    int parameter_id, 
                    int position, 
                    int nth_element, 
                    bool is_data_field, 
                    long data_field_value, 
                    byte[] long_data_field_value, 
                    int Original_session_id, 
                    int Original_unique_log_id, 
                    int Original_data_field_id, 
                    int Original_parameter_id, 
                    int Original_position, 
                    int Original_nth_element, 
                    bool Original_is_data_field, 
                    long Original_data_field_value, 
                    byte[] Original_long_data_field_value) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(session_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(unique_log_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(data_field_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(parameter_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(position));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(nth_element));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(is_data_field));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(data_field_value));
            if ((long_data_field_value == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(long_data_field_value));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_session_id));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_unique_log_id));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_data_field_id));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_parameter_id));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_position));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_nth_element));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_is_data_field));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_data_field_value));
            if ((Original_long_data_field_value == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((byte[])(Original_long_data_field_value));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(bool is_data_field, long data_field_value, byte[] long_data_field_value, int Original_session_id, int Original_unique_log_id, int Original_data_field_id, int Original_parameter_id, int Original_position, int Original_nth_element, bool Original_is_data_field, long Original_data_field_value, byte[] Original_long_data_field_value) {
            return this.Update(Original_session_id, Original_unique_log_id, Original_data_field_id, Original_parameter_id, Original_position, Original_nth_element, is_data_field, data_field_value, long_data_field_value, Original_session_id, Original_unique_log_id, Original_data_field_id, Original_parameter_id, Original_position, Original_nth_element, Original_is_data_field, Original_data_field_value, Original_long_data_field_value);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class parametersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "parameters";
            tableMapping.ColumnMappings.Add("parameter_id", "parameter_id");
            tableMapping.ColumnMappings.Add("parameter_description", "parameter_description");
            tableMapping.ColumnMappings.Add("data_type", "data_type");
            tableMapping.ColumnMappings.Add("show_as_hex", "show_as_hex");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[parameters] WHERE (([parameter_id] = @Original_parameter_id) AND ((@IsNull_parameter_description = 1 AND [parameter_description] IS NULL) OR ([parameter_description] = @Original_parameter_description)) AND ([data_type] = @Original_data_type) AND ([show_as_hex] = @Original_show_as_hex))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_parameter_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_show_as_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "show_as_hex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[parameters] ([parameter_id], [parameter_description], [data_type], [show_as_hex]) VALUES (@parameter_id, @parameter_description, @data_type, @show_as_hex);
SELECT parameter_id, parameter_description, data_type, show_as_hex FROM parameters WHERE (parameter_id = @parameter_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@show_as_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "show_as_hex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[parameters] SET [parameter_id] = @parameter_id, [parameter_description] = @parameter_description, [data_type] = @data_type, [show_as_hex] = @show_as_hex WHERE (([parameter_id] = @Original_parameter_id) AND ((@IsNull_parameter_description = 1 AND [parameter_description] IS NULL) OR ([parameter_description] = @Original_parameter_description)) AND ([data_type] = @Original_data_type) AND ([show_as_hex] = @Original_show_as_hex));
SELECT parameter_id, parameter_description, data_type, show_as_hex FROM parameters WHERE (parameter_id = @parameter_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@show_as_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "show_as_hex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_parameter_description", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_description", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_show_as_hex", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "show_as_hex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT parameter_id, parameter_description, data_type, show_as_hex FROM dbo.param" +
                "eters";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.parametersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.parametersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.parametersDataTable dataTable = new COMAV_EGSEDataSet.parametersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.parametersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "parameters");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_parameter_id, string Original_parameter_description, string Original_data_type, bool Original_show_as_hex) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_parameter_id));
            if ((Original_parameter_description == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_parameter_description));
            }
            if ((Original_data_type == null)) {
                throw new global::System.ArgumentNullException("Original_data_type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_data_type));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_show_as_hex));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int parameter_id, string parameter_description, string data_type, bool show_as_hex) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(parameter_id));
            if ((parameter_description == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(parameter_description));
            }
            if ((data_type == null)) {
                throw new global::System.ArgumentNullException("data_type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(data_type));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(show_as_hex));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int parameter_id, string parameter_description, string data_type, bool show_as_hex, int Original_parameter_id, string Original_parameter_description, string Original_data_type, bool Original_show_as_hex) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(parameter_id));
            if ((parameter_description == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(parameter_description));
            }
            if ((data_type == null)) {
                throw new global::System.ArgumentNullException("data_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(data_type));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(show_as_hex));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_parameter_id));
            if ((Original_parameter_description == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_parameter_description));
            }
            if ((Original_data_type == null)) {
                throw new global::System.ArgumentNullException("Original_data_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_data_type));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_show_as_hex));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string parameter_description, string data_type, bool show_as_hex, int Original_parameter_id, string Original_parameter_description, string Original_data_type, bool Original_show_as_hex) {
            return this.Update(Original_parameter_id, parameter_description, data_type, show_as_hex, Original_parameter_id, Original_parameter_description, Original_data_type, Original_show_as_hex);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class report_definition_structureTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public report_definition_structureTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "report_definition_structure";
            tableMapping.ColumnMappings.Add("structure_id", "structure_id");
            tableMapping.ColumnMappings.Add("parameter_id", "parameter_id");
            tableMapping.ColumnMappings.Add("position", "position");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[report_definition_structure] WHERE (([structure_id] = @Origina" +
                "l_structure_id) AND ([parameter_id] = @Original_parameter_id) AND ([position] = " +
                "@Original_position))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[report_definition_structure] ([structure_id], [parameter_id], [position]) VALUES (@structure_id, @parameter_id, @position);
SELECT structure_id, parameter_id, position FROM report_definition_structure WHERE (parameter_id = @parameter_id) AND (position = @position) AND (structure_id = @structure_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[report_definition_structure] SET [structure_id] = @structure_id, [parameter_id] = @parameter_id, [position] = @position WHERE (([structure_id] = @Original_structure_id) AND ([parameter_id] = @Original_parameter_id) AND ([position] = @Original_position));
SELECT structure_id, parameter_id, position FROM report_definition_structure WHERE (parameter_id = @parameter_id) AND (position = @position) AND (structure_id = @structure_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_parameter_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "parameter_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT structure_id, parameter_id, position FROM dbo.report_definition_structure";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.report_definition_structureDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.report_definition_structureDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.report_definition_structureDataTable dataTable = new COMAV_EGSEDataSet.report_definition_structureDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.report_definition_structureDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "report_definition_structure");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_structure_id, int Original_parameter_id, int Original_position) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_structure_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_parameter_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int structure_id, int parameter_id, int position) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(structure_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(parameter_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int structure_id, int parameter_id, int position, int Original_structure_id, int Original_parameter_id, int Original_position) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(structure_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(parameter_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(position));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_structure_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_parameter_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Original_structure_id, int Original_parameter_id, int Original_position) {
            return this.Update(Original_structure_id, Original_parameter_id, Original_position, Original_structure_id, Original_parameter_id, Original_position);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class report_definitionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public report_definitionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "report_definitions";
            tableMapping.ColumnMappings.Add("structure_id", "structure_id");
            tableMapping.ColumnMappings.Add("report_definition_description", "report_definition_description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[report_definitions] WHERE (([structure_id] = @Original_structu" +
                "re_id) AND ([report_definition_description] = @Original_report_definition_descri" +
                "ption))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_report_definition_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_definition_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[report_definitions] ([structure_id], [report_definition_description]) VALUES (@structure_id, @report_definition_description);
SELECT structure_id, report_definition_description FROM report_definitions WHERE (structure_id = @structure_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@report_definition_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_definition_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[report_definitions] SET [structure_id] = @structure_id, [report_definition_description] = @report_definition_description WHERE (([structure_id] = @Original_structure_id) AND ([report_definition_description] = @Original_report_definition_description));
SELECT structure_id, report_definition_description FROM report_definitions WHERE (structure_id = @structure_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@report_definition_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_definition_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_structure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "structure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_report_definition_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_definition_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT structure_id, report_definition_description FROM dbo.report_definitions";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.report_definitionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.report_definitionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.report_definitionsDataTable dataTable = new COMAV_EGSEDataSet.report_definitionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.report_definitionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "report_definitions");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_structure_id, string Original_report_definition_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_structure_id));
            if ((Original_report_definition_description == null)) {
                throw new global::System.ArgumentNullException("Original_report_definition_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_report_definition_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int structure_id, string report_definition_description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(structure_id));
            if ((report_definition_description == null)) {
                throw new global::System.ArgumentNullException("report_definition_description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(report_definition_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int structure_id, string report_definition_description, int Original_structure_id, string Original_report_definition_description) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(structure_id));
            if ((report_definition_description == null)) {
                throw new global::System.ArgumentNullException("report_definition_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(report_definition_description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_structure_id));
            if ((Original_report_definition_description == null)) {
                throw new global::System.ArgumentNullException("Original_report_definition_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_report_definition_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string report_definition_description, int Original_structure_id, string Original_report_definition_description) {
            return this.Update(Original_structure_id, report_definition_description, Original_structure_id, Original_report_definition_description);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ridsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ridsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "rids";
            tableMapping.ColumnMappings.Add("rid", "rid");
            tableMapping.ColumnMappings.Add("description", "description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[rids] WHERE (([rid] = @Original_rid) AND ([description] = @Ori" +
                "ginal_description))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[rids] ([rid], [description]) VALUES (@rid, @description);\r\nSEL" +
                "ECT rid, description FROM rids WHERE (rid = @rid)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[rids] SET [rid] = @rid, [description] = @description WHERE (([rid] " +
                "= @Original_rid) AND ([description] = @Original_description));\r\nSELECT rid, desc" +
                "ription FROM rids WHERE (rid = @rid)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT rid, description FROM dbo.rids";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.ridsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.ridsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.ridsDataTable dataTable = new COMAV_EGSEDataSet.ridsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.ridsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "rids");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_rid, string Original_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_rid));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int rid, string description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(rid));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int rid, string description, int Original_rid, string Original_description) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(rid));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_rid));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string description, int Original_rid, string Original_description) {
            return this.Update(Original_rid, description, Original_rid, Original_description);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class saved_requestsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public saved_requestsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "saved_requests";
            tableMapping.ColumnMappings.Add("saved_request_id", "saved_request_id");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("apid", "apid");
            tableMapping.ColumnMappings.Add("auto_ssc", "auto_ssc");
            tableMapping.ColumnMappings.Add("auto_length", "auto_length");
            tableMapping.ColumnMappings.Add("auto_crc", "auto_crc");
            tableMapping.ColumnMappings.Add("ssc", "ssc");
            tableMapping.ColumnMappings.Add("service_type", "service_type");
            tableMapping.ColumnMappings.Add("service_subtype", "service_subtype");
            tableMapping.ColumnMappings.Add("n_value", "n_value");
            tableMapping.ColumnMappings.Add("crc_error", "crc_error");
            tableMapping.ColumnMappings.Add("raw_packet", "raw_packet");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[saved_requests] WHERE (([saved_request_id] = @Original_saved_request_id) AND ([description] = @Original_description) AND ([apid] = @Original_apid) AND ((@IsNull_auto_ssc = 1 AND [auto_ssc] IS NULL) OR ([auto_ssc] = @Original_auto_ssc)) AND ((@IsNull_auto_length = 1 AND [auto_length] IS NULL) OR ([auto_length] = @Original_auto_length)) AND ((@IsNull_auto_crc = 1 AND [auto_crc] IS NULL) OR ([auto_crc] = @Original_auto_crc)) AND ([ssc] = @Original_ssc) AND ([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ([n_value] = @Original_n_value) AND ([crc_error] = @Original_crc_error) AND ([raw_packet] = @Original_raw_packet))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_auto_ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_ssc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_auto_ssc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_ssc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_auto_length", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_length", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_auto_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_length", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_auto_crc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_crc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_auto_crc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_crc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[saved_requests] ([saved_request_id], [description], [apid], [auto_ssc], [auto_length], [auto_crc], [ssc], [service_type], [service_subtype], [n_value], [crc_error], [raw_packet]) VALUES (@saved_request_id, @description, @apid, @auto_ssc, @auto_length, @auto_crc, @ssc, @service_type, @service_subtype, @n_value, @crc_error, @raw_packet);
SELECT saved_request_id, description, apid, auto_ssc, auto_length, auto_crc, ssc, service_type, service_subtype, n_value, crc_error, raw_packet FROM saved_requests WHERE (saved_request_id = @saved_request_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@auto_ssc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_ssc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@auto_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@auto_crc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_crc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[saved_requests] SET [saved_request_id] = @saved_request_id, [description] = @description, [apid] = @apid, [auto_ssc] = @auto_ssc, [auto_length] = @auto_length, [auto_crc] = @auto_crc, [ssc] = @ssc, [service_type] = @service_type, [service_subtype] = @service_subtype, [n_value] = @n_value, [crc_error] = @crc_error, [raw_packet] = @raw_packet WHERE (([saved_request_id] = @Original_saved_request_id) AND ([description] = @Original_description) AND ([apid] = @Original_apid) AND ((@IsNull_auto_ssc = 1 AND [auto_ssc] IS NULL) OR ([auto_ssc] = @Original_auto_ssc)) AND ((@IsNull_auto_length = 1 AND [auto_length] IS NULL) OR ([auto_length] = @Original_auto_length)) AND ((@IsNull_auto_crc = 1 AND [auto_crc] IS NULL) OR ([auto_crc] = @Original_auto_crc)) AND ([ssc] = @Original_ssc) AND ([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ([n_value] = @Original_n_value) AND ([crc_error] = @Original_crc_error) AND ([raw_packet] = @Original_raw_packet));
SELECT saved_request_id, description, apid, auto_ssc, auto_length, auto_crc, ssc, service_type, service_subtype, n_value, crc_error, raw_packet FROM saved_requests WHERE (saved_request_id = @saved_request_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@auto_ssc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_ssc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@auto_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_length", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@auto_crc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_crc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_apid", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "apid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_auto_ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_ssc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_auto_ssc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_ssc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_auto_length", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_length", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_auto_length", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_length", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_auto_crc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_crc", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_auto_crc", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "auto_crc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ssc", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ssc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_n_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "n_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_crc_error", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "crc_error", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_raw_packet", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "raw_packet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT saved_request_id, description, apid, auto_ssc, auto_length, auto_crc, ssc," +
                " service_type, service_subtype, n_value, crc_error, raw_packet FROM dbo.saved_re" +
                "quests";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.saved_requestsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.saved_requestsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.saved_requestsDataTable dataTable = new COMAV_EGSEDataSet.saved_requestsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.saved_requestsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "saved_requests");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_saved_request_id, string Original_description, int Original_apid, global::System.Nullable<bool> Original_auto_ssc, global::System.Nullable<bool> Original_auto_length, global::System.Nullable<bool> Original_auto_crc, int Original_ssc, int Original_service_type, int Original_service_subtype, int Original_n_value, bool Original_crc_error, byte[] Original_raw_packet) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_saved_request_id));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_description));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_apid));
            if ((Original_auto_ssc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_auto_ssc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_auto_length.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_auto_length.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_auto_crc.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_auto_crc.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_ssc));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_service_type));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_service_subtype));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_n_value));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_crc_error));
            if ((Original_raw_packet == null)) {
                throw new global::System.ArgumentNullException("Original_raw_packet");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((byte[])(Original_raw_packet));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int saved_request_id, string description, int apid, global::System.Nullable<bool> auto_ssc, global::System.Nullable<bool> auto_length, global::System.Nullable<bool> auto_crc, int ssc, int service_type, int service_subtype, int n_value, bool crc_error, byte[] raw_packet) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(saved_request_id));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(apid));
            if ((auto_ssc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(auto_ssc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((auto_length.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(auto_length.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((auto_crc.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(auto_crc.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ssc));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(service_type));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(service_subtype));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(n_value));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(crc_error));
            if ((raw_packet == null)) {
                throw new global::System.ArgumentNullException("raw_packet");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((byte[])(raw_packet));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int saved_request_id, 
                    string description, 
                    int apid, 
                    global::System.Nullable<bool> auto_ssc, 
                    global::System.Nullable<bool> auto_length, 
                    global::System.Nullable<bool> auto_crc, 
                    int ssc, 
                    int service_type, 
                    int service_subtype, 
                    int n_value, 
                    bool crc_error, 
                    byte[] raw_packet, 
                    int Original_saved_request_id, 
                    string Original_description, 
                    int Original_apid, 
                    global::System.Nullable<bool> Original_auto_ssc, 
                    global::System.Nullable<bool> Original_auto_length, 
                    global::System.Nullable<bool> Original_auto_crc, 
                    int Original_ssc, 
                    int Original_service_type, 
                    int Original_service_subtype, 
                    int Original_n_value, 
                    bool Original_crc_error, 
                    byte[] Original_raw_packet) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(saved_request_id));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(apid));
            if ((auto_ssc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(auto_ssc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((auto_length.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(auto_length.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((auto_crc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(auto_crc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ssc));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(service_type));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(service_subtype));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(n_value));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(crc_error));
            if ((raw_packet == null)) {
                throw new global::System.ArgumentNullException("raw_packet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((byte[])(raw_packet));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_saved_request_id));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_apid));
            if ((Original_auto_ssc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((bool)(Original_auto_ssc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_auto_length.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(Original_auto_length.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_auto_crc.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((bool)(Original_auto_crc.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_ssc));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_service_type));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_service_subtype));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_n_value));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(Original_crc_error));
            if ((Original_raw_packet == null)) {
                throw new global::System.ArgumentNullException("Original_raw_packet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((byte[])(Original_raw_packet));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string description, 
                    int apid, 
                    global::System.Nullable<bool> auto_ssc, 
                    global::System.Nullable<bool> auto_length, 
                    global::System.Nullable<bool> auto_crc, 
                    int ssc, 
                    int service_type, 
                    int service_subtype, 
                    int n_value, 
                    bool crc_error, 
                    byte[] raw_packet, 
                    int Original_saved_request_id, 
                    string Original_description, 
                    int Original_apid, 
                    global::System.Nullable<bool> Original_auto_ssc, 
                    global::System.Nullable<bool> Original_auto_length, 
                    global::System.Nullable<bool> Original_auto_crc, 
                    int Original_ssc, 
                    int Original_service_type, 
                    int Original_service_subtype, 
                    int Original_n_value, 
                    bool Original_crc_error, 
                    byte[] Original_raw_packet) {
            return this.Update(Original_saved_request_id, description, apid, auto_ssc, auto_length, auto_crc, ssc, service_type, service_subtype, n_value, crc_error, raw_packet, Original_saved_request_id, Original_description, Original_apid, Original_auto_ssc, Original_auto_length, Original_auto_crc, Original_ssc, Original_service_type, Original_service_subtype, Original_n_value, Original_crc_error, Original_raw_packet);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class saved_requests_data_fieldTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public saved_requests_data_fieldTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "saved_requests_data_field";
            tableMapping.ColumnMappings.Add("saved_request_id", "saved_request_id");
            tableMapping.ColumnMappings.Add("data_field_id", "data_field_id");
            tableMapping.ColumnMappings.Add("position", "position");
            tableMapping.ColumnMappings.Add("nth_element", "nth_element");
            tableMapping.ColumnMappings.Add("data_field_value", "data_field_value");
            tableMapping.ColumnMappings.Add("long_data_field_value", "long_data_field_value");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[saved_requests_data_field] WHERE (([saved_request_id] = @Original_saved_request_id) AND ([data_field_id] = @Original_data_field_id) AND ([position] = @Original_position) AND ([nth_element] = @Original_nth_element) AND ([data_field_value] = @Original_data_field_value) AND ((@IsNull_long_data_field_value = 1 AND [long_data_field_value] IS NULL) OR ([long_data_field_value] = @Original_long_data_field_value)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_long_data_field_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[saved_requests_data_field] ([saved_request_id], [data_field_id], [position], [nth_element], [data_field_value], [long_data_field_value]) VALUES (@saved_request_id, @data_field_id, @position, @nth_element, @data_field_value, @long_data_field_value);
SELECT saved_request_id, data_field_id, position, nth_element, data_field_value, long_data_field_value FROM saved_requests_data_field WHERE (data_field_id = @data_field_id) AND (nth_element = @nth_element) AND (position = @position) AND (saved_request_id = @saved_request_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[saved_requests_data_field] SET [saved_request_id] = @saved_request_id, [data_field_id] = @data_field_id, [position] = @position, [nth_element] = @nth_element, [data_field_value] = @data_field_value, [long_data_field_value] = @long_data_field_value WHERE (([saved_request_id] = @Original_saved_request_id) AND ([data_field_id] = @Original_data_field_id) AND ([position] = @Original_position) AND ([nth_element] = @Original_nth_element) AND ([data_field_value] = @Original_data_field_value) AND ((@IsNull_long_data_field_value = 1 AND [long_data_field_value] IS NULL) OR ([long_data_field_value] = @Original_long_data_field_value)));
SELECT saved_request_id, data_field_id, position, nth_element, data_field_value, long_data_field_value FROM saved_requests_data_field WHERE (data_field_id = @data_field_id) AND (nth_element = @nth_element) AND (position = @position) AND (saved_request_id = @saved_request_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_nth_element", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "nth_element", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_value", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_long_data_field_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_long_data_field_value", global::System.Data.SqlDbType.VarBinary, 0, global::System.Data.ParameterDirection.Input, 0, 0, "long_data_field_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT saved_request_id, data_field_id, position, nth_element, data_field_value, " +
                "long_data_field_value FROM dbo.saved_requests_data_field";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.saved_requests_data_fieldDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.saved_requests_data_fieldDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.saved_requests_data_fieldDataTable dataTable = new COMAV_EGSEDataSet.saved_requests_data_fieldDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.saved_requests_data_fieldDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "saved_requests_data_field");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_saved_request_id, int Original_data_field_id, int Original_position, int Original_nth_element, long Original_data_field_value, byte[] Original_long_data_field_value) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_saved_request_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_data_field_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_position));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_nth_element));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_data_field_value));
            if ((Original_long_data_field_value == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((byte[])(Original_long_data_field_value));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int saved_request_id, int data_field_id, int position, int nth_element, long data_field_value, byte[] long_data_field_value) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(saved_request_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(data_field_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(position));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(nth_element));
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(data_field_value));
            if ((long_data_field_value == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((byte[])(long_data_field_value));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int saved_request_id, int data_field_id, int position, int nth_element, long data_field_value, byte[] long_data_field_value, int Original_saved_request_id, int Original_data_field_id, int Original_position, int Original_nth_element, long Original_data_field_value, byte[] Original_long_data_field_value) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(saved_request_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(data_field_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(position));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(nth_element));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(data_field_value));
            if ((long_data_field_value == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((byte[])(long_data_field_value));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_saved_request_id));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_data_field_id));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_position));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_nth_element));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_data_field_value));
            if ((Original_long_data_field_value == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((byte[])(Original_long_data_field_value));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long data_field_value, byte[] long_data_field_value, int Original_saved_request_id, int Original_data_field_id, int Original_position, int Original_nth_element, long Original_data_field_value, byte[] Original_long_data_field_value) {
            return this.Update(Original_saved_request_id, Original_data_field_id, Original_position, Original_nth_element, data_field_value, long_data_field_value, Original_saved_request_id, Original_data_field_id, Original_position, Original_nth_element, Original_data_field_value, Original_long_data_field_value);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class servicesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "services";
            tableMapping.ColumnMappings.Add("service_type", "service_type");
            tableMapping.ColumnMappings.Add("service_name", "service_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[services] WHERE (([service_type] = @Original_service_type) AND" +
                " ([service_name] = @Original_service_name))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[services] ([service_type], [service_name]) VALUES (@service_ty" +
                "pe, @service_name);\r\nSELECT service_type, service_name FROM services WHERE (serv" +
                "ice_type = @service_type)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[services] SET [service_type] = @service_type, [service_name] = @service_name WHERE (([service_type] = @Original_service_type) AND ([service_name] = @Original_service_name));
SELECT service_type, service_name FROM services WHERE (service_type = @service_type)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT service_type, service_name FROM dbo.services";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.servicesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.servicesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.servicesDataTable dataTable = new COMAV_EGSEDataSet.servicesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.servicesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "services");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_service_type, string Original_service_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_service_type));
            if ((Original_service_name == null)) {
                throw new global::System.ArgumentNullException("Original_service_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_service_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int service_type, string service_name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(service_type));
            if ((service_name == null)) {
                throw new global::System.ArgumentNullException("service_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(service_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int service_type, string service_name, int Original_service_type, string Original_service_name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(service_type));
            if ((service_name == null)) {
                throw new global::System.ArgumentNullException("service_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(service_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_service_type));
            if ((Original_service_name == null)) {
                throw new global::System.ArgumentNullException("Original_service_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_service_name));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string service_name, int Original_service_type, string Original_service_name) {
            return this.Update(Original_service_type, service_name, Original_service_type, Original_service_name);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class sessionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sessionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "sessions";
            tableMapping.ColumnMappings.Add("session_id", "session_id");
            tableMapping.ColumnMappings.Add("start_time", "start_time");
            tableMapping.ColumnMappings.Add("end_time", "end_time");
            tableMapping.ColumnMappings.Add("connection_type", "connection_type");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[sessions] WHERE (([session_id] = @Original_session_id) AND ([s" +
                "tart_time] = @Original_start_time) AND ([end_time] = @Original_end_time) AND ([c" +
                "onnection_type] = @Original_connection_type))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_connection_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "connection_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[sessions] ([session_id], [start_time], [end_time], [connection_type]) VALUES (@session_id, @start_time, @end_time, @connection_type);
SELECT session_id, start_time, end_time, connection_type FROM sessions WHERE (session_id = @session_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@connection_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "connection_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[sessions] SET [session_id] = @session_id, [start_time] = @start_time, [end_time] = @end_time, [connection_type] = @connection_type WHERE (([session_id] = @Original_session_id) AND ([start_time] = @Original_start_time) AND ([end_time] = @Original_end_time) AND ([connection_type] = @Original_connection_type));
SELECT session_id, start_time, end_time, connection_type FROM sessions WHERE (session_id = @session_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@connection_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "connection_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_session_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "session_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_connection_type", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "connection_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT session_id, start_time, end_time, connection_type FROM dbo.sessions";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.sessionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.sessionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.sessionsDataTable dataTable = new COMAV_EGSEDataSet.sessionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.sessionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "sessions");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_session_id, System.DateTime Original_start_time, System.DateTime Original_end_time, string Original_connection_type) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_session_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_start_time));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_end_time));
            if ((Original_connection_type == null)) {
                throw new global::System.ArgumentNullException("Original_connection_type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_connection_type));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int session_id, System.DateTime start_time, System.DateTime end_time, string connection_type) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(session_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(start_time));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(end_time));
            if ((connection_type == null)) {
                throw new global::System.ArgumentNullException("connection_type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(connection_type));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int session_id, System.DateTime start_time, System.DateTime end_time, string connection_type, int Original_session_id, System.DateTime Original_start_time, System.DateTime Original_end_time, string Original_connection_type) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(session_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(start_time));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(end_time));
            if ((connection_type == null)) {
                throw new global::System.ArgumentNullException("connection_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(connection_type));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_session_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Original_start_time));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_end_time));
            if ((Original_connection_type == null)) {
                throw new global::System.ArgumentNullException("Original_connection_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_connection_type));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime start_time, System.DateTime end_time, string connection_type, int Original_session_id, System.DateTime Original_start_time, System.DateTime Original_end_time, string Original_connection_type) {
            return this.Update(Original_session_id, start_time, end_time, connection_type, Original_session_id, Original_start_time, Original_end_time, Original_connection_type);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class subtype_structureTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public subtype_structureTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "subtype_structure";
            tableMapping.ColumnMappings.Add("service_type", "service_type");
            tableMapping.ColumnMappings.Add("service_subtype", "service_subtype");
            tableMapping.ColumnMappings.Add("data_field_id", "data_field_id");
            tableMapping.ColumnMappings.Add("position", "position");
            tableMapping.ColumnMappings.Add("same_as_subtype", "same_as_subtype");
            tableMapping.ColumnMappings.Add("read_only", "read_only");
            tableMapping.ColumnMappings.Add("default_value", "default_value");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[subtype_structure] WHERE (([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ([data_field_id] = @Original_data_field_id) AND ([position] = @Original_position) AND ((@IsNull_same_as_subtype = 1 AND [same_as_subtype] IS NULL) OR ([same_as_subtype] = @Original_same_as_subtype)) AND ([read_only] = @Original_read_only) AND ((@IsNull_default_value = 1 AND [default_value] IS NULL) OR ([default_value] = @Original_default_value)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_same_as_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "same_as_subtype", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_same_as_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "same_as_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_read_only", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "read_only", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_default_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "default_value", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_default_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "default_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[subtype_structure] ([service_type], [service_subtype], [data_field_id], [position], [same_as_subtype], [read_only], [default_value]) VALUES (@service_type, @service_subtype, @data_field_id, @position, @same_as_subtype, @read_only, @default_value);
SELECT service_type, service_subtype, data_field_id, position, same_as_subtype, read_only, default_value FROM subtype_structure WHERE (data_field_id = @data_field_id) AND (position = @position) AND (service_subtype = @service_subtype) AND (service_type = @service_type)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@same_as_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "same_as_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@read_only", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "read_only", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@default_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "default_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[subtype_structure] SET [service_type] = @service_type, [service_subtype] = @service_subtype, [data_field_id] = @data_field_id, [position] = @position, [same_as_subtype] = @same_as_subtype, [read_only] = @read_only, [default_value] = @default_value WHERE (([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ([data_field_id] = @Original_data_field_id) AND ([position] = @Original_position) AND ((@IsNull_same_as_subtype = 1 AND [same_as_subtype] IS NULL) OR ([same_as_subtype] = @Original_same_as_subtype)) AND ([read_only] = @Original_read_only) AND ((@IsNull_default_value = 1 AND [default_value] IS NULL) OR ([default_value] = @Original_default_value)));
SELECT service_type, service_subtype, data_field_id, position, same_as_subtype, read_only, default_value FROM subtype_structure WHERE (data_field_id = @data_field_id) AND (position = @position) AND (service_subtype = @service_subtype) AND (service_type = @service_type)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@same_as_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "same_as_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@read_only", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "read_only", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@default_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "default_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_same_as_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "same_as_subtype", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_same_as_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "same_as_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_read_only", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "read_only", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_default_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "default_value", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_default_value", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "default_value", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT service_type, service_subtype, data_field_id, position, same_as_subtype, r" +
                "ead_only, default_value FROM dbo.subtype_structure";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.subtype_structureDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.subtype_structureDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.subtype_structureDataTable dataTable = new COMAV_EGSEDataSet.subtype_structureDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.subtype_structureDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "subtype_structure");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_service_type, int Original_service_subtype, int Original_data_field_id, int Original_position, global::System.Nullable<int> Original_same_as_subtype, bool Original_read_only, global::System.Nullable<int> Original_default_value) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_service_type));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_service_subtype));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_data_field_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_position));
            if ((Original_same_as_subtype.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_same_as_subtype.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_read_only));
            if ((Original_default_value.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_default_value.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int service_type, int service_subtype, int data_field_id, int position, global::System.Nullable<int> same_as_subtype, bool read_only, global::System.Nullable<int> default_value) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(service_type));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(service_subtype));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(data_field_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(position));
            if ((same_as_subtype.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(same_as_subtype.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(read_only));
            if ((default_value.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(default_value.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int service_type, int service_subtype, int data_field_id, int position, global::System.Nullable<int> same_as_subtype, bool read_only, global::System.Nullable<int> default_value, int Original_service_type, int Original_service_subtype, int Original_data_field_id, int Original_position, global::System.Nullable<int> Original_same_as_subtype, bool Original_read_only, global::System.Nullable<int> Original_default_value) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(service_type));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(service_subtype));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(data_field_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(position));
            if ((same_as_subtype.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(same_as_subtype.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(read_only));
            if ((default_value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(default_value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_service_type));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_service_subtype));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_data_field_id));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_position));
            if ((Original_same_as_subtype.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_same_as_subtype.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_read_only));
            if ((Original_default_value.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_default_value.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<int> same_as_subtype, bool read_only, global::System.Nullable<int> default_value, int Original_service_type, int Original_service_subtype, int Original_data_field_id, int Original_position, global::System.Nullable<int> Original_same_as_subtype, bool Original_read_only, global::System.Nullable<int> Original_default_value) {
            return this.Update(Original_service_type, Original_service_subtype, Original_data_field_id, Original_position, same_as_subtype, read_only, default_value, Original_service_type, Original_service_subtype, Original_data_field_id, Original_position, Original_same_as_subtype, Original_read_only, Original_default_value);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class subtypesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public subtypesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "subtypes";
            tableMapping.ColumnMappings.Add("service_type", "service_type");
            tableMapping.ColumnMappings.Add("service_subtype", "service_subtype");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("is_request", "is_request");
            tableMapping.ColumnMappings.Add("allow_repetition", "allow_repetition");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[subtypes] WHERE (([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ([description] = @Original_description) AND ([is_request] = @Original_is_request) AND ([allow_repetition] = @Original_allow_repetition))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_allow_repetition", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allow_repetition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[subtypes] ([service_type], [service_subtype], [description], [is_request], [allow_repetition]) VALUES (@service_type, @service_subtype, @description, @is_request, @allow_repetition);
SELECT service_type, service_subtype, description, is_request, allow_repetition FROM subtypes WHERE (service_subtype = @service_subtype) AND (service_type = @service_type)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@allow_repetition", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allow_repetition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[subtypes] SET [service_type] = @service_type, [service_subtype] = @service_subtype, [description] = @description, [is_request] = @is_request, [allow_repetition] = @allow_repetition WHERE (([service_type] = @Original_service_type) AND ([service_subtype] = @Original_service_subtype) AND ([description] = @Original_description) AND ([is_request] = @Original_is_request) AND ([allow_repetition] = @Original_allow_repetition));
SELECT service_type, service_subtype, description, is_request, allow_repetition FROM subtypes WHERE (service_subtype = @service_subtype) AND (service_type = @service_type)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@allow_repetition", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allow_repetition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_service_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "service_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_is_request", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "is_request", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_allow_repetition", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "allow_repetition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT service_type, service_subtype, description, is_request, allow_repetition F" +
                "ROM dbo.subtypes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.subtypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.subtypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.subtypesDataTable dataTable = new COMAV_EGSEDataSet.subtypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.subtypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "subtypes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_service_type, int Original_service_subtype, string Original_description, bool Original_is_request, bool Original_allow_repetition) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_service_type));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_service_subtype));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_description));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_is_request));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_allow_repetition));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int service_type, int service_subtype, string description, bool is_request, bool allow_repetition) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(service_type));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(service_subtype));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(description));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(is_request));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(allow_repetition));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int service_type, int service_subtype, string description, bool is_request, bool allow_repetition, int Original_service_type, int Original_service_subtype, string Original_description, bool Original_is_request, bool Original_allow_repetition) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(service_type));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(service_subtype));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(description));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(is_request));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(allow_repetition));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_service_type));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_service_subtype));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_description));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Original_is_request));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_allow_repetition));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string description, bool is_request, bool allow_repetition, int Original_service_type, int Original_service_subtype, string Original_description, bool Original_is_request, bool Original_allow_repetition) {
            return this.Update(Original_service_type, Original_service_subtype, description, is_request, allow_repetition, Original_service_type, Original_service_subtype, Original_description, Original_is_request, Original_allow_repetition);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tc_failure_code_structureTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tc_failure_code_structureTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tc_failure_code_structure";
            tableMapping.ColumnMappings.Add("tc_failure_code", "tc_failure_code");
            tableMapping.ColumnMappings.Add("data_field_id", "data_field_id");
            tableMapping.ColumnMappings.Add("position", "position");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tc_failure_code_structure] WHERE (([tc_failure_code] = @Origin" +
                "al_tc_failure_code) AND ([data_field_id] = @Original_data_field_id) AND ([positi" +
                "on] = @Original_position))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[tc_failure_code_structure] ([tc_failure_code], [data_field_id], [position]) VALUES (@tc_failure_code, @data_field_id, @position);
SELECT tc_failure_code, data_field_id, position FROM tc_failure_code_structure WHERE (data_field_id = @data_field_id) AND (position = @position) AND (tc_failure_code = @tc_failure_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tc_failure_code_structure] SET [tc_failure_code] = @tc_failure_code, [data_field_id] = @data_field_id, [position] = @position WHERE (([tc_failure_code] = @Original_tc_failure_code) AND ([data_field_id] = @Original_data_field_id) AND ([position] = @Original_position));
SELECT tc_failure_code, data_field_id, position FROM tc_failure_code_structure WHERE (data_field_id = @data_field_id) AND (position = @position) AND (tc_failure_code = @tc_failure_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT tc_failure_code, data_field_id, position FROM dbo.tc_failure_code_structur" +
                "e";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.tc_failure_code_structureDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.tc_failure_code_structureDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.tc_failure_code_structureDataTable dataTable = new COMAV_EGSEDataSet.tc_failure_code_structureDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.tc_failure_code_structureDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "tc_failure_code_structure");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_tc_failure_code, int Original_data_field_id, int Original_position) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_tc_failure_code));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_data_field_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int tc_failure_code, int data_field_id, int position) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(tc_failure_code));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(data_field_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int tc_failure_code, int data_field_id, int position, int Original_tc_failure_code, int Original_data_field_id, int Original_position) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(tc_failure_code));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(data_field_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(position));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_tc_failure_code));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_data_field_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_position));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int Original_tc_failure_code, int Original_data_field_id, int Original_position) {
            return this.Update(Original_tc_failure_code, Original_data_field_id, Original_position, Original_tc_failure_code, Original_data_field_id, Original_position);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class tc_failure_codesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tc_failure_codesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "tc_failure_codes";
            tableMapping.ColumnMappings.Add("tc_failure_code", "tc_failure_code");
            tableMapping.ColumnMappings.Add("tc_failure_description", "tc_failure_description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tc_failure_codes] WHERE (([tc_failure_code] = @Original_tc_fai" +
                "lure_code) AND ([tc_failure_description] = @Original_tc_failure_description))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tc_failure_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tc_failure_codes] ([tc_failure_code], [tc_failure_description]" +
                ") VALUES (@tc_failure_code, @tc_failure_description);\r\nSELECT tc_failure_code, t" +
                "c_failure_description FROM tc_failure_codes WHERE (tc_failure_code = @tc_failure" +
                "_code)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tc_failure_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[tc_failure_codes] SET [tc_failure_code] = @tc_failure_code, [tc_failure_description] = @tc_failure_description WHERE (([tc_failure_code] = @Original_tc_failure_code) AND ([tc_failure_description] = @Original_tc_failure_description));
SELECT tc_failure_code, tc_failure_description FROM tc_failure_codes WHERE (tc_failure_code = @tc_failure_code)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tc_failure_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tc_failure_code", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_tc_failure_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "tc_failure_description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT tc_failure_code, tc_failure_description FROM dbo.tc_failure_codes";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.tc_failure_codesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.tc_failure_codesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.tc_failure_codesDataTable dataTable = new COMAV_EGSEDataSet.tc_failure_codesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.tc_failure_codesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "tc_failure_codes");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_tc_failure_code, string Original_tc_failure_description) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_tc_failure_code));
            if ((Original_tc_failure_description == null)) {
                throw new global::System.ArgumentNullException("Original_tc_failure_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_tc_failure_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int tc_failure_code, string tc_failure_description) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(tc_failure_code));
            if ((tc_failure_description == null)) {
                throw new global::System.ArgumentNullException("tc_failure_description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(tc_failure_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int tc_failure_code, string tc_failure_description, int Original_tc_failure_code, string Original_tc_failure_description) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(tc_failure_code));
            if ((tc_failure_description == null)) {
                throw new global::System.ArgumentNullException("tc_failure_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(tc_failure_description));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_tc_failure_code));
            if ((Original_tc_failure_description == null)) {
                throw new global::System.ArgumentNullException("Original_tc_failure_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_tc_failure_description));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string tc_failure_description, int Original_tc_failure_code, string Original_tc_failure_description) {
            return this.Update(Original_tc_failure_code, tc_failure_description, Original_tc_failure_code, Original_tc_failure_description);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class test_procedure_stepsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public test_procedure_stepsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "test_procedure_steps";
            tableMapping.ColumnMappings.Add("procedure_id", "procedure_id");
            tableMapping.ColumnMappings.Add("position", "position");
            tableMapping.ColumnMappings.Add("saved_request_id", "saved_request_id");
            tableMapping.ColumnMappings.Add("inner_procedure_id", "inner_procedure_id");
            tableMapping.ColumnMappings.Add("time_delay", "time_delay");
            tableMapping.ColumnMappings.Add("verify_execution", "verify_execution");
            tableMapping.ColumnMappings.Add("verify_condition", "verify_condition");
            tableMapping.ColumnMappings.Add("report_type", "report_type");
            tableMapping.ColumnMappings.Add("report_subtype", "report_subtype");
            tableMapping.ColumnMappings.Add("data_field_id", "data_field_id");
            tableMapping.ColumnMappings.Add("comparison_operation", "comparison_operation");
            tableMapping.ColumnMappings.Add("value_to_compare", "value_to_compare");
            tableMapping.ColumnMappings.Add("verify_interval_start", "verify_interval_start");
            tableMapping.ColumnMappings.Add("verify_interval_end", "verify_interval_end");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[test_procedure_steps] WHERE (([procedure_id] = @Original_procedure_id) AND ([position] = @Original_position) AND ([saved_request_id] = @Original_saved_request_id) AND ([inner_procedure_id] = @Original_inner_procedure_id) AND ([time_delay] = @Original_time_delay) AND ([verify_execution] = @Original_verify_execution) AND ([verify_condition] = @Original_verify_condition) AND ((@IsNull_report_type = 1 AND [report_type] IS NULL) OR ([report_type] = @Original_report_type)) AND ((@IsNull_report_subtype = 1 AND [report_subtype] IS NULL) OR ([report_subtype] = @Original_report_subtype)) AND ((@IsNull_data_field_id = 1 AND [data_field_id] IS NULL) OR ([data_field_id] = @Original_data_field_id)) AND ([comparison_operation] = @Original_comparison_operation) AND ([value_to_compare] = @Original_value_to_compare) AND ([verify_interval_start] = @Original_verify_interval_start) AND ([verify_interval_end] = @Original_verify_interval_end))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inner_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inner_procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_delay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "time_delay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_execution", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_execution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_condition", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_condition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_report_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_report_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_report_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_subtype", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_report_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_comparison_operation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comparison_operation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_value_to_compare", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 20, 0, "value_to_compare", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_interval_start", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_start", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_interval_end", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_end", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[test_procedure_steps] ([procedure_id], [position], [saved_request_id], [inner_procedure_id], [time_delay], [verify_execution], [verify_condition], [report_type], [report_subtype], [data_field_id], [comparison_operation], [value_to_compare], [verify_interval_start], [verify_interval_end]) VALUES (@procedure_id, @position, @saved_request_id, @inner_procedure_id, @time_delay, @verify_execution, @verify_condition, @report_type, @report_subtype, @data_field_id, @comparison_operation, @value_to_compare, @verify_interval_start, @verify_interval_end);
SELECT procedure_id, position, saved_request_id, inner_procedure_id, time_delay, verify_execution, verify_condition, report_type, report_subtype, data_field_id, comparison_operation, value_to_compare, verify_interval_start, verify_interval_end FROM test_procedure_steps WHERE (inner_procedure_id = @inner_procedure_id) AND (position = @position) AND (procedure_id = @procedure_id) AND (saved_request_id = @saved_request_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inner_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inner_procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_delay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "time_delay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_execution", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_execution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_condition", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_condition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@report_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@report_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comparison_operation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comparison_operation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@value_to_compare", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 20, 0, "value_to_compare", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_interval_start", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_start", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_interval_end", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_end", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[test_procedure_steps] SET [procedure_id] = @procedure_id, [position" +
                "] = @position, [saved_request_id] = @saved_request_id, [inner_procedure_id] = @i" +
                "nner_procedure_id, [time_delay] = @time_delay, [verify_execution] = @verify_exec" +
                "ution, [verify_condition] = @verify_condition, [report_type] = @report_type, [re" +
                "port_subtype] = @report_subtype, [data_field_id] = @data_field_id, [comparison_o" +
                "peration] = @comparison_operation, [value_to_compare] = @value_to_compare, [veri" +
                "fy_interval_start] = @verify_interval_start, [verify_interval_end] = @verify_int" +
                "erval_end WHERE (([procedure_id] = @Original_procedure_id) AND ([position] = @Or" +
                "iginal_position) AND ([saved_request_id] = @Original_saved_request_id) AND ([inn" +
                "er_procedure_id] = @Original_inner_procedure_id) AND ([time_delay] = @Original_t" +
                "ime_delay) AND ([verify_execution] = @Original_verify_execution) AND ([verify_co" +
                "ndition] = @Original_verify_condition) AND ((@IsNull_report_type = 1 AND [report" +
                "_type] IS NULL) OR ([report_type] = @Original_report_type)) AND ((@IsNull_report" +
                "_subtype = 1 AND [report_subtype] IS NULL) OR ([report_subtype] = @Original_repo" +
                "rt_subtype)) AND ((@IsNull_data_field_id = 1 AND [data_field_id] IS NULL) OR ([d" +
                "ata_field_id] = @Original_data_field_id)) AND ([comparison_operation] = @Origina" +
                "l_comparison_operation) AND ([value_to_compare] = @Original_value_to_compare) AN" +
                "D ([verify_interval_start] = @Original_verify_interval_start) AND ([verify_inter" +
                "val_end] = @Original_verify_interval_end));\r\nSELECT procedure_id, position, save" +
                "d_request_id, inner_procedure_id, time_delay, verify_execution, verify_condition" +
                ", report_type, report_subtype, data_field_id, comparison_operation, value_to_com" +
                "pare, verify_interval_start, verify_interval_end FROM test_procedure_steps WHERE" +
                " (inner_procedure_id = @inner_procedure_id) AND (position = @position) AND (proc" +
                "edure_id = @procedure_id) AND (saved_request_id = @saved_request_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inner_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inner_procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_delay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "time_delay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_execution", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_execution", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_condition", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_condition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@report_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@report_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_subtype", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comparison_operation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comparison_operation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@value_to_compare", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 20, 0, "value_to_compare", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_interval_start", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_start", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@verify_interval_end", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_end", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_position", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "position", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_inner_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "inner_procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_time_delay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "time_delay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_execution", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_execution", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_condition", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "verify_condition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_report_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_type", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_report_type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_type", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_report_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_subtype", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_report_subtype", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "report_subtype", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_data_field_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "data_field_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_comparison_operation", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comparison_operation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_value_to_compare", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 20, 0, "value_to_compare", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_interval_start", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_start", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_verify_interval_end", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "verify_interval_end", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT procedure_id, position, saved_request_id, inner_procedure_id, time_delay, verify_execution, verify_condition, report_type, report_subtype, data_field_id, comparison_operation, value_to_compare, verify_interval_start, verify_interval_end FROM dbo.test_procedure_steps";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.test_procedure_stepsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.test_procedure_stepsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.test_procedure_stepsDataTable dataTable = new COMAV_EGSEDataSet.test_procedure_stepsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.test_procedure_stepsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "test_procedure_steps");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_procedure_id, int Original_position, int Original_saved_request_id, int Original_inner_procedure_id, decimal Original_time_delay, bool Original_verify_execution, string Original_verify_condition, global::System.Nullable<int> Original_report_type, global::System.Nullable<int> Original_report_subtype, global::System.Nullable<int> Original_data_field_id, string Original_comparison_operation, decimal Original_value_to_compare, decimal Original_verify_interval_start, decimal Original_verify_interval_end) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_procedure_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_position));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_saved_request_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_inner_procedure_id));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_time_delay));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_verify_execution));
            if ((Original_verify_condition == null)) {
                throw new global::System.ArgumentNullException("Original_verify_condition");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_verify_condition));
            }
            if ((Original_report_type.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_report_type.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_report_subtype.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_report_subtype.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_data_field_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_data_field_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_comparison_operation == null)) {
                throw new global::System.ArgumentNullException("Original_comparison_operation");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_comparison_operation));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_value_to_compare));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_verify_interval_start));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_verify_interval_end));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int procedure_id, int position, int saved_request_id, int inner_procedure_id, decimal time_delay, bool verify_execution, string verify_condition, global::System.Nullable<int> report_type, global::System.Nullable<int> report_subtype, global::System.Nullable<int> data_field_id, string comparison_operation, decimal value_to_compare, decimal verify_interval_start, decimal verify_interval_end) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(procedure_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(position));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(saved_request_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(inner_procedure_id));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(time_delay));
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(verify_execution));
            if ((verify_condition == null)) {
                throw new global::System.ArgumentNullException("verify_condition");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(verify_condition));
            }
            if ((report_type.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(report_type.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((report_subtype.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(report_subtype.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((data_field_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(data_field_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((comparison_operation == null)) {
                throw new global::System.ArgumentNullException("comparison_operation");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(comparison_operation));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(value_to_compare));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(verify_interval_start));
            this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(verify_interval_end));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int procedure_id, 
                    int position, 
                    int saved_request_id, 
                    int inner_procedure_id, 
                    decimal time_delay, 
                    bool verify_execution, 
                    string verify_condition, 
                    global::System.Nullable<int> report_type, 
                    global::System.Nullable<int> report_subtype, 
                    global::System.Nullable<int> data_field_id, 
                    string comparison_operation, 
                    decimal value_to_compare, 
                    decimal verify_interval_start, 
                    decimal verify_interval_end, 
                    int Original_procedure_id, 
                    int Original_position, 
                    int Original_saved_request_id, 
                    int Original_inner_procedure_id, 
                    decimal Original_time_delay, 
                    bool Original_verify_execution, 
                    string Original_verify_condition, 
                    global::System.Nullable<int> Original_report_type, 
                    global::System.Nullable<int> Original_report_subtype, 
                    global::System.Nullable<int> Original_data_field_id, 
                    string Original_comparison_operation, 
                    decimal Original_value_to_compare, 
                    decimal Original_verify_interval_start, 
                    decimal Original_verify_interval_end) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(procedure_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(position));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(saved_request_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(inner_procedure_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(time_delay));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(verify_execution));
            if ((verify_condition == null)) {
                throw new global::System.ArgumentNullException("verify_condition");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(verify_condition));
            }
            if ((report_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(report_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((report_subtype.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(report_subtype.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((data_field_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(data_field_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((comparison_operation == null)) {
                throw new global::System.ArgumentNullException("comparison_operation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(comparison_operation));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(value_to_compare));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(verify_interval_start));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(verify_interval_end));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_procedure_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_position));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_saved_request_id));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_inner_procedure_id));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_time_delay));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(Original_verify_execution));
            if ((Original_verify_condition == null)) {
                throw new global::System.ArgumentNullException("Original_verify_condition");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_verify_condition));
            }
            if ((Original_report_type.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_report_type.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_report_subtype.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_report_subtype.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_data_field_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_data_field_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_comparison_operation == null)) {
                throw new global::System.ArgumentNullException("Original_comparison_operation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_comparison_operation));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_value_to_compare));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_verify_interval_start));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(Original_verify_interval_end));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal time_delay, 
                    bool verify_execution, 
                    string verify_condition, 
                    global::System.Nullable<int> report_type, 
                    global::System.Nullable<int> report_subtype, 
                    global::System.Nullable<int> data_field_id, 
                    string comparison_operation, 
                    decimal value_to_compare, 
                    decimal verify_interval_start, 
                    decimal verify_interval_end, 
                    int Original_procedure_id, 
                    int Original_position, 
                    int Original_saved_request_id, 
                    int Original_inner_procedure_id, 
                    decimal Original_time_delay, 
                    bool Original_verify_execution, 
                    string Original_verify_condition, 
                    global::System.Nullable<int> Original_report_type, 
                    global::System.Nullable<int> Original_report_subtype, 
                    global::System.Nullable<int> Original_data_field_id, 
                    string Original_comparison_operation, 
                    decimal Original_value_to_compare, 
                    decimal Original_verify_interval_start, 
                    decimal Original_verify_interval_end) {
            return this.Update(Original_procedure_id, Original_position, Original_saved_request_id, Original_inner_procedure_id, time_delay, verify_execution, verify_condition, report_type, report_subtype, data_field_id, comparison_operation, value_to_compare, verify_interval_start, verify_interval_end, Original_procedure_id, Original_position, Original_saved_request_id, Original_inner_procedure_id, Original_time_delay, Original_verify_execution, Original_verify_condition, Original_report_type, Original_report_subtype, Original_data_field_id, Original_comparison_operation, Original_value_to_compare, Original_verify_interval_start, Original_verify_interval_end);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class test_procedure_steps_executionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public test_procedure_steps_executionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "test_procedure_steps_execution";
            tableMapping.ColumnMappings.Add("execution_id", "execution_id");
            tableMapping.ColumnMappings.Add("procedure_id", "procedure_id");
            tableMapping.ColumnMappings.Add("saved_request_id", "saved_request_id");
            tableMapping.ColumnMappings.Add("iteration", "iteration");
            tableMapping.ColumnMappings.Add("status", "status");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[test_procedure_steps_execution] WHERE (([execution_id] = @Original_execution_id) AND ([procedure_id] = @Original_procedure_id) AND ([saved_request_id] = @Original_saved_request_id) AND ([iteration] = @Original_iteration) AND ([status] = @Original_status))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_iteration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "iteration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[test_procedure_steps_execution] ([execution_id], [procedure_id], [saved_request_id], [iteration], [status]) VALUES (@execution_id, @procedure_id, @saved_request_id, @iteration, @status);
SELECT execution_id, procedure_id, saved_request_id, iteration, status FROM test_procedure_steps_execution WHERE (execution_id = @execution_id) AND (iteration = @iteration) AND (procedure_id = @procedure_id) AND (saved_request_id = @saved_request_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@iteration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "iteration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[test_procedure_steps_execution] SET [execution_id] = @execution_id, [procedure_id] = @procedure_id, [saved_request_id] = @saved_request_id, [iteration] = @iteration, [status] = @status WHERE (([execution_id] = @Original_execution_id) AND ([procedure_id] = @Original_procedure_id) AND ([saved_request_id] = @Original_saved_request_id) AND ([iteration] = @Original_iteration) AND ([status] = @Original_status));
SELECT execution_id, procedure_id, saved_request_id, iteration, status FROM test_procedure_steps_execution WHERE (execution_id = @execution_id) AND (iteration = @iteration) AND (procedure_id = @procedure_id) AND (saved_request_id = @saved_request_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@iteration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "iteration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_saved_request_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "saved_request_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_iteration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "iteration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT execution_id, procedure_id, saved_request_id, iteration, status FROM dbo.t" +
                "est_procedure_steps_execution";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.test_procedure_steps_executionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.test_procedure_steps_executionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.test_procedure_steps_executionDataTable dataTable = new COMAV_EGSEDataSet.test_procedure_steps_executionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.test_procedure_steps_executionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "test_procedure_steps_execution");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_execution_id, int Original_procedure_id, int Original_saved_request_id, int Original_iteration, string Original_status) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_execution_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_procedure_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_saved_request_id));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_iteration));
            if ((Original_status == null)) {
                throw new global::System.ArgumentNullException("Original_status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int execution_id, int procedure_id, int saved_request_id, int iteration, string status) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(execution_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(procedure_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(saved_request_id));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(iteration));
            if ((status == null)) {
                throw new global::System.ArgumentNullException("status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int execution_id, int procedure_id, int saved_request_id, int iteration, string status, int Original_execution_id, int Original_procedure_id, int Original_saved_request_id, int Original_iteration, string Original_status) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(execution_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(procedure_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(saved_request_id));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(iteration));
            if ((status == null)) {
                throw new global::System.ArgumentNullException("status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(status));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_execution_id));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_procedure_id));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_saved_request_id));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_iteration));
            if ((Original_status == null)) {
                throw new global::System.ArgumentNullException("Original_status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string status, int Original_execution_id, int Original_procedure_id, int Original_saved_request_id, int Original_iteration, string Original_status) {
            return this.Update(Original_execution_id, Original_procedure_id, Original_saved_request_id, Original_iteration, status, Original_execution_id, Original_procedure_id, Original_saved_request_id, Original_iteration, Original_status);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class test_proceduresTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public test_proceduresTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "test_procedures";
            tableMapping.ColumnMappings.Add("procedure_id", "procedure_id");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("purpose", "purpose");
            tableMapping.ColumnMappings.Add("estimated_duration", "estimated_duration");
            tableMapping.ColumnMappings.Add("synchronize_obt", "synchronize_obt");
            tableMapping.ColumnMappings.Add("get_cpu_usage", "get_cpu_usage");
            tableMapping.ColumnMappings.Add("run_in_loop", "run_in_loop");
            tableMapping.ColumnMappings.Add("loop_iterations", "loop_iterations");
            tableMapping.ColumnMappings.Add("send_mail", "send_mail");
            tableMapping.ColumnMappings.Add("packets_sequence_control_options", "packets_sequence_control_options");
            tableMapping.ColumnMappings.Add("executed", "executed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[test_procedures] WHERE (([procedure_id] = @Original_procedure_id) AND ([description] = @Original_description) AND ([purpose] = @Original_purpose) AND ([estimated_duration] = @Original_estimated_duration) AND ([synchronize_obt] = @Original_synchronize_obt) AND ([get_cpu_usage] = @Original_get_cpu_usage) AND ([run_in_loop] = @Original_run_in_loop) AND ([loop_iterations] = @Original_loop_iterations) AND ([send_mail] = @Original_send_mail) AND ([packets_sequence_control_options] = @Original_packets_sequence_control_options) AND ([executed] = @Original_executed))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_purpose", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "purpose", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_estimated_duration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "estimated_duration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_synchronize_obt", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "synchronize_obt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_get_cpu_usage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "get_cpu_usage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_run_in_loop", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "run_in_loop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "loop_iterations", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_send_mail", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "send_mail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_packets_sequence_control_options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packets_sequence_control_options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_executed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[test_procedures] ([procedure_id], [description], [purpose], [estimated_duration], [synchronize_obt], [get_cpu_usage], [run_in_loop], [loop_iterations], [send_mail], [packets_sequence_control_options], [executed]) VALUES (@procedure_id, @description, @purpose, @estimated_duration, @synchronize_obt, @get_cpu_usage, @run_in_loop, @loop_iterations, @send_mail, @packets_sequence_control_options, @executed);
SELECT procedure_id, description, purpose, estimated_duration, synchronize_obt, get_cpu_usage, run_in_loop, loop_iterations, send_mail, packets_sequence_control_options, executed FROM test_procedures WHERE (procedure_id = @procedure_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@purpose", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "purpose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@estimated_duration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "estimated_duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@synchronize_obt", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "synchronize_obt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@get_cpu_usage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "get_cpu_usage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@run_in_loop", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "run_in_loop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "loop_iterations", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@send_mail", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "send_mail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@packets_sequence_control_options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packets_sequence_control_options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@executed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[test_procedures] SET [procedure_id] = @procedure_id, [description] = @description, [purpose] = @purpose, [estimated_duration] = @estimated_duration, [synchronize_obt] = @synchronize_obt, [get_cpu_usage] = @get_cpu_usage, [run_in_loop] = @run_in_loop, [loop_iterations] = @loop_iterations, [send_mail] = @send_mail, [packets_sequence_control_options] = @packets_sequence_control_options, [executed] = @executed WHERE (([procedure_id] = @Original_procedure_id) AND ([description] = @Original_description) AND ([purpose] = @Original_purpose) AND ([estimated_duration] = @Original_estimated_duration) AND ([synchronize_obt] = @Original_synchronize_obt) AND ([get_cpu_usage] = @Original_get_cpu_usage) AND ([run_in_loop] = @Original_run_in_loop) AND ([loop_iterations] = @Original_loop_iterations) AND ([send_mail] = @Original_send_mail) AND ([packets_sequence_control_options] = @Original_packets_sequence_control_options) AND ([executed] = @Original_executed));
SELECT procedure_id, description, purpose, estimated_duration, synchronize_obt, get_cpu_usage, run_in_loop, loop_iterations, send_mail, packets_sequence_control_options, executed FROM test_procedures WHERE (procedure_id = @procedure_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@purpose", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "purpose", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@estimated_duration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "estimated_duration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@synchronize_obt", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "synchronize_obt", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@get_cpu_usage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "get_cpu_usage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@run_in_loop", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "run_in_loop", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "loop_iterations", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@send_mail", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "send_mail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@packets_sequence_control_options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packets_sequence_control_options", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@executed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_purpose", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "purpose", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_estimated_duration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "estimated_duration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_synchronize_obt", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "synchronize_obt", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_get_cpu_usage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "get_cpu_usage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_run_in_loop", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "run_in_loop", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "loop_iterations", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_send_mail", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "send_mail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_packets_sequence_control_options", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "packets_sequence_control_options", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_executed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT procedure_id, description, purpose, estimated_duration, synchronize_obt, g" +
                "et_cpu_usage, run_in_loop, loop_iterations, send_mail, packets_sequence_control_" +
                "options, executed FROM dbo.test_procedures";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.test_proceduresDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.test_proceduresDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.test_proceduresDataTable dataTable = new COMAV_EGSEDataSet.test_proceduresDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.test_proceduresDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "test_procedures");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_procedure_id, string Original_description, string Original_purpose, int Original_estimated_duration, bool Original_synchronize_obt, bool Original_get_cpu_usage, bool Original_run_in_loop, int Original_loop_iterations, bool Original_send_mail, string Original_packets_sequence_control_options, bool Original_executed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_procedure_id));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_description));
            }
            if ((Original_purpose == null)) {
                throw new global::System.ArgumentNullException("Original_purpose");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_purpose));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_estimated_duration));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_synchronize_obt));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_get_cpu_usage));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_run_in_loop));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_loop_iterations));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_send_mail));
            if ((Original_packets_sequence_control_options == null)) {
                throw new global::System.ArgumentNullException("Original_packets_sequence_control_options");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_packets_sequence_control_options));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_executed));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int procedure_id, string description, string purpose, int estimated_duration, bool synchronize_obt, bool get_cpu_usage, bool run_in_loop, int loop_iterations, bool send_mail, string packets_sequence_control_options, bool executed) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(procedure_id));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(description));
            }
            if ((purpose == null)) {
                throw new global::System.ArgumentNullException("purpose");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(purpose));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(estimated_duration));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(synchronize_obt));
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(get_cpu_usage));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(run_in_loop));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(loop_iterations));
            this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(send_mail));
            if ((packets_sequence_control_options == null)) {
                throw new global::System.ArgumentNullException("packets_sequence_control_options");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(packets_sequence_control_options));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(executed));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int procedure_id, 
                    string description, 
                    string purpose, 
                    int estimated_duration, 
                    bool synchronize_obt, 
                    bool get_cpu_usage, 
                    bool run_in_loop, 
                    int loop_iterations, 
                    bool send_mail, 
                    string packets_sequence_control_options, 
                    bool executed, 
                    int Original_procedure_id, 
                    string Original_description, 
                    string Original_purpose, 
                    int Original_estimated_duration, 
                    bool Original_synchronize_obt, 
                    bool Original_get_cpu_usage, 
                    bool Original_run_in_loop, 
                    int Original_loop_iterations, 
                    bool Original_send_mail, 
                    string Original_packets_sequence_control_options, 
                    bool Original_executed) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(procedure_id));
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(description));
            }
            if ((purpose == null)) {
                throw new global::System.ArgumentNullException("purpose");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(purpose));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(estimated_duration));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(synchronize_obt));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(get_cpu_usage));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(run_in_loop));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(loop_iterations));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(send_mail));
            if ((packets_sequence_control_options == null)) {
                throw new global::System.ArgumentNullException("packets_sequence_control_options");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(packets_sequence_control_options));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(executed));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_procedure_id));
            if ((Original_description == null)) {
                throw new global::System.ArgumentNullException("Original_description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_description));
            }
            if ((Original_purpose == null)) {
                throw new global::System.ArgumentNullException("Original_purpose");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_purpose));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_estimated_duration));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_synchronize_obt));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((bool)(Original_get_cpu_usage));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(Original_run_in_loop));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_loop_iterations));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((bool)(Original_send_mail));
            if ((Original_packets_sequence_control_options == null)) {
                throw new global::System.ArgumentNullException("Original_packets_sequence_control_options");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_packets_sequence_control_options));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_executed));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string description, 
                    string purpose, 
                    int estimated_duration, 
                    bool synchronize_obt, 
                    bool get_cpu_usage, 
                    bool run_in_loop, 
                    int loop_iterations, 
                    bool send_mail, 
                    string packets_sequence_control_options, 
                    bool executed, 
                    int Original_procedure_id, 
                    string Original_description, 
                    string Original_purpose, 
                    int Original_estimated_duration, 
                    bool Original_synchronize_obt, 
                    bool Original_get_cpu_usage, 
                    bool Original_run_in_loop, 
                    int Original_loop_iterations, 
                    bool Original_send_mail, 
                    string Original_packets_sequence_control_options, 
                    bool Original_executed) {
            return this.Update(Original_procedure_id, description, purpose, estimated_duration, synchronize_obt, get_cpu_usage, run_in_loop, loop_iterations, send_mail, packets_sequence_control_options, executed, Original_procedure_id, Original_description, Original_purpose, Original_estimated_duration, Original_synchronize_obt, Original_get_cpu_usage, Original_run_in_loop, Original_loop_iterations, Original_send_mail, Original_packets_sequence_control_options, Original_executed);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class test_procedures_executionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public test_procedures_executionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "test_procedures_execution";
            tableMapping.ColumnMappings.Add("execution_id", "execution_id");
            tableMapping.ColumnMappings.Add("procedure_id", "procedure_id");
            tableMapping.ColumnMappings.Add("start_time", "start_time");
            tableMapping.ColumnMappings.Add("end_time", "end_time");
            tableMapping.ColumnMappings.Add("execution_time", "execution_time");
            tableMapping.ColumnMappings.Add("executed_loop_iterations", "executed_loop_iterations");
            tableMapping.ColumnMappings.Add("status", "status");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[test_procedures_execution] WHERE (([execution_id] = @Original_execution_id) AND ([procedure_id] = @Original_procedure_id) AND ([start_time] = @Original_start_time) AND ([end_time] = @Original_end_time) AND ([execution_time] = @Original_execution_time) AND ([executed_loop_iterations] = @Original_executed_loop_iterations) AND ([status] = @Original_status))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_execution_time", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_executed_loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed_loop_iterations", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[test_procedures_execution] ([execution_id], [procedure_id], [start_time], [end_time], [execution_time], [executed_loop_iterations], [status]) VALUES (@execution_id, @procedure_id, @start_time, @end_time, @execution_time, @executed_loop_iterations, @status);
SELECT execution_id, procedure_id, start_time, end_time, execution_time, executed_loop_iterations, status FROM test_procedures_execution WHERE (execution_id = @execution_id) AND (procedure_id = @procedure_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@execution_time", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@executed_loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed_loop_iterations", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[test_procedures_execution] SET [execution_id] = @execution_id, [procedure_id] = @procedure_id, [start_time] = @start_time, [end_time] = @end_time, [execution_time] = @execution_time, [executed_loop_iterations] = @executed_loop_iterations, [status] = @status WHERE (([execution_id] = @Original_execution_id) AND ([procedure_id] = @Original_procedure_id) AND ([start_time] = @Original_start_time) AND ([end_time] = @Original_end_time) AND ([execution_time] = @Original_execution_time) AND ([executed_loop_iterations] = @Original_executed_loop_iterations) AND ([status] = @Original_status));
SELECT execution_id, procedure_id, start_time, end_time, execution_time, executed_loop_iterations, status FROM test_procedures_execution WHERE (execution_id = @execution_id) AND (procedure_id = @procedure_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@execution_time", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@executed_loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed_loop_iterations", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_execution_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_procedure_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "procedure_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_start_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "start_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_end_time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "end_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_execution_time", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "execution_time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_executed_loop_iterations", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "executed_loop_iterations", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_status", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "status", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT execution_id, procedure_id, start_time, end_time, execution_time, executed" +
                "_loop_iterations, status FROM dbo.test_procedures_execution";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.test_procedures_executionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.test_procedures_executionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            COMAV_EGSEDataSet.test_procedures_executionDataTable dataTable = new COMAV_EGSEDataSet.test_procedures_executionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet.test_procedures_executionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(COMAV_EGSEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "test_procedures_execution");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_execution_id, int Original_procedure_id, System.DateTime Original_start_time, System.DateTime Original_end_time, int Original_execution_time, int Original_executed_loop_iterations, string Original_status) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_execution_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_procedure_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_start_time));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_end_time));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_execution_time));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_executed_loop_iterations));
            if ((Original_status == null)) {
                throw new global::System.ArgumentNullException("Original_status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int execution_id, int procedure_id, System.DateTime start_time, System.DateTime end_time, int execution_time, int executed_loop_iterations, string status) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(execution_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(procedure_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(start_time));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(end_time));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(execution_time));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(executed_loop_iterations));
            if ((status == null)) {
                throw new global::System.ArgumentNullException("status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int execution_id, int procedure_id, System.DateTime start_time, System.DateTime end_time, int execution_time, int executed_loop_iterations, string status, int Original_execution_id, int Original_procedure_id, System.DateTime Original_start_time, System.DateTime Original_end_time, int Original_execution_time, int Original_executed_loop_iterations, string Original_status) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(execution_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(procedure_id));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(start_time));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(end_time));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(execution_time));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(executed_loop_iterations));
            if ((status == null)) {
                throw new global::System.ArgumentNullException("status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(status));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_execution_id));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_procedure_id));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_start_time));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_end_time));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_execution_time));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_executed_loop_iterations));
            if ((Original_status == null)) {
                throw new global::System.ArgumentNullException("Original_status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_status));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime start_time, System.DateTime end_time, int execution_time, int executed_loop_iterations, string status, int Original_execution_id, int Original_procedure_id, System.DateTime Original_start_time, System.DateTime Original_end_time, int Original_execution_time, int Original_executed_loop_iterations, string Original_status) {
            return this.Update(Original_execution_id, Original_procedure_id, start_time, end_time, execution_time, executed_loop_iterations, status, Original_execution_id, Original_procedure_id, Original_start_time, Original_end_time, Original_execution_time, Original_executed_loop_iterations, Original_status);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class sp_test_sessions_logTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sp_test_sessions_logTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "sp_test_sessions_log";
            tableMapping.ColumnMappings.Add("Log Time", "Log Time");
            tableMapping.ColumnMappings.Add("Packet Type", "Packet Type");
            tableMapping.ColumnMappings.Add("APIDX", "APIDX");
            tableMapping.ColumnMappings.Add("SSC", "SSC");
            tableMapping.ColumnMappings.Add("Service Type", "Service Type");
            tableMapping.ColumnMappings.Add("Service Subtype", "Service Subtype");
            tableMapping.ColumnMappings.Add("Time Tag", "Time Tag");
            tableMapping.ColumnMappings.Add("CRC", "CRC");
            tableMapping.ColumnMappings.Add("Reception Ack", "Reception Ack");
            tableMapping.ColumnMappings.Add("Execution Ack", "Execution Ack");
            tableMapping.ColumnMappings.Add("session_id", "session_id");
            tableMapping.ColumnMappings.Add("log_time", "log_time");
            tableMapping.ColumnMappings.Add("apid", "apid");
            tableMapping.ColumnMappings.Add("service_type", "service_type");
            tableMapping.ColumnMappings.Add("service_subtype", "service_subtype");
            tableMapping.ColumnMappings.Add("unique_log_id", "unique_log_id");
            tableMapping.ColumnMappings.Add("allow_repetition", "allow_repetition");
            tableMapping.ColumnMappings.Add("n_value", "n_value");
            tableMapping.ColumnMappings.Add("raw_packet", "raw_packet");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.sp_test_sessions_log";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@filter_request", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@is_request", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 1, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@connection_type", global::System.Data.SqlDbType.NVarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.sp_test_sessions_logDataTable dataTable, global::System.Nullable<int> session_id, global::System.Nullable<bool> filter_request, global::System.Nullable<bool> is_request, string connection_type) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((session_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(session_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((filter_request.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(filter_request.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((is_request.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((bool)(is_request.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((connection_type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(connection_type));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.sp_test_sessions_logDataTable GetData(global::System.Nullable<int> session_id, global::System.Nullable<bool> filter_request, global::System.Nullable<bool> is_request, string connection_type) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((session_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(session_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((filter_request.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(filter_request.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((is_request.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((bool)(is_request.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((connection_type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(connection_type));
            }
            COMAV_EGSEDataSet.sp_test_sessions_logDataTable dataTable = new COMAV_EGSEDataSet.sp_test_sessions_logDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class sp_test_sessions_log_app_dataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sp_test_sessions_log_app_dataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "sp_test_sessions_log_app_data";
            tableMapping.ColumnMappings.Add("data_field_name", "data_field_name");
            tableMapping.ColumnMappings.Add("value", "value");
            tableMapping.ColumnMappings.Add("number_of_bits", "number_of_bits");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.sp_test_sessions_log_app_data";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@session_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@unique_log_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(COMAV_EGSEDataSet.sp_test_sessions_log_app_dataDataTable dataTable, global::System.Nullable<int> session_id, global::System.Nullable<int> unique_log_id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((session_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(session_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((unique_log_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(unique_log_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual COMAV_EGSEDataSet.sp_test_sessions_log_app_dataDataTable GetData(global::System.Nullable<int> session_id, global::System.Nullable<int> unique_log_id) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((session_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(session_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((unique_log_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(unique_log_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            COMAV_EGSEDataSet.sp_test_sessions_log_app_dataDataTable dataTable = new COMAV_EGSEDataSet.sp_test_sessions_log_app_dataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = "dbo.f_regularString";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.NVarChar, 200, global::System.Data.ParameterDirection.ReturnValue, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@string", global::System.Data.SqlDbType.NVarChar, 200, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlClient.SqlConnection(global::Inpe.Subord.Comav.Egse.Smc.Properties.Settings.Default.COMAV_EGSEConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = "dbo.f_zero";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.ReturnValue, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@value", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@field_size", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual string f_regularString(string _string) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            if ((_string == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(_string));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            try {
                command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[0].Value == null) 
                        || (command.Parameters[0].Value.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((string)(command.Parameters[0].Value));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual string f_zero(global::System.Nullable<int> value, global::System.Nullable<int> field_size) {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            if ((value.HasValue == true)) {
                command.Parameters[1].Value = ((int)(value.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((field_size.HasValue == true)) {
                command.Parameters[2].Value = ((int)(field_size.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            try {
                command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((command.Parameters[0].Value == null) 
                        || (command.Parameters[0].Value.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((string)(command.Parameters[0].Value));
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private apidsTableAdapter _apidsTableAdapter;
        
        private data_field_listsTableAdapter _data_field_listsTableAdapter;
        
        private data_field_lists_headerTableAdapter _data_field_lists_headerTableAdapter;
        
        private data_fieldsTableAdapter _data_fieldsTableAdapter;
        
        private event_report_structureTableAdapter _event_report_structureTableAdapter;
        
        private memory_idsTableAdapter _memory_idsTableAdapter;
        
        private mission_constantsTableAdapter _mission_constantsTableAdapter;
        
        private output_line_idsTableAdapter _output_line_idsTableAdapter;
        
        private packet_store_idsTableAdapter _packet_store_idsTableAdapter;
        
        private packets_logTableAdapter _packets_logTableAdapter;
        
        private packets_log_data_fieldTableAdapter _packets_log_data_fieldTableAdapter;
        
        private parametersTableAdapter _parametersTableAdapter;
        
        private report_definition_structureTableAdapter _report_definition_structureTableAdapter;
        
        private report_definitionsTableAdapter _report_definitionsTableAdapter;
        
        private ridsTableAdapter _ridsTableAdapter;
        
        private saved_requestsTableAdapter _saved_requestsTableAdapter;
        
        private saved_requests_data_fieldTableAdapter _saved_requests_data_fieldTableAdapter;
        
        private servicesTableAdapter _servicesTableAdapter;
        
        private sessionsTableAdapter _sessionsTableAdapter;
        
        private subtype_structureTableAdapter _subtype_structureTableAdapter;
        
        private subtypesTableAdapter _subtypesTableAdapter;
        
        private tc_failure_code_structureTableAdapter _tc_failure_code_structureTableAdapter;
        
        private tc_failure_codesTableAdapter _tc_failure_codesTableAdapter;
        
        private test_procedure_stepsTableAdapter _test_procedure_stepsTableAdapter;
        
        private test_procedure_steps_executionTableAdapter _test_procedure_steps_executionTableAdapter;
        
        private test_proceduresTableAdapter _test_proceduresTableAdapter;
        
        private test_procedures_executionTableAdapter _test_procedures_executionTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public apidsTableAdapter apidsTableAdapter {
            get {
                return this._apidsTableAdapter;
            }
            set {
                this._apidsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public data_field_listsTableAdapter data_field_listsTableAdapter {
            get {
                return this._data_field_listsTableAdapter;
            }
            set {
                this._data_field_listsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public data_field_lists_headerTableAdapter data_field_lists_headerTableAdapter {
            get {
                return this._data_field_lists_headerTableAdapter;
            }
            set {
                this._data_field_lists_headerTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public data_fieldsTableAdapter data_fieldsTableAdapter {
            get {
                return this._data_fieldsTableAdapter;
            }
            set {
                this._data_fieldsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public event_report_structureTableAdapter event_report_structureTableAdapter {
            get {
                return this._event_report_structureTableAdapter;
            }
            set {
                this._event_report_structureTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public memory_idsTableAdapter memory_idsTableAdapter {
            get {
                return this._memory_idsTableAdapter;
            }
            set {
                this._memory_idsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public mission_constantsTableAdapter mission_constantsTableAdapter {
            get {
                return this._mission_constantsTableAdapter;
            }
            set {
                this._mission_constantsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public output_line_idsTableAdapter output_line_idsTableAdapter {
            get {
                return this._output_line_idsTableAdapter;
            }
            set {
                this._output_line_idsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public packet_store_idsTableAdapter packet_store_idsTableAdapter {
            get {
                return this._packet_store_idsTableAdapter;
            }
            set {
                this._packet_store_idsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public packets_logTableAdapter packets_logTableAdapter {
            get {
                return this._packets_logTableAdapter;
            }
            set {
                this._packets_logTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public packets_log_data_fieldTableAdapter packets_log_data_fieldTableAdapter {
            get {
                return this._packets_log_data_fieldTableAdapter;
            }
            set {
                this._packets_log_data_fieldTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public parametersTableAdapter parametersTableAdapter {
            get {
                return this._parametersTableAdapter;
            }
            set {
                this._parametersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public report_definition_structureTableAdapter report_definition_structureTableAdapter {
            get {
                return this._report_definition_structureTableAdapter;
            }
            set {
                this._report_definition_structureTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public report_definitionsTableAdapter report_definitionsTableAdapter {
            get {
                return this._report_definitionsTableAdapter;
            }
            set {
                this._report_definitionsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ridsTableAdapter ridsTableAdapter {
            get {
                return this._ridsTableAdapter;
            }
            set {
                this._ridsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public saved_requestsTableAdapter saved_requestsTableAdapter {
            get {
                return this._saved_requestsTableAdapter;
            }
            set {
                this._saved_requestsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public saved_requests_data_fieldTableAdapter saved_requests_data_fieldTableAdapter {
            get {
                return this._saved_requests_data_fieldTableAdapter;
            }
            set {
                this._saved_requests_data_fieldTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public servicesTableAdapter servicesTableAdapter {
            get {
                return this._servicesTableAdapter;
            }
            set {
                this._servicesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public sessionsTableAdapter sessionsTableAdapter {
            get {
                return this._sessionsTableAdapter;
            }
            set {
                this._sessionsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public subtype_structureTableAdapter subtype_structureTableAdapter {
            get {
                return this._subtype_structureTableAdapter;
            }
            set {
                this._subtype_structureTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public subtypesTableAdapter subtypesTableAdapter {
            get {
                return this._subtypesTableAdapter;
            }
            set {
                this._subtypesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tc_failure_code_structureTableAdapter tc_failure_code_structureTableAdapter {
            get {
                return this._tc_failure_code_structureTableAdapter;
            }
            set {
                this._tc_failure_code_structureTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public tc_failure_codesTableAdapter tc_failure_codesTableAdapter {
            get {
                return this._tc_failure_codesTableAdapter;
            }
            set {
                this._tc_failure_codesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public test_procedure_stepsTableAdapter test_procedure_stepsTableAdapter {
            get {
                return this._test_procedure_stepsTableAdapter;
            }
            set {
                this._test_procedure_stepsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public test_procedure_steps_executionTableAdapter test_procedure_steps_executionTableAdapter {
            get {
                return this._test_procedure_steps_executionTableAdapter;
            }
            set {
                this._test_procedure_steps_executionTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public test_proceduresTableAdapter test_proceduresTableAdapter {
            get {
                return this._test_proceduresTableAdapter;
            }
            set {
                this._test_proceduresTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public test_procedures_executionTableAdapter test_procedures_executionTableAdapter {
            get {
                return this._test_procedures_executionTableAdapter;
            }
            set {
                this._test_procedures_executionTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._apidsTableAdapter != null) 
                            && (this._apidsTableAdapter.Connection != null))) {
                    return this._apidsTableAdapter.Connection;
                }
                if (((this._data_field_listsTableAdapter != null) 
                            && (this._data_field_listsTableAdapter.Connection != null))) {
                    return this._data_field_listsTableAdapter.Connection;
                }
                if (((this._data_field_lists_headerTableAdapter != null) 
                            && (this._data_field_lists_headerTableAdapter.Connection != null))) {
                    return this._data_field_lists_headerTableAdapter.Connection;
                }
                if (((this._data_fieldsTableAdapter != null) 
                            && (this._data_fieldsTableAdapter.Connection != null))) {
                    return this._data_fieldsTableAdapter.Connection;
                }
                if (((this._event_report_structureTableAdapter != null) 
                            && (this._event_report_structureTableAdapter.Connection != null))) {
                    return this._event_report_structureTableAdapter.Connection;
                }
                if (((this._memory_idsTableAdapter != null) 
                            && (this._memory_idsTableAdapter.Connection != null))) {
                    return this._memory_idsTableAdapter.Connection;
                }
                if (((this._mission_constantsTableAdapter != null) 
                            && (this._mission_constantsTableAdapter.Connection != null))) {
                    return this._mission_constantsTableAdapter.Connection;
                }
                if (((this._output_line_idsTableAdapter != null) 
                            && (this._output_line_idsTableAdapter.Connection != null))) {
                    return this._output_line_idsTableAdapter.Connection;
                }
                if (((this._packet_store_idsTableAdapter != null) 
                            && (this._packet_store_idsTableAdapter.Connection != null))) {
                    return this._packet_store_idsTableAdapter.Connection;
                }
                if (((this._packets_logTableAdapter != null) 
                            && (this._packets_logTableAdapter.Connection != null))) {
                    return this._packets_logTableAdapter.Connection;
                }
                if (((this._packets_log_data_fieldTableAdapter != null) 
                            && (this._packets_log_data_fieldTableAdapter.Connection != null))) {
                    return this._packets_log_data_fieldTableAdapter.Connection;
                }
                if (((this._parametersTableAdapter != null) 
                            && (this._parametersTableAdapter.Connection != null))) {
                    return this._parametersTableAdapter.Connection;
                }
                if (((this._report_definition_structureTableAdapter != null) 
                            && (this._report_definition_structureTableAdapter.Connection != null))) {
                    return this._report_definition_structureTableAdapter.Connection;
                }
                if (((this._report_definitionsTableAdapter != null) 
                            && (this._report_definitionsTableAdapter.Connection != null))) {
                    return this._report_definitionsTableAdapter.Connection;
                }
                if (((this._ridsTableAdapter != null) 
                            && (this._ridsTableAdapter.Connection != null))) {
                    return this._ridsTableAdapter.Connection;
                }
                if (((this._saved_requestsTableAdapter != null) 
                            && (this._saved_requestsTableAdapter.Connection != null))) {
                    return this._saved_requestsTableAdapter.Connection;
                }
                if (((this._saved_requests_data_fieldTableAdapter != null) 
                            && (this._saved_requests_data_fieldTableAdapter.Connection != null))) {
                    return this._saved_requests_data_fieldTableAdapter.Connection;
                }
                if (((this._servicesTableAdapter != null) 
                            && (this._servicesTableAdapter.Connection != null))) {
                    return this._servicesTableAdapter.Connection;
                }
                if (((this._sessionsTableAdapter != null) 
                            && (this._sessionsTableAdapter.Connection != null))) {
                    return this._sessionsTableAdapter.Connection;
                }
                if (((this._subtype_structureTableAdapter != null) 
                            && (this._subtype_structureTableAdapter.Connection != null))) {
                    return this._subtype_structureTableAdapter.Connection;
                }
                if (((this._subtypesTableAdapter != null) 
                            && (this._subtypesTableAdapter.Connection != null))) {
                    return this._subtypesTableAdapter.Connection;
                }
                if (((this._tc_failure_code_structureTableAdapter != null) 
                            && (this._tc_failure_code_structureTableAdapter.Connection != null))) {
                    return this._tc_failure_code_structureTableAdapter.Connection;
                }
                if (((this._tc_failure_codesTableAdapter != null) 
                            && (this._tc_failure_codesTableAdapter.Connection != null))) {
                    return this._tc_failure_codesTableAdapter.Connection;
                }
                if (((this._test_procedure_stepsTableAdapter != null) 
                            && (this._test_procedure_stepsTableAdapter.Connection != null))) {
                    return this._test_procedure_stepsTableAdapter.Connection;
                }
                if (((this._test_procedure_steps_executionTableAdapter != null) 
                            && (this._test_procedure_steps_executionTableAdapter.Connection != null))) {
                    return this._test_procedure_steps_executionTableAdapter.Connection;
                }
                if (((this._test_proceduresTableAdapter != null) 
                            && (this._test_proceduresTableAdapter.Connection != null))) {
                    return this._test_proceduresTableAdapter.Connection;
                }
                if (((this._test_procedures_executionTableAdapter != null) 
                            && (this._test_procedures_executionTableAdapter.Connection != null))) {
                    return this._test_procedures_executionTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._apidsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._data_field_listsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._data_field_lists_headerTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._data_fieldsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._event_report_structureTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._memory_idsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mission_constantsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._output_line_idsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._packet_store_idsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._packets_logTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._packets_log_data_fieldTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._parametersTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._report_definition_structureTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._report_definitionsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._ridsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._saved_requestsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._saved_requests_data_fieldTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._servicesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._sessionsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._subtype_structureTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._subtypesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tc_failure_code_structureTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tc_failure_codesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._test_procedure_stepsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._test_procedure_steps_executionTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._test_proceduresTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._test_procedures_executionTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(COMAV_EGSEDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._servicesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.services.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._servicesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sessionsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.sessions.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sessionsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._parametersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.parameters.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._parametersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tc_failure_codesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tc_failure_codes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tc_failure_codesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._packets_logTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.packets_log.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._packets_logTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._report_definitionsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.report_definitions.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._report_definitionsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._ridsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.rids.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._ridsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._saved_requestsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.saved_requests.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._saved_requestsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._subtypesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.subtypes.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._subtypesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._data_fieldsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.data_fields.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._data_fieldsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._data_field_lists_headerTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.data_field_lists_header.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._data_field_lists_headerTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._test_proceduresTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.test_procedures.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._test_proceduresTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._subtype_structureTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.subtype_structure.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._subtype_structureTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._test_procedure_steps_executionTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.test_procedure_steps_execution.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._test_procedure_steps_executionTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._test_procedure_stepsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.test_procedure_steps.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._test_procedure_stepsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._test_procedures_executionTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.test_procedures_execution.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._test_procedures_executionTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tc_failure_code_structureTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.tc_failure_code_structure.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tc_failure_code_structureTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mission_constantsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.mission_constants.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mission_constantsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._output_line_idsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.output_line_ids.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._output_line_idsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._memory_idsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.memory_ids.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._memory_idsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._data_field_listsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.data_field_lists.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._data_field_listsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._event_report_structureTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.event_report_structure.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._event_report_structureTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._apidsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.apids.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._apidsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._saved_requests_data_fieldTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.saved_requests_data_field.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._saved_requests_data_fieldTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._report_definition_structureTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.report_definition_structure.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._report_definition_structureTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._packet_store_idsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.packet_store_ids.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._packet_store_idsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._packets_log_data_fieldTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.packets_log_data_field.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._packets_log_data_fieldTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(COMAV_EGSEDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._servicesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.services.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._servicesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sessionsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.sessions.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sessionsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._parametersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.parameters.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._parametersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tc_failure_codesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tc_failure_codes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tc_failure_codesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._packets_logTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.packets_log.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._packets_logTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._report_definitionsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.report_definitions.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._report_definitionsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._ridsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.rids.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._ridsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._saved_requestsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.saved_requests.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._saved_requestsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._subtypesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.subtypes.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._subtypesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._data_fieldsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.data_fields.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._data_fieldsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._data_field_lists_headerTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.data_field_lists_header.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._data_field_lists_headerTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._test_proceduresTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.test_procedures.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._test_proceduresTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._subtype_structureTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.subtype_structure.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._subtype_structureTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._test_procedure_steps_executionTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.test_procedure_steps_execution.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._test_procedure_steps_executionTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._test_procedure_stepsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.test_procedure_steps.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._test_procedure_stepsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._test_procedures_executionTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.test_procedures_execution.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._test_procedures_executionTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tc_failure_code_structureTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.tc_failure_code_structure.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tc_failure_code_structureTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mission_constantsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.mission_constants.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mission_constantsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._output_line_idsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.output_line_ids.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._output_line_idsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._memory_idsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.memory_ids.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._memory_idsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._data_field_listsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.data_field_lists.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._data_field_listsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._event_report_structureTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.event_report_structure.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._event_report_structureTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._apidsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.apids.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._apidsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._saved_requests_data_fieldTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.saved_requests_data_field.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._saved_requests_data_fieldTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._report_definition_structureTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.report_definition_structure.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._report_definition_structureTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._packet_store_idsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.packet_store_ids.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._packet_store_idsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._packets_log_data_fieldTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.packets_log_data_field.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._packets_log_data_fieldTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(COMAV_EGSEDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._packets_log_data_fieldTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.packets_log_data_field.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._packets_log_data_fieldTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._packet_store_idsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.packet_store_ids.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._packet_store_idsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._report_definition_structureTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.report_definition_structure.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._report_definition_structureTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._saved_requests_data_fieldTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.saved_requests_data_field.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._saved_requests_data_fieldTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._apidsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.apids.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._apidsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._event_report_structureTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.event_report_structure.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._event_report_structureTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._data_field_listsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.data_field_lists.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._data_field_listsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._memory_idsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.memory_ids.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._memory_idsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._output_line_idsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.output_line_ids.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._output_line_idsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mission_constantsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.mission_constants.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mission_constantsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tc_failure_code_structureTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tc_failure_code_structure.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tc_failure_code_structureTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._test_procedures_executionTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.test_procedures_execution.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._test_procedures_executionTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._test_procedure_stepsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.test_procedure_steps.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._test_procedure_stepsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._test_procedure_steps_executionTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.test_procedure_steps_execution.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._test_procedure_steps_executionTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._subtype_structureTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.subtype_structure.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._subtype_structureTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._test_proceduresTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.test_procedures.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._test_proceduresTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._data_field_lists_headerTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.data_field_lists_header.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._data_field_lists_headerTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._data_fieldsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.data_fields.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._data_fieldsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._subtypesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.subtypes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._subtypesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._saved_requestsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.saved_requests.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._saved_requestsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._ridsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.rids.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._ridsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._report_definitionsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.report_definitions.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._report_definitionsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._packets_logTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.packets_log.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._packets_logTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tc_failure_codesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.tc_failure_codes.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tc_failure_codesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._parametersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.parameters.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._parametersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sessionsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.sessions.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sessionsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._servicesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.services.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._servicesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(COMAV_EGSEDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._apidsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._apidsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._data_field_listsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._data_field_listsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._data_field_lists_headerTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._data_field_lists_headerTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._data_fieldsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._data_fieldsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._event_report_structureTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._event_report_structureTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._memory_idsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._memory_idsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mission_constantsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mission_constantsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._output_line_idsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._output_line_idsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._packet_store_idsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._packet_store_idsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._packets_logTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._packets_logTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._packets_log_data_fieldTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._packets_log_data_fieldTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._parametersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._parametersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._report_definition_structureTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._report_definition_structureTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._report_definitionsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._report_definitionsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._ridsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._ridsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._saved_requestsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._saved_requestsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._saved_requests_data_fieldTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._saved_requests_data_fieldTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._servicesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._servicesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._sessionsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sessionsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._subtype_structureTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._subtype_structureTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._subtypesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._subtypesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tc_failure_code_structureTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tc_failure_code_structureTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tc_failure_codesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tc_failure_codesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._test_procedure_stepsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._test_procedure_stepsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._test_procedure_steps_executionTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._test_procedure_steps_executionTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._test_proceduresTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._test_proceduresTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._test_procedures_executionTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._test_procedures_executionTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._apidsTableAdapter != null)) {
                    revertConnections.Add(this._apidsTableAdapter, this._apidsTableAdapter.Connection);
                    this._apidsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._apidsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._apidsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._apidsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._apidsTableAdapter.Adapter);
                    }
                }
                if ((this._data_field_listsTableAdapter != null)) {
                    revertConnections.Add(this._data_field_listsTableAdapter, this._data_field_listsTableAdapter.Connection);
                    this._data_field_listsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._data_field_listsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._data_field_listsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._data_field_listsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._data_field_listsTableAdapter.Adapter);
                    }
                }
                if ((this._data_field_lists_headerTableAdapter != null)) {
                    revertConnections.Add(this._data_field_lists_headerTableAdapter, this._data_field_lists_headerTableAdapter.Connection);
                    this._data_field_lists_headerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._data_field_lists_headerTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._data_field_lists_headerTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._data_field_lists_headerTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._data_field_lists_headerTableAdapter.Adapter);
                    }
                }
                if ((this._data_fieldsTableAdapter != null)) {
                    revertConnections.Add(this._data_fieldsTableAdapter, this._data_fieldsTableAdapter.Connection);
                    this._data_fieldsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._data_fieldsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._data_fieldsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._data_fieldsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._data_fieldsTableAdapter.Adapter);
                    }
                }
                if ((this._event_report_structureTableAdapter != null)) {
                    revertConnections.Add(this._event_report_structureTableAdapter, this._event_report_structureTableAdapter.Connection);
                    this._event_report_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._event_report_structureTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._event_report_structureTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._event_report_structureTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._event_report_structureTableAdapter.Adapter);
                    }
                }
                if ((this._memory_idsTableAdapter != null)) {
                    revertConnections.Add(this._memory_idsTableAdapter, this._memory_idsTableAdapter.Connection);
                    this._memory_idsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._memory_idsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._memory_idsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._memory_idsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._memory_idsTableAdapter.Adapter);
                    }
                }
                if ((this._mission_constantsTableAdapter != null)) {
                    revertConnections.Add(this._mission_constantsTableAdapter, this._mission_constantsTableAdapter.Connection);
                    this._mission_constantsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mission_constantsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mission_constantsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mission_constantsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mission_constantsTableAdapter.Adapter);
                    }
                }
                if ((this._output_line_idsTableAdapter != null)) {
                    revertConnections.Add(this._output_line_idsTableAdapter, this._output_line_idsTableAdapter.Connection);
                    this._output_line_idsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._output_line_idsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._output_line_idsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._output_line_idsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._output_line_idsTableAdapter.Adapter);
                    }
                }
                if ((this._packet_store_idsTableAdapter != null)) {
                    revertConnections.Add(this._packet_store_idsTableAdapter, this._packet_store_idsTableAdapter.Connection);
                    this._packet_store_idsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._packet_store_idsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._packet_store_idsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._packet_store_idsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._packet_store_idsTableAdapter.Adapter);
                    }
                }
                if ((this._packets_logTableAdapter != null)) {
                    revertConnections.Add(this._packets_logTableAdapter, this._packets_logTableAdapter.Connection);
                    this._packets_logTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._packets_logTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._packets_logTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._packets_logTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._packets_logTableAdapter.Adapter);
                    }
                }
                if ((this._packets_log_data_fieldTableAdapter != null)) {
                    revertConnections.Add(this._packets_log_data_fieldTableAdapter, this._packets_log_data_fieldTableAdapter.Connection);
                    this._packets_log_data_fieldTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._packets_log_data_fieldTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._packets_log_data_fieldTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._packets_log_data_fieldTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._packets_log_data_fieldTableAdapter.Adapter);
                    }
                }
                if ((this._parametersTableAdapter != null)) {
                    revertConnections.Add(this._parametersTableAdapter, this._parametersTableAdapter.Connection);
                    this._parametersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._parametersTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._parametersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._parametersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._parametersTableAdapter.Adapter);
                    }
                }
                if ((this._report_definition_structureTableAdapter != null)) {
                    revertConnections.Add(this._report_definition_structureTableAdapter, this._report_definition_structureTableAdapter.Connection);
                    this._report_definition_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._report_definition_structureTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._report_definition_structureTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._report_definition_structureTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._report_definition_structureTableAdapter.Adapter);
                    }
                }
                if ((this._report_definitionsTableAdapter != null)) {
                    revertConnections.Add(this._report_definitionsTableAdapter, this._report_definitionsTableAdapter.Connection);
                    this._report_definitionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._report_definitionsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._report_definitionsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._report_definitionsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._report_definitionsTableAdapter.Adapter);
                    }
                }
                if ((this._ridsTableAdapter != null)) {
                    revertConnections.Add(this._ridsTableAdapter, this._ridsTableAdapter.Connection);
                    this._ridsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._ridsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._ridsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._ridsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._ridsTableAdapter.Adapter);
                    }
                }
                if ((this._saved_requestsTableAdapter != null)) {
                    revertConnections.Add(this._saved_requestsTableAdapter, this._saved_requestsTableAdapter.Connection);
                    this._saved_requestsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._saved_requestsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._saved_requestsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._saved_requestsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._saved_requestsTableAdapter.Adapter);
                    }
                }
                if ((this._saved_requests_data_fieldTableAdapter != null)) {
                    revertConnections.Add(this._saved_requests_data_fieldTableAdapter, this._saved_requests_data_fieldTableAdapter.Connection);
                    this._saved_requests_data_fieldTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._saved_requests_data_fieldTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._saved_requests_data_fieldTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._saved_requests_data_fieldTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._saved_requests_data_fieldTableAdapter.Adapter);
                    }
                }
                if ((this._servicesTableAdapter != null)) {
                    revertConnections.Add(this._servicesTableAdapter, this._servicesTableAdapter.Connection);
                    this._servicesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._servicesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._servicesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._servicesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._servicesTableAdapter.Adapter);
                    }
                }
                if ((this._sessionsTableAdapter != null)) {
                    revertConnections.Add(this._sessionsTableAdapter, this._sessionsTableAdapter.Connection);
                    this._sessionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sessionsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sessionsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sessionsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sessionsTableAdapter.Adapter);
                    }
                }
                if ((this._subtype_structureTableAdapter != null)) {
                    revertConnections.Add(this._subtype_structureTableAdapter, this._subtype_structureTableAdapter.Connection);
                    this._subtype_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._subtype_structureTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._subtype_structureTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._subtype_structureTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._subtype_structureTableAdapter.Adapter);
                    }
                }
                if ((this._subtypesTableAdapter != null)) {
                    revertConnections.Add(this._subtypesTableAdapter, this._subtypesTableAdapter.Connection);
                    this._subtypesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._subtypesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._subtypesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._subtypesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._subtypesTableAdapter.Adapter);
                    }
                }
                if ((this._tc_failure_code_structureTableAdapter != null)) {
                    revertConnections.Add(this._tc_failure_code_structureTableAdapter, this._tc_failure_code_structureTableAdapter.Connection);
                    this._tc_failure_code_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tc_failure_code_structureTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tc_failure_code_structureTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tc_failure_code_structureTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tc_failure_code_structureTableAdapter.Adapter);
                    }
                }
                if ((this._tc_failure_codesTableAdapter != null)) {
                    revertConnections.Add(this._tc_failure_codesTableAdapter, this._tc_failure_codesTableAdapter.Connection);
                    this._tc_failure_codesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tc_failure_codesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tc_failure_codesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tc_failure_codesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tc_failure_codesTableAdapter.Adapter);
                    }
                }
                if ((this._test_procedure_stepsTableAdapter != null)) {
                    revertConnections.Add(this._test_procedure_stepsTableAdapter, this._test_procedure_stepsTableAdapter.Connection);
                    this._test_procedure_stepsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._test_procedure_stepsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._test_procedure_stepsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._test_procedure_stepsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._test_procedure_stepsTableAdapter.Adapter);
                    }
                }
                if ((this._test_procedure_steps_executionTableAdapter != null)) {
                    revertConnections.Add(this._test_procedure_steps_executionTableAdapter, this._test_procedure_steps_executionTableAdapter.Connection);
                    this._test_procedure_steps_executionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._test_procedure_steps_executionTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._test_procedure_steps_executionTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._test_procedure_steps_executionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._test_procedure_steps_executionTableAdapter.Adapter);
                    }
                }
                if ((this._test_proceduresTableAdapter != null)) {
                    revertConnections.Add(this._test_proceduresTableAdapter, this._test_proceduresTableAdapter.Connection);
                    this._test_proceduresTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._test_proceduresTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._test_proceduresTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._test_proceduresTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._test_proceduresTableAdapter.Adapter);
                    }
                }
                if ((this._test_procedures_executionTableAdapter != null)) {
                    revertConnections.Add(this._test_procedures_executionTableAdapter, this._test_procedures_executionTableAdapter.Connection);
                    this._test_procedures_executionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._test_procedures_executionTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._test_procedures_executionTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._test_procedures_executionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._test_procedures_executionTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._apidsTableAdapter != null)) {
                    this._apidsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._apidsTableAdapter]));
                    this._apidsTableAdapter.Transaction = null;
                }
                if ((this._data_field_listsTableAdapter != null)) {
                    this._data_field_listsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._data_field_listsTableAdapter]));
                    this._data_field_listsTableAdapter.Transaction = null;
                }
                if ((this._data_field_lists_headerTableAdapter != null)) {
                    this._data_field_lists_headerTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._data_field_lists_headerTableAdapter]));
                    this._data_field_lists_headerTableAdapter.Transaction = null;
                }
                if ((this._data_fieldsTableAdapter != null)) {
                    this._data_fieldsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._data_fieldsTableAdapter]));
                    this._data_fieldsTableAdapter.Transaction = null;
                }
                if ((this._event_report_structureTableAdapter != null)) {
                    this._event_report_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._event_report_structureTableAdapter]));
                    this._event_report_structureTableAdapter.Transaction = null;
                }
                if ((this._memory_idsTableAdapter != null)) {
                    this._memory_idsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._memory_idsTableAdapter]));
                    this._memory_idsTableAdapter.Transaction = null;
                }
                if ((this._mission_constantsTableAdapter != null)) {
                    this._mission_constantsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mission_constantsTableAdapter]));
                    this._mission_constantsTableAdapter.Transaction = null;
                }
                if ((this._output_line_idsTableAdapter != null)) {
                    this._output_line_idsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._output_line_idsTableAdapter]));
                    this._output_line_idsTableAdapter.Transaction = null;
                }
                if ((this._packet_store_idsTableAdapter != null)) {
                    this._packet_store_idsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._packet_store_idsTableAdapter]));
                    this._packet_store_idsTableAdapter.Transaction = null;
                }
                if ((this._packets_logTableAdapter != null)) {
                    this._packets_logTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._packets_logTableAdapter]));
                    this._packets_logTableAdapter.Transaction = null;
                }
                if ((this._packets_log_data_fieldTableAdapter != null)) {
                    this._packets_log_data_fieldTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._packets_log_data_fieldTableAdapter]));
                    this._packets_log_data_fieldTableAdapter.Transaction = null;
                }
                if ((this._parametersTableAdapter != null)) {
                    this._parametersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._parametersTableAdapter]));
                    this._parametersTableAdapter.Transaction = null;
                }
                if ((this._report_definition_structureTableAdapter != null)) {
                    this._report_definition_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._report_definition_structureTableAdapter]));
                    this._report_definition_structureTableAdapter.Transaction = null;
                }
                if ((this._report_definitionsTableAdapter != null)) {
                    this._report_definitionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._report_definitionsTableAdapter]));
                    this._report_definitionsTableAdapter.Transaction = null;
                }
                if ((this._ridsTableAdapter != null)) {
                    this._ridsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._ridsTableAdapter]));
                    this._ridsTableAdapter.Transaction = null;
                }
                if ((this._saved_requestsTableAdapter != null)) {
                    this._saved_requestsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._saved_requestsTableAdapter]));
                    this._saved_requestsTableAdapter.Transaction = null;
                }
                if ((this._saved_requests_data_fieldTableAdapter != null)) {
                    this._saved_requests_data_fieldTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._saved_requests_data_fieldTableAdapter]));
                    this._saved_requests_data_fieldTableAdapter.Transaction = null;
                }
                if ((this._servicesTableAdapter != null)) {
                    this._servicesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._servicesTableAdapter]));
                    this._servicesTableAdapter.Transaction = null;
                }
                if ((this._sessionsTableAdapter != null)) {
                    this._sessionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sessionsTableAdapter]));
                    this._sessionsTableAdapter.Transaction = null;
                }
                if ((this._subtype_structureTableAdapter != null)) {
                    this._subtype_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._subtype_structureTableAdapter]));
                    this._subtype_structureTableAdapter.Transaction = null;
                }
                if ((this._subtypesTableAdapter != null)) {
                    this._subtypesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._subtypesTableAdapter]));
                    this._subtypesTableAdapter.Transaction = null;
                }
                if ((this._tc_failure_code_structureTableAdapter != null)) {
                    this._tc_failure_code_structureTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tc_failure_code_structureTableAdapter]));
                    this._tc_failure_code_structureTableAdapter.Transaction = null;
                }
                if ((this._tc_failure_codesTableAdapter != null)) {
                    this._tc_failure_codesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tc_failure_codesTableAdapter]));
                    this._tc_failure_codesTableAdapter.Transaction = null;
                }
                if ((this._test_procedure_stepsTableAdapter != null)) {
                    this._test_procedure_stepsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._test_procedure_stepsTableAdapter]));
                    this._test_procedure_stepsTableAdapter.Transaction = null;
                }
                if ((this._test_procedure_steps_executionTableAdapter != null)) {
                    this._test_procedure_steps_executionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._test_procedure_steps_executionTableAdapter]));
                    this._test_procedure_steps_executionTableAdapter.Transaction = null;
                }
                if ((this._test_proceduresTableAdapter != null)) {
                    this._test_proceduresTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._test_proceduresTableAdapter]));
                    this._test_proceduresTableAdapter.Transaction = null;
                }
                if ((this._test_procedures_executionTableAdapter != null)) {
                    this._test_procedures_executionTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._test_procedures_executionTableAdapter]));
                    this._test_procedures_executionTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591